{
    author = {
	"Adam Fedor" = (
	    "fedor@gnu.org",
	    "fedor@colorado.edu"
	);
	"Alexander Malmberg" = (
	    "alexander@malmberg.org"
	);
	"Carl Lindberg" = (
	    "carl.lindberg@hbo.com"
	);
	"Chad Hardin" = (
	    "cehardin@mac.com"
	);
	"Chris Farber" = (
	    "chris@chrisfarber.net"
	);
	"Daniel Boehringer" = (
	    "boehring@biomed.ruhr-uni-bochum.de"
	);
	"Daniel Ferreira" = (
	    "dtf@stanford.edu"
	);
	"David Lazaro Saz" = (
	    "khelekir@encomix.es"
	);
	"Doug Simons (doug.simons@testplant.com)" = (
	);
	"Douglas Simons" = (
	    "doug.simons@testplant.com"
	);
	"Enrico Sersale" = (
	);
	"Felipe A. Rodriguez" = (
	    "far@ix.netcom.com"
	);
	"Franck Wolff" = (
	    "wolff@cybercable.fr"
	);
	"Fred Kiefer" = (
	    "fredkiefer@gmx.de"
	);
	"Frederic De Jaeger" = (
	);
	"Gerrit van Dyk" = (
	    "gerritvd@decimax.com",
	    "gerritvd@decillion.net"
	);
	"Gregory Casamento" = (
	    "greg.casamento@gmail.com",
	    "greg_casamento@yahoo.com"
	);
	"Gregory John Casamento" = (
	    "greg_casamento@yahoo.com",
	    "borgheron@yahoo.com",
	    "greg.casamento@gmail.com"
	);
	"H. Nikolaus Schaller" = (
	    "hns@computer.org"
	);
	"Jonathan Gapen" = (
	    "jagapen@smithlab.chem.wisc.edu",
	    "jagapen@whitewater.chem.wisc.edu"
	);
	"Michael Hanni" = (
	    "mhanni@sprintmail.com"
	);
	"Mirko Viviani" = (
	    "mirko.viviani@rccr.cremona.it"
	);
	"Nicola Pero" = (
	    "n.pero@mi.flashnet.it",
	    "nicola.pero@meta-innovation.com",
	    "nicola@brainstorm.co.uk"
	);
	"Nikolaus Schaller" = (
	    "hns@computer.org"
	);
	"Ovidiu Predescu" = (
	    "ovidiu@net-community.com"
	);
	"Pascal J. Bourguignon" = (
	    "pjb@imaginet.fr"
	);
	"Pedro Ivo Andrade Tavares" = (
	    "ptavares@iname.com"
	);
	"Pierre-Yves Rivaille" = (
	    "pyrivail@ens-lyon.fr"
	);
	"Quentin Mathe" = (
	    "qmathe@club-internet.fr"
	);
	"Richard Frith-Macdonald" = (
	    "richard@brainstorm.co.uk"
	);
	"Robert Vasvari" = (
	    "vrobi@ddrummer.com"
	);
	"Scott Christley" = (
	    "scottc@net-community.com"
	);
	"Simon Frankau" = (
	    "sgf@frankau.demon.co.uk"
	);
    };
    categories = {
	NSAffineTransform = {
	    GNUstep = NSAffineTransform;
	    GUIAdditions = NSAffineTransform;
	};
	NSApplication = {
	    CharacterPanel = NSApplication;
	    GSGUIInternal = NSApplication;
	    NSColorPanel = NSColorPanel;
	    NSDataLinkPanel = NSDataLinkPanel;
	    NSHelpManager = NSHelpManager;
	    NSHelpPanel = NSHelpPanel;
	    NSPageLayout = NSPageLayout;
	};
	NSAttributedString = {
	    AppKit = NSAttributedString;
	    NSStringDrawing = NSStringDrawing;
	    NSTextAttachment = NSTextAttachment;
	};
	NSBitmapImageRep = {
	    GNUstepExtension = NSBitmapImageRep;
	};
	NSBrowser = {
	    GNUstepExtensions = NSBrowser;
	};
	NSBundle = {
	    NSHelpManager = NSHelpManager;
	    NSImageAdditions = NSImage;
	    NSSoundAdditions = NSSound;
	};
	NSCell = {
	    PrivateMethods = NSCell;
	};
	NSCoder = {
	    NSCoderAdditions = NSColor;
	};
	NSColor = {
	    GSQuartz = NSColor;
	};
	NSFileWrapper = {
	    NSExtensions = NSFileWrapperExtensions;
	};
	NSFont = {
	    GNUstep = NSFont;
	};
	NSGraphicsContext = {
	    GNUstep = NSGraphicsContext;
	    NSGradient = NSGraphicsContext;
	    NSGraphics = NSGraphicsContext;
	    Ops = NSGraphicsContext;
	    Printing = NSGraphicsContext;
	};
	NSImage = {
	    GSQuartz = NSImage;
	};
	NSImageRep = {
	    GSQuartz = NSImageRep;
	};
	NSImageView = {
	    GNUstep = NSImageView;
	};
	NSMenu = {
	    GNUstepExtra = NSMenu;
	};
	NSMenuItem = {
	    GNUstepExtra = NSMenuItem;
	};
	NSMutableAttributedString = {
	    AppKit = NSAttributedString;
	    NSTextAttachment = NSTextAttachment;
	};
	NSObject = {
	    NSAlertDelegate = NSAlert;
	    NSApplicationDelegate = NSApplication;
	    NSBrowserDelegate = NSBrowser;
	    NSComboBoxCellDataSource = NSComboBoxCell;
	    NSControlDelegate = NSControl;
	    NSControlTextEditingDelegate = NSControl;
	    NSDataLinkManagerDelegate = NSDataLinkManager;
	    NSDataPickerCellDelegate = NSDatePickerCell;
	    NSEditor = NSKeyValueBinding;
	    NSEditorRegistration = NSKeyValueBinding;
	    NSFontManagerDelegate = NSFontManager;
	    NSFontPanelValidation = NSFontPanel;
	    NSKeyValueBindingCreation = NSKeyValueBinding;
	    NSMenuActionResponder = NSMenu;
	    NSMenuDelegate = NSMenu;
	    NSOpenSavePanelDelegate = NSSavePanel;
	    NSPasteboardItemDataProvider = NSPasteboardItem;
	    NSPasteboardOwner = NSPasteboard;
	    NSPasteboardReading = NSPasteboard;
	    NSPasteboardWriting = NSPasteboard;
	    NSPlaceholder = NSKeyValueBinding;
	    NSSavePanelDelegate = NSSavePanel;
	    NSServicesRequests = NSApplication;
	    NSSoundDelegate = NSSound;
	    NSSpeechSynthesizerDelegate = NSSpeechSynthesizer;
	    NSSplitViewDelegate = NSSplitView;
	    NSTableDataSource = NSTableView;
	    NSTableViewDelegate = NSTableView;
	    NSTextDelegate = NSText;
	    NSTextStorageDelegate = NSTextStorage;
	    NSTextViewDelegate = NSTextView;
	    NSWindowDelegate = NSWindow;
	    NSWindowDelegateAdditions = NSWindow;
	};
	NSPasteboard = {
	    GNUstepExtensions = NSPasteboard;
	};
	NSPrintOperation = {
	    Private = NSPrintOperation;
	};
	NSPrintPanel = {
	    Private = NSPrintPanel;
	};
	NSPrinter = {
	    PPDParsing = NSPrinter;
	    Private = NSPrinter;
	};
	NSProgressIndicator = {
	    GNUstepExtensions = NSProgressIndicator;
	};
	NSResponder = {
	    OptionalActionMethods = NSResponder;
	};
	NSSplitView = {
	    GNUstepExtra = NSSplitView;
	};
	NSString = {
	    NSStringDrawing = NSStringDrawing;
	};
	NSTabViewItem = {
	    GNUstep = NSTabViewItem;
	};
	NSTableView = {
	    GNUPrivate = NSTableView;
	};
	NSText = {
	    GNUstepExtensions = NSText;
	};
	NSTextFieldCell = {
	    PrivateMethods = NSTextFieldCell;
	};
	NSTextStorage = {
	    Scripting = NSTextStorage;
	};
	NSTextView = {
	    GSTextViewSync = NSTextView;
	    UserActions = NSTextView;
	    leftovers = NSTextView;
	};
	NSURL = {
	    NSPasteboard = NSPasteboard;
	};
	NSView = {
	    CoreAnimationSupport = NSView;
	    NSConstraintBasedLayoutCoreMethods = NSView;
	    NSConstraintBasedLayoutInstallingConstraints = NSView;
	    PrivateMethods = NSView;
	};
	NSWindow = {
	    GNUstepBackend = NSWindow;
	    GNUstepTextView = NSWindow;
	    Toolbar = NSWindow;
	};
	NSWorkspace = {
	    GNUstep = NSWorkspace;
	};
    };
    category = {
	"NSAffineTransform(GNUstep)" = NSAffineTransform;
	"NSAffineTransform(GUIAdditions)" = NSAffineTransform;
	"NSApplication(CharacterPanel)" = NSApplication;
	"NSApplication(GSGUIInternal)" = NSApplication;
	"NSApplication(NSColorPanel)" = NSColorPanel;
	"NSApplication(NSDataLinkPanel)" = NSDataLinkPanel;
	"NSApplication(NSHelpManager)" = NSHelpManager;
	"NSApplication(NSHelpPanel)" = NSHelpPanel;
	"NSApplication(NSPageLayout)" = NSPageLayout;
	"NSAttributedString(AppKit)" = NSAttributedString;
	"NSAttributedString(NSStringDrawing)" = NSStringDrawing;
	"NSAttributedString(NSTextAttachment)" = NSTextAttachment;
	"NSBitmapImageRep(GNUstepExtension)" = NSBitmapImageRep;
	"NSBrowser(GNUstepExtensions)" = NSBrowser;
	"NSBundle(NSHelpManager)" = NSHelpManager;
	"NSBundle(NSImageAdditions)" = NSImage;
	"NSBundle(NSSoundAdditions)" = NSSound;
	"NSCell(PrivateMethods)" = NSCell;
	"NSCoder(NSCoderAdditions)" = NSColor;
	"NSColor(GSQuartz)" = NSColor;
	"NSFileWrapper(NSExtensions)" = NSFileWrapperExtensions;
	"NSFont(GNUstep)" = NSFont;
	"NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	"NSGraphicsContext(NSGradient)" = NSGraphicsContext;
	"NSGraphicsContext(NSGraphics)" = NSGraphicsContext;
	"NSGraphicsContext(Ops)" = NSGraphicsContext;
	"NSGraphicsContext(Printing)" = NSGraphicsContext;
	"NSImage(GSQuartz)" = NSImage;
	"NSImageRep(GSQuartz)" = NSImageRep;
	"NSImageView(GNUstep)" = NSImageView;
	"NSMenu(GNUstepExtra)" = NSMenu;
	"NSMenuItem(GNUstepExtra)" = NSMenuItem;
	"NSMutableAttributedString(AppKit)" = NSAttributedString;
	"NSMutableAttributedString(NSTextAttachment)" = NSTextAttachment;
	"NSObject(NSAlertDelegate)" = NSAlert;
	"NSObject(NSApplicationDelegate)" = NSApplication;
	"NSObject(NSBrowserDelegate)" = NSBrowser;
	"NSObject(NSComboBoxCellDataSource)" = NSComboBoxCell;
	"NSObject(NSControlDelegate)" = NSControl;
	"NSObject(NSControlTextEditingDelegate)" = NSControl;
	"NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	"NSObject(NSDataPickerCellDelegate)" = NSDatePickerCell;
	"NSObject(NSEditor)" = NSKeyValueBinding;
	"NSObject(NSEditorRegistration)" = NSKeyValueBinding;
	"NSObject(NSFontManagerDelegate)" = NSFontManager;
	"NSObject(NSFontPanelValidation)" = NSFontPanel;
	"NSObject(NSKeyValueBindingCreation)" = NSKeyValueBinding;
	"NSObject(NSMenuActionResponder)" = NSMenu;
	"NSObject(NSMenuDelegate)" = NSMenu;
	"NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	"NSObject(NSPasteboardItemDataProvider)" = NSPasteboardItem;
	"NSObject(NSPasteboardOwner)" = NSPasteboard;
	"NSObject(NSPasteboardReading)" = NSPasteboard;
	"NSObject(NSPasteboardWriting)" = NSPasteboard;
	"NSObject(NSPlaceholder)" = NSKeyValueBinding;
	"NSObject(NSSavePanelDelegate)" = NSSavePanel;
	"NSObject(NSServicesRequests)" = NSApplication;
	"NSObject(NSSoundDelegate)" = NSSound;
	"NSObject(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	"NSObject(NSSplitViewDelegate)" = NSSplitView;
	"NSObject(NSTableDataSource)" = NSTableView;
	"NSObject(NSTableViewDelegate)" = NSTableView;
	"NSObject(NSTextDelegate)" = NSText;
	"NSObject(NSTextStorageDelegate)" = NSTextStorage;
	"NSObject(NSTextViewDelegate)" = NSTextView;
	"NSObject(NSWindowDelegate)" = NSWindow;
	"NSObject(NSWindowDelegateAdditions)" = NSWindow;
	"NSPasteboard(GNUstepExtensions)" = NSPasteboard;
	"NSPrintOperation(Private)" = NSPrintOperation;
	"NSPrintPanel(Private)" = NSPrintPanel;
	"NSPrinter(PPDParsing)" = NSPrinter;
	"NSPrinter(Private)" = NSPrinter;
	"NSProgressIndicator(GNUstepExtensions)" = NSProgressIndicator;
	"NSResponder(OptionalActionMethods)" = NSResponder;
	"NSSplitView(GNUstepExtra)" = NSSplitView;
	"NSString(NSStringDrawing)" = NSStringDrawing;
	"NSTabViewItem(GNUstep)" = NSTabViewItem;
	"NSTableView(GNUPrivate)" = NSTableView;
	"NSText(GNUstepExtensions)" = NSText;
	"NSTextFieldCell(PrivateMethods)" = NSTextFieldCell;
	"NSTextStorage(Scripting)" = NSTextStorage;
	"NSTextView(GSTextViewSync)" = NSTextView;
	"NSTextView(UserActions)" = NSTextView;
	"NSTextView(leftovers)" = NSTextView;
	"NSURL(NSPasteboard)" = NSPasteboard;
	"NSView(CoreAnimationSupport)" = NSView;
	"NSView(NSConstraintBasedLayoutCoreMethods)" = NSView;
	"NSView(NSConstraintBasedLayoutInstallingConstraints)" = NSView;
	"NSView(PrivateMethods)" = NSView;
	"NSWindow(GNUstepBackend)" = NSWindow;
	"NSWindow(GNUstepTextView)" = NSWindow;
	"NSWindow(Toolbar)" = NSWindow;
	"NSWorkspace(GNUstep)" = NSWorkspace;
    };
    class = {
	NSActionCell = NSActionCell;
	NSAlert = NSAlert;
	NSApplication = NSApplication;
	NSArrayController = NSArrayController;
	NSBezierPath = NSBezierPath;
	NSBitmapImageRep = NSBitmapImageRep;
	NSBox = NSBox;
	NSBrowser = NSBrowser;
	NSBrowserCell = NSBrowserCell;
	NSButton = NSButton;
	NSButtonCell = NSButtonCell;
	NSCachedImageRep = NSCachedImageRep;
	NSCell = NSCell;
	NSClipView = NSClipView;
	NSCollectionView = NSCollectionView;
	NSCollectionViewItem = NSCollectionViewItem;
	NSColor = NSColor;
	NSColorList = NSColorList;
	NSColorPanel = NSColorPanel;
	NSColorPicker = NSColorPicker;
	NSColorWell = NSColorWell;
	NSComboBox = NSComboBox;
	NSComboBoxCell = NSComboBoxCell;
	NSControl = NSControl;
	NSController = NSController;
	NSCursor = NSCursor;
	NSCustomImageRep = NSCustomImageRep;
	NSDataLink = NSDataLink;
	NSDataLinkManager = NSDataLinkManager;
	NSDataLinkPanel = NSDataLinkPanel;
	NSDatePicker = NSDatePicker;
	NSDatePickerCell = NSDatePickerCell;
	NSDocument = NSDocument;
	NSDocumentController = NSDocumentController;
	NSDrawer = NSDrawer;
	NSDrawerDelegate = NSDrawer;
	NSEPSImageRep = NSEPSImageRep;
	NSEvent = NSEvent;
	NSFont = NSFont;
	NSFontDescriptor = NSFontDescriptor;
	NSFontManager = NSFontManager;
	NSFontPanel = NSFontPanel;
	NSForm = NSForm;
	NSFormCell = NSFormCell;
	NSGraphicsContext = NSGraphicsContext;
	NSHelpManager = NSHelpManager;
	NSHelpPanel = NSHelpPanel;
	NSImage = NSImage;
	NSImageCell = NSImageCell;
	NSImageRep = NSImageRep;
	NSImageView = NSImageView;
	NSInputServer = NSInputServer;
	NSMatrix = NSMatrix;
	NSMenu = NSMenu;
	NSMenuItem = NSMenuItem;
	NSMenuItemCell = NSMenuItemCell;
	NSMenuView = NSMenuView;
	NSMovie = NSMovie;
	NSMovieView = NSMovieView;
	NSMutableParagraphStyle = NSParagraphStyle;
	NSNib = NSNib;
	NSObjectController = NSObjectController;
	NSOpenGLContext = NSOpenGL;
	NSOpenGLPixelFormat = NSOpenGL;
	NSOpenGLView = NSOpenGLView;
	NSOpenPanel = NSOpenPanel;
	NSOutlineView = NSOutlineView;
	NSPageLayout = NSPageLayout;
	NSPanel = NSPanel;
	NSParagraphStyle = NSParagraphStyle;
	NSPasteboard = NSPasteboard;
	NSPasteboardItem = NSPasteboardItem;
	NSPopUpButton = NSPopUpButton;
	NSPopUpButtonCell = NSPopUpButtonCell;
	NSPredicateEditor = NSPredicateEditor;
	NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	NSPrintInfo = NSPrintInfo;
	NSPrintOperation = NSPrintOperation;
	NSPrintPanel = NSPrintPanel;
	NSPrinter = NSPrinter;
	NSProgressIndicator = NSProgressIndicator;
	NSResponder = NSResponder;
	NSRuleEditor = NSRuleEditor;
	NSRulerMarker = NSRulerMarker;
	NSSavePanel = NSSavePanel;
	NSScreen = NSScreen;
	NSScrollView = NSScrollView;
	NSScroller = NSScroller;
	NSSecureTextField = NSSecureTextField;
	NSSecureTextFieldCell = NSSecureTextField;
	NSSelection = NSSelection;
	NSSharingService = NSSharingService;
	NSSharingServicePicker = NSSharingService;
	NSSlider = NSSlider;
	NSSliderCell = NSSliderCell;
	NSSound = NSSound;
	NSSpeechSynthesizer = NSSpeechSynthesizer;
	NSSpellChecker = NSSpellChecker;
	NSSplitView = NSSplitView;
	NSStepper = NSStepper;
	NSStepperCell = NSStepperCell;
	NSTabView = NSTabView;
	NSTabViewItem = NSTabViewItem;
	NSTableColumn = NSTableColumn;
	NSTableHeaderCell = NSTableHeaderCell;
	NSTableHeaderView = NSTableHeaderView;
	NSTableView = NSTableView;
	NSText = NSText;
	NSTextAttachment = NSTextAttachment;
	NSTextAttachmentCell = NSTextAttachment;
	NSTextContainer = NSTextContainer;
	NSTextField = NSTextField;
	NSTextFieldCell = NSTextFieldCell;
	NSTextStorage = NSTextStorage;
	NSTextTab = NSParagraphStyle;
	NSTextView = NSTextView;
	NSTokenField = NSTokenField;
	NSTokenFieldCell = NSTokenFieldCell;
	NSUserDefaultsController = NSUserDefaultsController;
	NSView = NSView;
	NSWindow = NSWindow;
	NSWindowController = NSWindowController;
	NSWorkspace = NSWorkspace;
    };
    classvars = {
	NSActionCell = {
	    "_action" = NSActionCell;
	    "_control_view" = NSActionCell;
	    "_tag" = NSActionCell;
	    "_target" = NSActionCell;
	};
	NSApplication = {
	    "_app_icon" = NSApplication;
	    "_app_icon_window" = NSApplication;
	    "_app_is_active" = NSApplication;
	    "_app_is_hidden" = NSApplication;
	    "_app_is_launched" = NSApplication;
	    "_app_is_running" = NSApplication;
	    "_appearance" = NSApplication;
	    "_current_event" = NSApplication;
	    "_default_context" = NSApplication;
	    "_delegate" = NSApplication;
	    "_dock_tile" = NSApplication;
	    "_hidden" = NSApplication;
	    "_hidden_key" = NSApplication;
	    "_hidden_main" = NSApplication;
	    "_inactive" = NSApplication;
	    "_infoPanel" = NSApplication;
	    "_key_window" = NSApplication;
	    "_listener" = NSApplication;
	    "_main_menu" = NSApplication;
	    "_main_window" = NSApplication;
	    "_presentationOptions" = NSApplication;
	    "_runLoopPool" = NSApplication;
	    "_session" = NSApplication;
	    "_unhide_on_activation" = NSApplication;
	    "_windows_menu" = NSApplication;
	    "_windows_need_update" = NSApplication;
	};
	NSArrayController = {
	    "_arranged_objects" = NSArrayController;
	    "_filter_predicate" = NSArrayController;
	    "_selection_indexes" = NSArrayController;
	    "_sort_descriptors" = NSArrayController;
	    "struct GSArrayControllerFlagsType" = NSArrayController;
	};
	NSBitmapImageRep = {
	    "_bitsPerPixel" = NSBitmapImageRep;
	    "_bytesPerRow" = NSBitmapImageRep;
	    "_comp_factor" = NSBitmapImageRep;
	    "_compression" = NSBitmapImageRep;
	    "_format" = NSBitmapImageRep;
	    "_imageData" = NSBitmapImageRep;
	    "_imagePlanes" = NSBitmapImageRep;
	    "_isPlanar" = NSBitmapImageRep;
	    "_numColors" = NSBitmapImageRep;
	    "_properties" = NSBitmapImageRep;
	};
	NSBox = {
	    "_border_color" = NSBox;
	    "_border_rect" = NSBox;
	    "_border_type" = NSBox;
	    "_border_width" = NSBox;
	    "_box_type" = NSBox;
	    "_cell" = NSBox;
	    "_content_view" = NSBox;
	    "_corner_radius" = NSBox;
	    "_fill_color" = NSBox;
	    "_offsets" = NSBox;
	    "_title_position" = NSBox;
	    "_title_rect" = NSBox;
	    "_transparent" = NSBox;
	};
	NSBrowser = {
	    "_acceptsAlphaNumericalKeys" = NSBrowser;
	    "_acceptsArrowKeys" = NSBrowser;
	    "_action" = NSBrowser;
	    "_allowsBranchSelection" = NSBrowser;
	    "_allowsEmptySelection" = NSBrowser;
	    "_allowsMultipleSelection" = NSBrowser;
	    "_alphaNumericalLastColumn" = NSBrowser;
	    "_browserCellPrototype" = NSBrowser;
	    "_browserColumns" = NSBrowser;
	    "_browserDelegate" = NSBrowser;
	    "_browserMatrixClass" = NSBrowser;
	    "_charBuffer" = NSBrowser;
	    "_columnDictionary" = NSBrowser;
	    "_columnResizing" = NSBrowser;
	    "_columnSize" = NSBrowser;
	    "_columnsAutosaveName" = NSBrowser;
	    "_doubleAction" = NSBrowser;
	    "_firstVisibleColumn" = NSBrowser;
	    "_hasHorizontalScroller" = NSBrowser;
	    "_horizontalScroller" = NSBrowser;
	    "_isLoaded" = NSBrowser;
	    "_isTitled" = NSBrowser;
	    "_itemBasedDelegate" = NSBrowser;
	    "_lastColumnLoaded" = NSBrowser;
	    "_lastKeyPressed" = NSBrowser;
	    "_lastVisibleColumn" = NSBrowser;
	    "_maxVisibleColumns" = NSBrowser;
	    "_minColumnWidth" = NSBrowser;
	    "_passiveDelegate" = NSBrowser;
	    "_pathSeparator" = NSBrowser;
	    "_prefersAllColumnUserResizing" = NSBrowser;
	    "_reusesColumns" = NSBrowser;
	    "_scrollerRect" = NSBrowser;
	    "_sendsActionOnAlphaNumericalKeys" = NSBrowser;
	    "_sendsActionOnArrowKeys" = NSBrowser;
	    "_separatesColumns" = NSBrowser;
	    "_skipUpdateScroller" = NSBrowser;
	    "_takesTitleFromPreviousColumn" = NSBrowser;
	    "_target" = NSBrowser;
	};
	NSBrowserCell = {
	    "_alternateImage" = NSBrowserCell;
	};
	NSButtonCell = {
	    "_altContents" = NSButtonCell;
	    "_altImage" = NSButtonCell;
	    "_backgroundColor" = NSButtonCell;
	    "_bezel_style" = NSButtonCell;
	    "_delayInterval" = NSButtonCell;
	    "_gradient_type" = NSButtonCell;
	    "_highlightsByMask" = NSButtonCell;
	    "_imageScaling" = NSButtonCell;
	    "_keyEquivalent" = NSButtonCell;
	    "_keyEquivalentFont" = NSButtonCell;
	    "_keyEquivalentModifierMask" = NSButtonCell;
	    "_repeatInterval" = NSButtonCell;
	    "_showAltStateMask" = NSButtonCell;
	    "_sound" = NSButtonCell;
	};
	NSCachedImageRep = {
	    "_rect" = NSCachedImageRep;
	    "_window" = NSCachedImageRep;
	};
	NSCell = {
	    "_action_mask" = NSCell;
	    "_cell_image" = NSCell;
	    "_contents" = NSCell;
	    "_font" = NSCell;
	    "_formatter" = NSCell;
	    "_menu" = NSCell;
	    "_mouse_down_flags" = NSCell;
	    "_object_value" = NSCell;
	    "_represented_object" = NSCell;
	    "_reserved1" = NSCell;
	    "struct GSCellFlagsType" = NSCell;
	};
	NSClipView = {
	    "_backgroundColor" = NSClipView;
	    "_copiesOnScroll" = NSClipView;
	    "_cursor" = NSClipView;
	    "_documentView" = NSClipView;
	    "_drawsBackground" = NSClipView;
	    "_isOpaque" = NSClipView;
	};
	NSCollectionView = {
	    "_allowReload" = NSCollectionView;
	    "_allowsEmptySelection" = NSCollectionView;
	    "_allowsMultipleSelection" = NSCollectionView;
	    "_backgroundColors" = NSCollectionView;
	    "_backgroundView" = NSCollectionView;
	    "_backgroundViewScrollsWithContent" = NSCollectionView;
	    "_collectionViewLayout" = NSCollectionView;
	    "_content" = NSCollectionView;
	    "_dataSource" = NSCollectionView;
	    "_delegate" = NSCollectionView;
	    "_draggingOnIndex" = NSCollectionView;
	    "_draggingOnRow" = NSCollectionView;
	    "_draggingSourceOperationMaskForLocal" = NSCollectionView;
	    "_draggingSourceOperationMaskForRemote" = NSCollectionView;
	    "_horizontalMargin" = NSCollectionView;
	    "_indexPathsForSupplementaryElementsOfKind" = NSCollectionView;
	    "_indexPathsToItems" = NSCollectionView;
	    "_isSelectable" = NSCollectionView;
	    "_itemSize" = NSCollectionView;
	    "_items" = NSCollectionView;
	    "_itemsToAttributes" = NSCollectionView;
	    "_itemsToIndexPaths" = NSCollectionView;
	    "_maxItemSize" = NSCollectionView;
	    "_maxNumberOfColumns" = NSCollectionView;
	    "_maxNumberOfRows" = NSCollectionView;
	    "_minItemSize" = NSCollectionView;
	    "_numberOfColumns" = NSCollectionView;
	    "_prefetchDataSource" = NSCollectionView;
	    "_registeredClasses" = NSCollectionView;
	    "_registeredNibs" = NSCollectionView;
	    "_selectionIndexPaths" = NSCollectionView;
	    "_selectionIndexes" = NSCollectionView;
	    "_tileWidth" = NSCollectionView;
	    "_verticalMargin" = NSCollectionView;
	    "_visibleItems" = NSCollectionView;
	    "_visibleSupplementaryViews" = NSCollectionView;
	    itemPrototype = NSCollectionView;
	};
	NSCollectionViewItem = {
	    "_isSelected" = NSCollectionViewItem;
	    imageView = NSCollectionViewItem;
	    textField = NSCollectionViewItem;
	};
	NSColorList = {
	    "_colorDictionary" = NSColorList;
	    "_fullFileName" = NSColorList;
	    "_is_editable" = NSColorList;
	    "_name" = NSColorList;
	    "_orderedColorKeys" = NSColorList;
	};
	NSColorPanel = {
	    "_accessoryView" = NSColorPanel;
	    "_action" = NSColorPanel;
	    "_alphaSlider" = NSColorPanel;
	    "_colorWell" = NSColorPanel;
	    "_currentPicker" = NSColorPanel;
	    "_isContinuous" = NSColorPanel;
	    "_magnifyButton" = NSColorPanel;
	    "_pickerBox" = NSColorPanel;
	    "_pickerMatrix" = NSColorPanel;
	    "_pickers" = NSColorPanel;
	    "_showsAlpha" = NSColorPanel;
	    "_splitView" = NSColorPanel;
	    "_target" = NSColorPanel;
	    "_topView" = NSColorPanel;
	};
	NSColorPicker = {
	    "_colorPanel" = NSColorPicker;
	};
	NSColorWell = {
	    "_action" = NSColorWell;
	    "_is_active" = NSColorWell;
	    "_is_bordered" = NSColorWell;
	    "_mouseDownPoint" = NSColorWell;
	    "_target" = NSColorWell;
	    "_the_color" = NSColorWell;
	    "_wellRect" = NSColorWell;
	};
	NSComboBoxCell = {
	    "_buttonCell" = NSComboBoxCell;
	    "_completes" = NSComboBoxCell;
	    "_dataSource" = NSComboBoxCell;
	    "_hasVerticalScroller" = NSComboBoxCell;
	    "_intercellSpacing" = NSComboBoxCell;
	    "_itemHeight" = NSComboBoxCell;
	    "_lastValidFrame" = NSComboBoxCell;
	    "_popUpList" = NSComboBoxCell;
	    "_prevSelectedRange" = NSComboBoxCell;
	    "_selectedItem" = NSComboBoxCell;
	    "_usesDataSource" = NSComboBoxCell;
	    "_visibleItems" = NSComboBoxCell;
	};
	NSControl = {
	    "_cell" = NSControl;
	    "_ignoresMultiClick" = NSControl;
	    "_tag" = NSControl;
	};
	NSController = {
	    "_declared_keys" = NSController;
	    "_editors" = NSController;
	};
	NSCursor = {
	    "_cid" = NSCursor;
	    "_cursor_image" = NSCursor;
	    "_hot_spot" = NSCursor;
	    "struct GSCursorFlagsType" = NSCursor;
	};
	NSCustomImageRep = {
	    "_delegate" = NSCustomImageRep;
	    "_selector" = NSCustomImageRep;
	};
	NSDataLinkManager = {
	    delegate = NSDataLinkManager;
	    destinationLinks = NSDataLinkManager;
	    filename = NSDataLinkManager;
	    sourceLinks = NSDataLinkManager;
	    "struct __dlmFlags" = NSDataLinkManager;
	};
	NSDataLinkPanel = {
	    "_accessoryView" = NSDataLinkPanel;
	    "_breakAllLinksButton" = NSDataLinkPanel;
	    "_breakLinkButton" = NSDataLinkPanel;
	    "_currentDataLink" = NSDataLinkPanel;
	    "_currentDataLinkManager" = NSDataLinkPanel;
	    "_lastUpdateField" = NSDataLinkPanel;
	    "_multipleSelection" = NSDataLinkPanel;
	    "_openSourceButton" = NSDataLinkPanel;
	    "_sourceField" = NSDataLinkPanel;
	    "_updateDestinationButton" = NSDataLinkPanel;
	    "_updateModeButton" = NSDataLinkPanel;
	};
	NSDatePickerCell = {
	    "_backgroundColor" = NSDatePickerCell;
	    "_datePickerElements" = NSDatePickerCell;
	    "_datePickerMode" = NSDatePickerCell;
	    "_datePickerStyle" = NSDatePickerCell;
	    "_delegate" = NSDatePickerCell;
	    "_drawsBackground" = NSDatePickerCell;
	    "_maxDate" = NSDatePickerCell;
	    "_minDate" = NSDatePickerCell;
	    "_textColor" = NSDatePickerCell;
	    "_timeInterval" = NSDatePickerCell;
	};
	NSDrawer = {
	    "_contentSize" = NSDrawer;
	    "_currentEdge" = NSDrawer;
	    "_delegate" = NSDrawer;
	    "_drawerWindow" = NSDrawer;
	    "_leadingOffset" = NSDrawer;
	    "_maxContentSize" = NSDrawer;
	    "_minContentSize" = NSDrawer;
	    "_preferredEdge" = NSDrawer;
	    "_state" = NSDrawer;
	    "_trailingOffset" = NSDrawer;
	};
	NSEPSImageRep = {
	    "_bounds" = NSEPSImageRep;
	    "_epsData" = NSEPSImageRep;
	    "_pageRep" = NSEPSImageRep;
	};
	NSEvent = {
	    "event_context" = NSEvent;
	    "event_time" = NSEvent;
	    "event_type" = NSEvent;
	    "location_point" = NSEvent;
	    "modifier_flags" = NSEvent;
	    "union _MB_event_data" = NSEvent;
	    "window_num" = NSEvent;
	};
	NSFont = {
	    "_fontRef" = NSFont;
	    cachedFlippedFont = NSFont;
	    cachedScreenFont = NSFont;
	    fontInfo = NSFont;
	    fontName = NSFont;
	    matrix = NSFont;
	    matrixExplicitlySet = NSFont;
	    role = NSFont;
	    screenFont = NSFont;
	};
	NSFontDescriptor = {
	    "_attributes" = NSFontDescriptor;
	};
	NSFontManager = {
	    "_action" = NSFontManager;
	    "_collections" = NSFontManager;
	    "_delegate" = NSFontManager;
	    "_fontEnumerator" = NSFontManager;
	    "_fontMenu" = NSFontManager;
	    "_multiple" = NSFontManager;
	    "_selectedAttributes" = NSFontManager;
	    "_selectedFont" = NSFontManager;
	    "_storedTag" = NSFontManager;
	    "_trait" = NSFontManager;
	};
	NSFontPanel = {
	    "_accessoryView" = NSFontPanel;
	    "_bottomView" = NSFontPanel;
	    "_face" = NSFontPanel;
	    "_faceList" = NSFontPanel;
	    "_family" = NSFontPanel;
	    "_familyList" = NSFontPanel;
	    "_multiple" = NSFontPanel;
	    "_originalMinSize" = NSFontPanel;
	    "_originalSize" = NSFontPanel;
	    "_panelFont" = NSFontPanel;
	    "_preview" = NSFontPanel;
	    "_previewString" = NSFontPanel;
	    "_topView" = NSFontPanel;
	    "_traits" = NSFontPanel;
	    "_weight" = NSFontPanel;
	};
	NSForm = {
	    "_title_width_needs_update" = NSForm;
	};
	NSFormCell = {
	    "_displayedTitleWidth" = NSFormCell;
	    "_placeholder" = NSFormCell;
	    "_titleCell" = NSFormCell;
	};
	NSGraphicsContext = {
	    "_antialias" = NSGraphicsContext;
	    "_compositingOperation" = NSGraphicsContext;
	    "_graphicsPort" = NSGraphicsContext;
	    "_interp" = NSGraphicsContext;
	    "_isFlipped" = NSGraphicsContext;
	    "_patternPhase" = NSGraphicsContext;
	    "_shadow" = NSGraphicsContext;
	    "context_data" = NSGraphicsContext;
	    "context_info" = NSGraphicsContext;
	    "focus_stack" = NSGraphicsContext;
	    methods = NSGraphicsContext;
	    usedFonts = NSGraphicsContext;
	};
	NSImage = {
	    "_cacheMode" = NSImage;
	    "_color" = NSImage;
	    "_delegate" = NSImage;
	    "_fileName" = NSImage;
	    "_lockedView" = NSImage;
	    "_name" = NSImage;
	    "_reps" = NSImage;
	    "_size" = NSImage;
	    "struct __imageFlags" = NSImage;
	};
	NSImageCell = {
	    "_frameStyle" = NSImageCell;
	    "_imageAlignment" = NSImageCell;
	    "_imageScaling" = NSImageCell;
	    "_original_image_size" = NSImageCell;
	};
	NSImageRep = {
	    "_bitsPerSample" = NSImageRep;
	    "_colorSpace" = NSImageRep;
	    "_hasAlpha" = NSImageRep;
	    "_isOpaque" = NSImageRep;
	    "_pixelsHigh" = NSImageRep;
	    "_pixelsWide" = NSImageRep;
	    "_size" = NSImageRep;
	};
	NSImageView = {
	    "_action" = NSImageView;
	    "_target" = NSImageView;
	    "struct GSImageViewFlagsType" = NSImageView;
	};
	NSMatrix = {
	    "_action" = NSMatrix;
	    "_allowsEmptySelection" = NSMatrix;
	    "_autoscroll" = NSMatrix;
	    "_autosizesCells" = NSMatrix;
	    "_backgroundColor" = NSMatrix;
	    "_cellBackgroundColor" = NSMatrix;
	    "_cellClass" = NSMatrix;
	    "_cellInit" = NSMatrix;
	    "_cellNew" = NSMatrix;
	    "_cellPrototype" = NSMatrix;
	    "_cellSize" = NSMatrix;
	    "_cells" = NSMatrix;
	    "_delegate" = NSMatrix;
	    "_dottedColumn" = NSMatrix;
	    "_dottedRow" = NSMatrix;
	    "_doubleAction" = NSMatrix;
	    "_drawsBackground" = NSMatrix;
	    "_drawsCellBackground" = NSMatrix;
	    "_errorAction" = NSMatrix;
	    "_intercell" = NSMatrix;
	    "_maxCols" = NSMatrix;
	    "_maxRows" = NSMatrix;
	    "_mode" = NSMatrix;
	    "_myZone" = NSMatrix;
	    "_numCols" = NSMatrix;
	    "_numRows" = NSMatrix;
	    "_reserved1" = NSMatrix;
	    "_selectedCell" = NSMatrix;
	    "_selectedCells" = NSMatrix;
	    "_selectedColumn" = NSMatrix;
	    "_selectedRow" = NSMatrix;
	    "_selectionByRect" = NSMatrix;
	    "_tabKeyTraversesCells" = NSMatrix;
	    "_target" = NSMatrix;
	    "_textObject" = NSMatrix;
	};
	NSMenu = {
	    "_aWindow" = NSMenu;
	    "_attachedMenu" = NSMenu;
	    "_bWindow" = NSMenu;
	    "_delegate" = NSMenu;
	    "_items" = NSMenu;
	    "_name" = NSMenu;
	    "_notifications" = NSMenu;
	    "_oldAttachedMenu" = NSMenu;
	    "_oldHiglightedIndex" = NSMenu;
	    "_popUpButtonCell" = NSMenu;
	    "_superMenu" = NSMenu;
	    "_title" = NSMenu;
	    "_view" = NSMenu;
	    "struct GSMenuFlags" = NSMenu;
	};
	NSMenuItem = {
	    "_action" = NSMenuItem;
	    "_changesState" = NSMenuItem;
	    "_enabled" = NSMenuItem;
	    "_image" = NSMenuItem;
	    "_indentation" = NSMenuItem;
	    "_isAlternate" = NSMenuItem;
	    "_keyEquivalent" = NSMenuItem;
	    "_keyEquivalentModifierMask" = NSMenuItem;
	    "_menu" = NSMenuItem;
	    "_mixedStateImage" = NSMenuItem;
	    "_mnemonicLocation" = NSMenuItem;
	    "_offStateImage" = NSMenuItem;
	    "_onStateImage" = NSMenuItem;
	    "_representedObject" = NSMenuItem;
	    "_state" = NSMenuItem;
	    "_submenu" = NSMenuItem;
	    "_tag" = NSMenuItem;
	    "_target" = NSMenuItem;
	    "_title" = NSMenuItem;
	    "_toolTip" = NSMenuItem;
	};
	NSMenuItemCell = {
	    "_imageSize" = NSMenuItemCell;
	    "_imageToDisplay" = NSMenuItemCell;
	    "_imageWidth" = NSMenuItemCell;
	    "_keyEquivalentWidth" = NSMenuItemCell;
	    "_mcell_belongs_to_popupbutton" = NSMenuItemCell;
	    "_menuItem" = NSMenuItemCell;
	    "_menuItemHeight" = NSMenuItemCell;
	    "_menuView" = NSMenuItemCell;
	    "_needs_display" = NSMenuItemCell;
	    "_needs_sizing" = NSMenuItemCell;
	    "_pad" = NSMenuItemCell;
	    "_stateImageWidth" = NSMenuItemCell;
	    "_titleToDisplay" = NSMenuItemCell;
	    "_titleWidth" = NSMenuItemCell;
	};
	NSMenuView = {
	    "_cellSize" = NSMenuView;
	    "_font" = NSMenuView;
	    "_highlightedItemIndex" = NSMenuView;
	    "_horizontal" = NSMenuView;
	    "_horizontalEdgePad" = NSMenuView;
	    "_imageAndTitleOffset" = NSMenuView;
	    "_imageAndTitleWidth" = NSMenuView;
	    "_itemCells" = NSMenuView;
	    "_keyEqOffset" = NSMenuView;
	    "_keyEqWidth" = NSMenuView;
	    "_needsSizing" = NSMenuView;
	    "_pad1" = NSMenuView;
	    "_pad2" = NSMenuView;
	    "_stateImageOffset" = NSMenuView;
	    "_stateImageWidth" = NSMenuView;
	};
	NSMovieView = {
	    "_movie" = NSMovieView;
	    "_rate" = NSMovieView;
	    "_volume" = NSMovieView;
	    "struct NSMovieViewFlags" = NSMovieView;
	};
	NSNib = {
	    "_bundle" = NSNib;
	    "_loader" = NSNib;
	    "_nibData" = NSNib;
	};
	NSObjectController = {
	    "_automatically_prepares_content" = NSObjectController;
	    "_content" = NSObjectController;
	    "_entity_name_key" = NSObjectController;
	    "_fetch_predicate" = NSObjectController;
	    "_is_editable" = NSObjectController;
	    "_is_using_managed_proxy" = NSObjectController;
	    "_managed_object_context" = NSObjectController;
	    "_managed_proxy" = NSObjectController;
	    "_object_class" = NSObjectController;
	    "_object_class_name" = NSObjectController;
	    "_selection" = NSObjectController;
	};
	NSOpenGLView = {
	    glcontext = NSOpenGLView;
	    "pixel_format" = NSOpenGLView;
	    prepared = NSOpenGLView;
	};
	NSOpenPanel = {
	    "_canChooseDirectories" = NSOpenPanel;
	    "_canChooseFiles" = NSOpenPanel;
	};
	NSOutlineView = {
	    "_autoResizesOutlineColumn" = NSOutlineView;
	    "_autosaveExpandedItems" = NSOutlineView;
	    "_expandedItems" = NSOutlineView;
	    "_indentationMarkerFollowsCell" = NSOutlineView;
	    "_indentationPerLevel" = NSOutlineView;
	    "_itemDict" = NSOutlineView;
	    "_items" = NSOutlineView;
	    "_levelOfItems" = NSOutlineView;
	    "_outlineTableColumn" = NSOutlineView;
	};
	NSPageLayout = {
	    "_controller" = NSPageLayout;
	};
	NSParagraphStyle = {
	    "_alignment" = NSParagraphStyle;
	    "_baseDirection" = NSParagraphStyle;
	    "_defaultTabInterval" = NSParagraphStyle;
	    "_firstLineHeadIndent" = NSParagraphStyle;
	    "_headIndent" = NSParagraphStyle;
	    "_headerLevel" = NSParagraphStyle;
	    "_hyphenationFactor" = NSParagraphStyle;
	    "_lineBreakMode" = NSParagraphStyle;
	    "_lineHeightMultiple" = NSParagraphStyle;
	    "_lineSpacing" = NSParagraphStyle;
	    "_maximumLineHeight" = NSParagraphStyle;
	    "_minimumLineHeight" = NSParagraphStyle;
	    "_paragraphSpacing" = NSParagraphStyle;
	    "_paragraphSpacingBefore" = NSParagraphStyle;
	    "_tabStops" = NSParagraphStyle;
	    "_tailIndent" = NSParagraphStyle;
	    "_textBlocks" = NSParagraphStyle;
	    "_textLists" = NSParagraphStyle;
	    "_tighteningFactorForTruncation" = NSParagraphStyle;
	};
	NSPasteboard = {
	    changeCount = NSPasteboard;
	    name = NSPasteboard;
	    owner = NSPasteboard;
	    target = NSPasteboard;
	    useHistory = NSPasteboard;
	};
	NSPasteboardItem = {
	    "_dataMap" = NSPasteboardItem;
	    "_providerMap" = NSPasteboardItem;
	    "_types" = NSPasteboardItem;
	};
	NSPopUpButtonCell = {
	    "_selectedItem" = NSPopUpButtonCell;
	    "struct __pbcFlags" = NSPopUpButtonCell;
	};
	NSPredicateEditor = {
	    "_rowTemplates" = NSPredicateEditor;
	};
	NSPrintInfo = {
	    "_info" = NSPrintInfo;
	};
	NSPrintOperation = {
	    "_accessory_view" = NSPrintOperation;
	    "_context" = NSPrintOperation;
	    "_currentPage" = NSPrintOperation;
	    "_data" = NSPrintOperation;
	    "_job_style_hint" = NSPrintOperation;
	    "_page_order" = NSPrintOperation;
	    "_path" = NSPrintOperation;
	    "_print_info" = NSPrintOperation;
	    "_print_panel" = NSPrintOperation;
	    "_rect" = NSPrintOperation;
	    "_view" = NSPrintOperation;
	    "struct __Flags" = NSPrintOperation;
	};
	NSPrintPanel = {
	    "_accessoryControllers" = NSPrintPanel;
	    "_accessoryView" = NSPrintPanel;
	    "_helpAnchor" = NSPrintPanel;
	    "_jobStyleHint" = NSPrintPanel;
	    "_optionPanel" = NSPrintPanel;
	    "_options" = NSPrintPanel;
	    "_pages" = NSPrintPanel;
	    "_panel" = NSPrintPanel;
	    "_picked" = NSPrintPanel;
	    "_printInfo" = NSPrintPanel;
	    "_savePath" = NSPrintPanel;
	};
	NSPrinter = {
	    "_printerHost" = NSPrinter;
	    "_printerName" = NSPrinter;
	    "_printerNote" = NSPrinter;
	    "_printerType" = NSPrinter;
	    "_tables" = NSPrinter;
	};
	NSProgressIndicator = {
	    "_animationDelay" = NSProgressIndicator;
	    "_controlSize" = NSProgressIndicator;
	    "_controlTint" = NSProgressIndicator;
	    "_doubleValue" = NSProgressIndicator;
	    "_isBezeled" = NSProgressIndicator;
	    "_isDisplayedWhenStopped" = NSProgressIndicator;
	    "_isIndeterminate" = NSProgressIndicator;
	    "_maxValue" = NSProgressIndicator;
	    "_minValue" = NSProgressIndicator;
	    "_style" = NSProgressIndicator;
	    "_usesThreadedAnimation" = NSProgressIndicator;
	};
	NSResponder = {
	    "_interface_style" = NSResponder;
	    "_next_responder" = NSResponder;
	};
	NSRuleEditor = {
	    "_action" = NSRuleEditor;
	    "_target" = NSRuleEditor;
	};
	NSRulerMarker = {
	    "_image" = NSRulerMarker;
	    "_imageOrigin" = NSRulerMarker;
	    "_isDragging" = NSRulerMarker;
	    "_isMovable" = NSRulerMarker;
	    "_isRemovable" = NSRulerMarker;
	    "_location" = NSRulerMarker;
	    "_representedObject" = NSRulerMarker;
	    "_rulerView" = NSRulerMarker;
	};
	NSSavePanel = {
	    "_OKButtonPressed" = NSSavePanel;
	    "_accessoryView" = NSSavePanel;
	    "_allowedFileTypes" = NSSavePanel;
	    "_allowsOtherFileTypes" = NSSavePanel;
	    "_bottomView" = NSSavePanel;
	    "_browser" = NSSavePanel;
	    "_canCreateDirectories" = NSSavePanel;
	    "_canSelectHiddenExtension" = NSSavePanel;
	    "_completionHandler" = NSSavePanel;
	    "_delegateHasCompareFilter" = NSSavePanel;
	    "_delegateHasDirectoryDidChange" = NSSavePanel;
	    "_delegateHasSelectionDidChange" = NSSavePanel;
	    "_delegateHasShowFilenameFilter" = NSSavePanel;
	    "_delegateHasUserEnteredFilename" = NSSavePanel;
	    "_delegateHasValidNameFilter" = NSSavePanel;
	    "_directory" = NSSavePanel;
	    "_form" = NSSavePanel;
	    "_fullFileName" = NSSavePanel;
	    "_isExtensionHidden" = NSSavePanel;
	    "_okButton" = NSSavePanel;
	    "_originalMinSize" = NSSavePanel;
	    "_originalSize" = NSSavePanel;
	    "_showsHiddenFiles" = NSSavePanel;
	    "_showsHiddenFilesMenu" = NSSavePanel;
	    "_titleField" = NSSavePanel;
	    "_topView" = NSSavePanel;
	    "_treatsFilePackagesAsDirectories" = NSSavePanel;
	};
	NSScrollView = {
	    "_autohidesScrollers" = NSScrollView;
	    "_borderType" = NSScrollView;
	    "_contentView" = NSScrollView;
	    "_cornerView" = NSScrollView;
	    "_hLineScroll" = NSScrollView;
	    "_hPageScroll" = NSScrollView;
	    "_hasCornerView" = NSScrollView;
	    "_hasHeaderView" = NSScrollView;
	    "_hasHorizRuler" = NSScrollView;
	    "_hasHorizScroller" = NSScrollView;
	    "_hasVertRuler" = NSScrollView;
	    "_hasVertScroller" = NSScrollView;
	    "_headerClipView" = NSScrollView;
	    "_horizRuler" = NSScrollView;
	    "_horizScrollElasticity" = NSScrollView;
	    "_horizScroller" = NSScrollView;
	    "_knobMoved" = NSScrollView;
	    "_rulersVisible" = NSScrollView;
	    "_scrollerKnobStyle" = NSScrollView;
	    "_scrollerStyle" = NSScrollView;
	    "_scrollsDynamically" = NSScrollView;
	    "_vLineScroll" = NSScrollView;
	    "_vPageScroll" = NSScrollView;
	    "_vertRuler" = NSScrollView;
	    "_vertScrollElasticity" = NSScrollView;
	    "_vertScroller" = NSScrollView;
	};
	NSScroller = {
	    "_action" = NSScroller;
	    "_arrowsPosition" = NSScroller;
	    "_doubleValue" = NSScroller;
	    "_hitPart" = NSScroller;
	    "_knobProportion" = NSScroller;
	    "_knobStyle" = NSScroller;
	    "_pendingKnobProportion" = NSScroller;
	    "_scrollerStyle" = NSScroller;
	    "_target" = NSScroller;
	    "_usableParts" = NSScroller;
	    "struct _scFlagsType" = NSScroller;
	};
	NSSecureTextFieldCell = {
	    "_echosBullets" = NSSecureTextField;
	};
	NSSliderCell = {
	    "_allowsTickMarkValuesOnly" = NSSliderCell;
	    "_altIncrementValue" = NSSliderCell;
	    "_isVertical" = NSSliderCell;
	    "_knobCell" = NSSliderCell;
	    "_maxValue" = NSSliderCell;
	    "_minValue" = NSSliderCell;
	    "_numberOfTickMarks" = NSSliderCell;
	    "_tickMarkPosition" = NSSliderCell;
	    "_titleCell" = NSSliderCell;
	    "_trackRect" = NSSliderCell;
	    "_type" = NSSliderCell;
	    "_value" = NSSliderCell;
	};
	NSSound = {
	    "_channelMapping" = NSSound;
	    "_data" = NSSound;
	    "_delegate" = NSSound;
	    "_name" = NSSound;
	    "_onlyReference" = NSSound;
	    "_playbackDeviceIdentifier" = NSSound;
	    "_playbackLock" = NSSound;
	    "_readLock" = NSSound;
	    "_shouldLoop" = NSSound;
	    "_shouldStop" = NSSound;
	    "_sink" = NSSound;
	    "_source" = NSSound;
	};
	NSSplitView = {
	    "_arrangesAllSubviews" = NSSplitView;
	    "_autosaveName" = NSSplitView;
	    "_backgroundColor" = NSSplitView;
	    "_delegate" = NSSplitView;
	    "_dimpleImage" = NSSplitView;
	    "_dividerColor" = NSSplitView;
	    "_dividerStyle" = NSSplitView;
	    "_dividerWidth" = NSSplitView;
	    "_draggedBarWidth" = NSSplitView;
	    "_isVertical" = NSSplitView;
	    "_is_pane_splitter" = NSSplitView;
	    "_never_displayed_before" = NSSplitView;
	};
	NSStepperCell = {
	    "_increment" = NSStepperCell;
	    "_maxValue" = NSStepperCell;
	    "_minValue" = NSStepperCell;
	    highlightDown = NSStepperCell;
	    highlightUp = NSStepperCell;
	};
	NSTabView = {
	    "_delegate" = NSTabView;
	    "_draws_background" = NSTabView;
	    "_font" = NSTabView;
	    "_items" = NSTabView;
	    "_original_nextKeyView" = NSTabView;
	    "_selected" = NSTabView;
	    "_selected_item" = NSTabView;
	    "_truncated_label" = NSTabView;
	    "_type" = NSTabView;
	};
	NSTabViewItem = {
	    "_color" = NSTabViewItem;
	    "_first_responder" = NSTabViewItem;
	    "_ident" = NSTabViewItem;
	    "_label" = NSTabViewItem;
	    "_rect" = NSTabViewItem;
	    "_state" = NSTabViewItem;
	    "_tabview" = NSTabViewItem;
	    "_toolTip" = NSTabViewItem;
	    "_view" = NSTabViewItem;
	    "_viewController" = NSTabViewItem;
	};
	NSTableColumn = {
	    "_dataCell" = NSTableColumn;
	    "_headerCell" = NSTableColumn;
	    "_headerToolTip" = NSTableColumn;
	    "_identifier" = NSTableColumn;
	    "_is_editable" = NSTableColumn;
	    "_is_hidden" = NSTableColumn;
	    "_is_resizable" = NSTableColumn;
	    "_max_width" = NSTableColumn;
	    "_min_width" = NSTableColumn;
	    "_prototypeCellViews" = NSTableColumn;
	    "_resizing_mask" = NSTableColumn;
	    "_sortDescriptorPrototype" = NSTableColumn;
	    "_tableView" = NSTableColumn;
	    "_width" = NSTableColumn;
	};
	NSTableHeaderView = {
	    "_resizedColumn" = NSTableHeaderView;
	    "_tableView" = NSTableHeaderView;
	};
	NSTableView = {
	    "_action" = NSTableView;
	    "_allowsColumnReordering" = NSTableView;
	    "_allowsColumnResizing" = NSTableView;
	    "_allowsColumnSelection" = NSTableView;
	    "_allowsEmptySelection" = NSTableView;
	    "_allowsMultipleSelection" = NSTableView;
	    "_autoresizesAllColumnsToFit" = NSTableView;
	    "_autosaveName" = NSTableView;
	    "_autosaveTableColumns" = NSTableView;
	    "_backgroundColor" = NSTableView;
	    "_beginEndUpdates" = NSTableView;
	    "_clickedColumn" = NSTableView;
	    "_clickedRow" = NSTableView;
	    "_columnOrigins" = NSTableView;
	    "_cornerView" = NSTableView;
	    "_dataSource" = NSTableView;
	    "_dataSource_editable" = NSTableView;
	    "_del_responds" = NSTableView;
	    "_delegate" = NSTableView;
	    "_doubleAction" = NSTableView;
	    "_draggingSourceOperationMaskForLocal" = NSTableView;
	    "_draggingSourceOperationMaskForRemote" = NSTableView;
	    "_drawsGrid" = NSTableView;
	    "_editedCell" = NSTableView;
	    "_editedColumn" = NSTableView;
	    "_editedRow" = NSTableView;
	    "_gridColor" = NSTableView;
	    "_headerView" = NSTableView;
	    "_highlightedTableColumn" = NSTableView;
	    "_intercellSpacing" = NSTableView;
	    "_isValidating" = NSTableView;
	    "_numberOfColumns" = NSTableView;
	    "_numberOfRows" = NSTableView;
	    "_pathsToViews" = NSTableView;
	    "_registeredNibs" = NSTableView;
	    "_registeredViews" = NSTableView;
	    "_renderedViewPaths" = NSTableView;
	    "_rowHeight" = NSTableView;
	    "_rowViews" = NSTableView;
	    "_selectedColumn" = NSTableView;
	    "_selectedColumns" = NSTableView;
	    "_selectedRow" = NSTableView;
	    "_selectedRows" = NSTableView;
	    "_selectingColumns" = NSTableView;
	    "_selectionHighlightStyle" = NSTableView;
	    "_sortDescriptors" = NSTableView;
	    "_superview_width" = NSTableView;
	    "_tableColumns" = NSTableView;
	    "_target" = NSTableView;
	    "_textObject" = NSTableView;
	    "_tilingDisabled" = NSTableView;
	    "_usesAlternatingRowBackgroundColors" = NSTableView;
	    "_verticalMotionDrag" = NSTableView;
	    "_viewBased" = NSTableView;
	};
	NSTextAttachment = {
	    "_cell" = NSTextAttachment;
	    "_fileWrapper" = NSTextAttachment;
	    "struct GSTextAttachmentFlagsType" = NSTextAttachment;
	};
	NSTextAttachmentCell = {
	    "_attachment" = NSTextAttachment;
	};
	NSTextContainer = {
	    "_containerRect" = NSTextContainer;
	    "_heightTracksTextView" = NSTextContainer;
	    "_layoutManager" = NSTextContainer;
	    "_lineFragmentPadding" = NSTextContainer;
	    "_observingFrameChanges" = NSTextContainer;
	    "_textView" = NSTextContainer;
	    "_widthTracksTextView" = NSTextContainer;
	};
	NSTextField = {
	    "_delegate" = NSTextField;
	    "_error_action" = NSTextField;
	    "_text_object" = NSTextField;
	};
	NSTextFieldCell = {
	    "_background_color" = NSTextFieldCell;
	    "_bezelStyle" = NSTextFieldCell;
	    "_placeholder" = NSTextFieldCell;
	    "_text_color" = NSTextFieldCell;
	};
	NSTextStorage = {
	    "_delegate" = NSTextStorage;
	    "_editCount" = NSTextStorage;
	    "_editedDelta" = NSTextStorage;
	    "_editedMask" = NSTextStorage;
	    "_editedRange" = NSTextStorage;
	    "_layoutManagers" = NSTextStorage;
	};
	NSTextTab = {
	    "_alignment" = NSParagraphStyle;
	    "_location" = NSParagraphStyle;
	    "_options" = NSParagraphStyle;
	    "_tabStopType" = NSParagraphStyle;
	};
	NSTextView = {
	    "_backgroundColor" = NSTextView;
	    "_currentInsertionPointMovementDirection" = NSTextView;
	    "_defaultParagraphStyle" = NSTextView;
	    "_delegate" = NSTextView;
	    "_dragTargetLocation" = NSTextView;
	    "_drawInsertionPointNow" = NSTextView;
	    "_insertionPointColor" = NSTextView;
	    "_insertionPointRect" = NSTextView;
	    "_insertionPointTimer" = NSTextView;
	    "_lastCheckedRect" = NSTextView;
	    "_layoutManager" = NSTextView;
	    "_linkTextAttributes" = NSTextView;
	    "_markedRange" = NSTextView;
	    "_markedTextAttributes" = NSTextView;
	    "_maxSize" = NSTextView;
	    "_minSize" = NSTextView;
	    "_notifObject" = NSTextView;
	    "_originalInsertionPointCharacterIndex" = NSTextView;
	    "_selectedTextAttributes" = NSTextView;
	    "_spellCheckerDocumentTag" = NSTextView;
	    "_textCheckingTimer" = NSTextView;
	    "_textContainer" = NSTextView;
	    "_textContainerInset" = NSTextView;
	    "_textContainerOrigin" = NSTextView;
	    "_textStorage" = NSTextView;
	    "_undoObject" = NSTextView;
	    "struct GSTextViewFlagsType" = NSTextView;
	};
	NSTokenFieldCell = {
	    completionDelay = NSTokenFieldCell;
	    tokenStyle = NSTokenFieldCell;
	    tokenizingCharacterSet = NSTokenFieldCell;
	};
	NSUserDefaultsController = {
	    "_applies_immediately" = NSUserDefaultsController;
	    "_defaults" = NSUserDefaultsController;
	    "_initial_values" = NSUserDefaultsController;
	    "_values" = NSUserDefaultsController;
	};
	NSView = {
	    "_allocate_gstate" = NSView;
	    "_alphaValue" = NSView;
	    "_appearance" = NSView;
	    "_autoresizes_subviews" = NSView;
	    "_autoresizingFrameError" = NSView;
	    "_autoresizingMask" = NSView;
	    "_bounds" = NSView;
	    "_boundsMatrix" = NSView;
	    "_compressionPriorities" = NSView;
	    "_contentCompressionResistancePriority" = NSView;
	    "_coordinates_valid" = NSView;
	    "_coreAnimationData" = NSView;
	    "_cursor_rects" = NSView;
	    "_focusRingType" = NSView;
	    "_frame" = NSView;
	    "_frameMatrix" = NSView;
	    "_gstate" = NSView;
	    "_huggingPriorities" = NSView;
	    "_identifier" = NSView;
	    "_in_live_resize" = NSView;
	    "_invalidRect" = NSView;
	    "_is_hidden" = NSView;
	    "_is_rotated_from_base" = NSView;
	    "_is_rotated_or_scaled_from_base" = NSView;
	    "_matrixFromWindow" = NSView;
	    "_matrixToWindow" = NSView;
	    "_needsLayout" = NSView;
	    "_needsUpdateConstraints" = NSView;
	    "_nextKeyView" = NSView;
	    "_post_bounds_changes" = NSView;
	    "_post_frame_changes" = NSView;
	    "_previousKeyView" = NSView;
	    "_renew_gstate" = NSView;
	    "_shadow" = NSView;
	    "_sub_views" = NSView;
	    "_super_view" = NSView;
	    "_tracking_rects" = NSView;
	    "_translatesAutoresizingMaskIntoConstraints" = NSView;
	    "_visibleRect" = NSView;
	    "_window" = NSView;
	    "struct _rFlagsType" = NSView;
	};
	NSWindow = {
	    "_alphaValue" = NSWindow;
	    "_attachedSheet" = NSWindow;
	    "_autosaveName" = NSWindow;
	    "_backgroundColor" = NSWindow;
	    "_backingType" = NSWindow;
	    "_cachedImage" = NSWindow;
	    "_cachedImageOrigin" = NSWindow;
	    "_children" = NSWindow;
	    "_contentView" = NSWindow;
	    "_context" = NSWindow;
	    "_counterpart" = NSWindow;
	    "_defaultButtonCell" = NSWindow;
	    "_delegate" = NSWindow;
	    "_depthLimit" = NSWindow;
	    "_disableFlushWindow" = NSWindow;
	    "_fieldEditor" = NSWindow;
	    "_firstResponder" = NSWindow;
	    "_frame" = NSWindow;
	    "_futureFirstResponder" = NSWindow;
	    "_gstate" = NSWindow;
	    "_increments" = NSWindow;
	    "_initialFirstResponder" = NSWindow;
	    "_lastDragOperationMask" = NSWindow;
	    "_lastDragView" = NSWindow;
	    "_lastLeftMouseDownView" = NSWindow;
	    "_lastOtherMouseDownView" = NSWindow;
	    "_lastPoint" = NSWindow;
	    "_lastRightMouseDownView" = NSWindow;
	    "_layoutEngine" = NSWindow;
	    "_maximumSize" = NSWindow;
	    "_miniaturizedImage" = NSWindow;
	    "_miniaturizedTitle" = NSWindow;
	    "_minimumSize" = NSWindow;
	    "_parent" = NSWindow;
	    "_rectNeedingFlush" = NSWindow;
	    "_rectsBeingDrawn" = NSWindow;
	    "_representedFilename" = NSWindow;
	    "_reserved_1" = NSWindow;
	    "_screen" = NSWindow;
	    "_styleMask" = NSWindow;
	    "_toolbar" = NSWindow;
	    "_windowController" = NSWindow;
	    "_windowLevel" = NSWindow;
	    "_windowNum" = NSWindow;
	    "_windowTitle" = NSWindow;
	    "_wv" = NSWindow;
	    "struct GSWindowFlagsType" = NSWindow;
	};
	NSWorkspace = {
	    "_fileSystemChanged" = NSWorkspace;
	    "_iconMap" = NSWorkspace;
	    "_launched" = NSWorkspace;
	    "_userDefaultsChanged" = NSWorkspace;
	    "_workspaceCenter" = NSWorkspace;
	};
    };
    ivariable = {
	"_OKButtonPressed" = {
	    NSSavePanel = NSSavePanel;
	};
	"_aWindow" = {
	    NSMenu = NSMenu;
	};
	"_acceptsAlphaNumericalKeys" = {
	    NSBrowser = NSBrowser;
	};
	"_acceptsArrowKeys" = {
	    NSBrowser = NSBrowser;
	};
	"_accessoryControllers" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_accessoryView" = {
	    NSColorPanel = NSColorPanel;
	    NSDataLinkPanel = NSDataLinkPanel;
	    NSFontPanel = NSFontPanel;
	    NSPrintPanel = NSPrintPanel;
	    NSSavePanel = NSSavePanel;
	};
	"_accessory_view" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"_action" = {
	    NSActionCell = NSActionCell;
	    NSBrowser = NSBrowser;
	    NSColorPanel = NSColorPanel;
	    NSColorWell = NSColorWell;
	    NSFontManager = NSFontManager;
	    NSImageView = NSImageView;
	    NSMatrix = NSMatrix;
	    NSMenuItem = NSMenuItem;
	    NSRuleEditor = NSRuleEditor;
	    NSScroller = NSScroller;
	    NSTableView = NSTableView;
	};
	"_action_mask" = {
	    NSCell = NSCell;
	};
	"_alignment" = {
	    NSParagraphStyle = NSParagraphStyle;
	    NSTextTab = NSParagraphStyle;
	};
	"_allocate_gstate" = {
	    NSView = NSView;
	};
	"_allowReload" = {
	    NSCollectionView = NSCollectionView;
	};
	"_allowedFileTypes" = {
	    NSSavePanel = NSSavePanel;
	};
	"_allowsBranchSelection" = {
	    NSBrowser = NSBrowser;
	};
	"_allowsColumnReordering" = {
	    NSTableView = NSTableView;
	};
	"_allowsColumnResizing" = {
	    NSTableView = NSTableView;
	};
	"_allowsColumnSelection" = {
	    NSTableView = NSTableView;
	};
	"_allowsEmptySelection" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"_allowsMultipleSelection" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSTableView = NSTableView;
	};
	"_allowsOtherFileTypes" = {
	    NSSavePanel = NSSavePanel;
	};
	"_allowsTickMarkValuesOnly" = {
	    NSSliderCell = NSSliderCell;
	};
	"_alphaNumericalLastColumn" = {
	    NSBrowser = NSBrowser;
	};
	"_alphaSlider" = {
	    NSColorPanel = NSColorPanel;
	};
	"_alphaValue" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"_altContents" = {
	    NSButtonCell = NSButtonCell;
	};
	"_altImage" = {
	    NSButtonCell = NSButtonCell;
	};
	"_altIncrementValue" = {
	    NSSliderCell = NSSliderCell;
	};
	"_alternateImage" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"_animationDelay" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_antialias" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"_app_icon" = {
	    NSApplication = NSApplication;
	};
	"_app_icon_window" = {
	    NSApplication = NSApplication;
	};
	"_app_is_active" = {
	    NSApplication = NSApplication;
	};
	"_app_is_hidden" = {
	    NSApplication = NSApplication;
	};
	"_app_is_launched" = {
	    NSApplication = NSApplication;
	};
	"_app_is_running" = {
	    NSApplication = NSApplication;
	};
	"_appearance" = {
	    NSApplication = NSApplication;
	    NSView = NSView;
	};
	"_applies_immediately" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"_arranged_objects" = {
	    NSArrayController = NSArrayController;
	};
	"_arrangesAllSubviews" = {
	    NSSplitView = NSSplitView;
	};
	"_arrowsPosition" = {
	    NSScroller = NSScroller;
	};
	"_attachedMenu" = {
	    NSMenu = NSMenu;
	};
	"_attachedSheet" = {
	    NSWindow = NSWindow;
	};
	"_attachment" = {
	    NSTextAttachmentCell = NSTextAttachment;
	};
	"_attributes" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"_autoResizesOutlineColumn" = {
	    NSOutlineView = NSOutlineView;
	};
	"_autohidesScrollers" = {
	    NSScrollView = NSScrollView;
	};
	"_automatically_prepares_content" = {
	    NSObjectController = NSObjectController;
	};
	"_autoresizesAllColumnsToFit" = {
	    NSTableView = NSTableView;
	};
	"_autoresizes_subviews" = {
	    NSView = NSView;
	};
	"_autoresizingFrameError" = {
	    NSView = NSView;
	};
	"_autoresizingMask" = {
	    NSView = NSView;
	};
	"_autosaveExpandedItems" = {
	    NSOutlineView = NSOutlineView;
	};
	"_autosaveName" = {
	    NSSplitView = NSSplitView;
	    NSTableView = NSTableView;
	    NSWindow = NSWindow;
	};
	"_autosaveTableColumns" = {
	    NSTableView = NSTableView;
	};
	"_autoscroll" = {
	    NSMatrix = NSMatrix;
	};
	"_autosizesCells" = {
	    NSMatrix = NSMatrix;
	};
	"_bWindow" = {
	    NSMenu = NSMenu;
	};
	"_backgroundColor" = {
	    NSButtonCell = NSButtonCell;
	    NSClipView = NSClipView;
	    NSDatePickerCell = NSDatePickerCell;
	    NSMatrix = NSMatrix;
	    NSSplitView = NSSplitView;
	    NSTableView = NSTableView;
	    NSTextView = NSTextView;
	    NSWindow = NSWindow;
	};
	"_backgroundColors" = {
	    NSCollectionView = NSCollectionView;
	};
	"_backgroundView" = {
	    NSCollectionView = NSCollectionView;
	};
	"_backgroundViewScrollsWithContent" = {
	    NSCollectionView = NSCollectionView;
	};
	"_background_color" = {
	    NSTextFieldCell = NSTextFieldCell;
	};
	"_backingType" = {
	    NSWindow = NSWindow;
	};
	"_baseDirection" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_beginEndUpdates" = {
	    NSTableView = NSTableView;
	};
	"_bezelStyle" = {
	    NSTextFieldCell = NSTextFieldCell;
	};
	"_bezel_style" = {
	    NSButtonCell = NSButtonCell;
	};
	"_bitsPerPixel" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_bitsPerSample" = {
	    NSImageRep = NSImageRep;
	};
	"_borderType" = {
	    NSScrollView = NSScrollView;
	};
	"_border_color" = {
	    NSBox = NSBox;
	};
	"_border_rect" = {
	    NSBox = NSBox;
	};
	"_border_type" = {
	    NSBox = NSBox;
	};
	"_border_width" = {
	    NSBox = NSBox;
	};
	"_bottomView" = {
	    NSFontPanel = NSFontPanel;
	    NSSavePanel = NSSavePanel;
	};
	"_bounds" = {
	    NSEPSImageRep = NSEPSImageRep;
	    NSView = NSView;
	};
	"_boundsMatrix" = {
	    NSView = NSView;
	};
	"_box_type" = {
	    NSBox = NSBox;
	};
	"_breakAllLinksButton" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_breakLinkButton" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_browser" = {
	    NSSavePanel = NSSavePanel;
	};
	"_browserCellPrototype" = {
	    NSBrowser = NSBrowser;
	};
	"_browserColumns" = {
	    NSBrowser = NSBrowser;
	};
	"_browserDelegate" = {
	    NSBrowser = NSBrowser;
	};
	"_browserMatrixClass" = {
	    NSBrowser = NSBrowser;
	};
	"_bundle" = {
	    NSNib = NSNib;
	};
	"_buttonCell" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_bytesPerRow" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_cacheMode" = {
	    NSImage = NSImage;
	};
	"_cachedImage" = {
	    NSWindow = NSWindow;
	};
	"_cachedImageOrigin" = {
	    NSWindow = NSWindow;
	};
	"_canChooseDirectories" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"_canChooseFiles" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"_canCreateDirectories" = {
	    NSSavePanel = NSSavePanel;
	};
	"_canSelectHiddenExtension" = {
	    NSSavePanel = NSSavePanel;
	};
	"_cell" = {
	    NSBox = NSBox;
	    NSControl = NSControl;
	    NSTextAttachment = NSTextAttachment;
	};
	"_cellBackgroundColor" = {
	    NSMatrix = NSMatrix;
	};
	"_cellClass" = {
	    NSMatrix = NSMatrix;
	};
	"_cellInit" = {
	    NSMatrix = NSMatrix;
	};
	"_cellNew" = {
	    NSMatrix = NSMatrix;
	};
	"_cellPrototype" = {
	    NSMatrix = NSMatrix;
	};
	"_cellSize" = {
	    NSMatrix = NSMatrix;
	    NSMenuView = NSMenuView;
	};
	"_cell_image" = {
	    NSCell = NSCell;
	};
	"_cells" = {
	    NSMatrix = NSMatrix;
	};
	"_changesState" = {
	    NSMenuItem = NSMenuItem;
	};
	"_channelMapping" = {
	    NSSound = NSSound;
	};
	"_charBuffer" = {
	    NSBrowser = NSBrowser;
	};
	"_children" = {
	    NSWindow = NSWindow;
	};
	"_cid" = {
	    NSCursor = NSCursor;
	};
	"_clickedColumn" = {
	    NSTableView = NSTableView;
	};
	"_clickedRow" = {
	    NSTableView = NSTableView;
	};
	"_collectionViewLayout" = {
	    NSCollectionView = NSCollectionView;
	};
	"_collections" = {
	    NSFontManager = NSFontManager;
	};
	"_color" = {
	    NSImage = NSImage;
	    NSTabViewItem = NSTabViewItem;
	};
	"_colorDictionary" = {
	    NSColorList = NSColorList;
	};
	"_colorPanel" = {
	    NSColorPicker = NSColorPicker;
	};
	"_colorSpace" = {
	    NSImageRep = NSImageRep;
	};
	"_colorWell" = {
	    NSColorPanel = NSColorPanel;
	};
	"_columnDictionary" = {
	    NSBrowser = NSBrowser;
	};
	"_columnOrigins" = {
	    NSTableView = NSTableView;
	};
	"_columnResizing" = {
	    NSBrowser = NSBrowser;
	};
	"_columnSize" = {
	    NSBrowser = NSBrowser;
	};
	"_columnsAutosaveName" = {
	    NSBrowser = NSBrowser;
	};
	"_comp_factor" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_completes" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_completionHandler" = {
	    NSSavePanel = NSSavePanel;
	};
	"_compositingOperation" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"_compression" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_compressionPriorities" = {
	    NSView = NSView;
	};
	"_containerRect" = {
	    NSTextContainer = NSTextContainer;
	};
	"_content" = {
	    NSCollectionView = NSCollectionView;
	    NSObjectController = NSObjectController;
	};
	"_contentCompressionResistancePriority" = {
	    NSView = NSView;
	};
	"_contentSize" = {
	    NSDrawer = NSDrawer;
	};
	"_contentView" = {
	    NSScrollView = NSScrollView;
	    NSWindow = NSWindow;
	};
	"_content_view" = {
	    NSBox = NSBox;
	};
	"_contents" = {
	    NSCell = NSCell;
	};
	"_context" = {
	    NSPrintOperation = NSPrintOperation;
	    NSWindow = NSWindow;
	};
	"_controlSize" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_controlTint" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_control_view" = {
	    NSActionCell = NSActionCell;
	};
	"_controller" = {
	    NSPageLayout = NSPageLayout;
	};
	"_coordinates_valid" = {
	    NSView = NSView;
	};
	"_copiesOnScroll" = {
	    NSClipView = NSClipView;
	};
	"_coreAnimationData" = {
	    NSView = NSView;
	};
	"_cornerView" = {
	    NSScrollView = NSScrollView;
	    NSTableView = NSTableView;
	};
	"_corner_radius" = {
	    NSBox = NSBox;
	};
	"_counterpart" = {
	    NSWindow = NSWindow;
	};
	"_currentDataLink" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_currentDataLinkManager" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_currentEdge" = {
	    NSDrawer = NSDrawer;
	};
	"_currentInsertionPointMovementDirection" = {
	    NSTextView = NSTextView;
	};
	"_currentPage" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"_currentPicker" = {
	    NSColorPanel = NSColorPanel;
	};
	"_current_event" = {
	    NSApplication = NSApplication;
	};
	"_cursor" = {
	    NSClipView = NSClipView;
	};
	"_cursor_image" = {
	    NSCursor = NSCursor;
	};
	"_cursor_rects" = {
	    NSView = NSView;
	};
	"_data" = {
	    NSPrintOperation = NSPrintOperation;
	    NSSound = NSSound;
	};
	"_dataCell" = {
	    NSTableColumn = NSTableColumn;
	};
	"_dataMap" = {
	    NSPasteboardItem = NSPasteboardItem;
	};
	"_dataSource" = {
	    NSCollectionView = NSCollectionView;
	    NSComboBoxCell = NSComboBoxCell;
	    NSTableView = NSTableView;
	};
	"_dataSource_editable" = {
	    NSTableView = NSTableView;
	};
	"_datePickerElements" = {
	    NSDatePickerCell = NSDatePickerCell;
	};
	"_datePickerMode" = {
	    NSDatePickerCell = NSDatePickerCell;
	};
	"_datePickerStyle" = {
	    NSDatePickerCell = NSDatePickerCell;
	};
	"_declared_keys" = {
	    NSController = NSController;
	};
	"_defaultButtonCell" = {
	    NSWindow = NSWindow;
	};
	"_defaultParagraphStyle" = {
	    NSTextView = NSTextView;
	};
	"_defaultTabInterval" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_default_context" = {
	    NSApplication = NSApplication;
	};
	"_defaults" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"_del_responds" = {
	    NSTableView = NSTableView;
	};
	"_delayInterval" = {
	    NSButtonCell = NSButtonCell;
	};
	"_delegate" = {
	    NSApplication = NSApplication;
	    NSCollectionView = NSCollectionView;
	    NSCustomImageRep = NSCustomImageRep;
	    NSDatePickerCell = NSDatePickerCell;
	    NSDrawer = NSDrawer;
	    NSFontManager = NSFontManager;
	    NSImage = NSImage;
	    NSMatrix = NSMatrix;
	    NSMenu = NSMenu;
	    NSSound = NSSound;
	    NSSplitView = NSSplitView;
	    NSTabView = NSTabView;
	    NSTableView = NSTableView;
	    NSTextField = NSTextField;
	    NSTextStorage = NSTextStorage;
	    NSTextView = NSTextView;
	    NSWindow = NSWindow;
	};
	"_delegateHasCompareFilter" = {
	    NSSavePanel = NSSavePanel;
	};
	"_delegateHasDirectoryDidChange" = {
	    NSSavePanel = NSSavePanel;
	};
	"_delegateHasSelectionDidChange" = {
	    NSSavePanel = NSSavePanel;
	};
	"_delegateHasShowFilenameFilter" = {
	    NSSavePanel = NSSavePanel;
	};
	"_delegateHasUserEnteredFilename" = {
	    NSSavePanel = NSSavePanel;
	};
	"_delegateHasValidNameFilter" = {
	    NSSavePanel = NSSavePanel;
	};
	"_depthLimit" = {
	    NSWindow = NSWindow;
	};
	"_dimpleImage" = {
	    NSSplitView = NSSplitView;
	};
	"_directory" = {
	    NSSavePanel = NSSavePanel;
	};
	"_disableFlushWindow" = {
	    NSWindow = NSWindow;
	};
	"_displayedTitleWidth" = {
	    NSFormCell = NSFormCell;
	};
	"_dividerColor" = {
	    NSSplitView = NSSplitView;
	};
	"_dividerStyle" = {
	    NSSplitView = NSSplitView;
	};
	"_dividerWidth" = {
	    NSSplitView = NSSplitView;
	};
	"_dock_tile" = {
	    NSApplication = NSApplication;
	};
	"_documentView" = {
	    NSClipView = NSClipView;
	};
	"_dottedColumn" = {
	    NSMatrix = NSMatrix;
	};
	"_dottedRow" = {
	    NSMatrix = NSMatrix;
	};
	"_doubleAction" = {
	    NSBrowser = NSBrowser;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"_doubleValue" = {
	    NSProgressIndicator = NSProgressIndicator;
	    NSScroller = NSScroller;
	};
	"_dragTargetLocation" = {
	    NSTextView = NSTextView;
	};
	"_draggedBarWidth" = {
	    NSSplitView = NSSplitView;
	};
	"_draggingOnIndex" = {
	    NSCollectionView = NSCollectionView;
	};
	"_draggingOnRow" = {
	    NSCollectionView = NSCollectionView;
	};
	"_draggingSourceOperationMaskForLocal" = {
	    NSCollectionView = NSCollectionView;
	    NSTableView = NSTableView;
	};
	"_draggingSourceOperationMaskForRemote" = {
	    NSCollectionView = NSCollectionView;
	    NSTableView = NSTableView;
	};
	"_drawInsertionPointNow" = {
	    NSTextView = NSTextView;
	};
	"_drawerWindow" = {
	    NSDrawer = NSDrawer;
	};
	"_drawsBackground" = {
	    NSClipView = NSClipView;
	    NSDatePickerCell = NSDatePickerCell;
	    NSMatrix = NSMatrix;
	};
	"_drawsCellBackground" = {
	    NSMatrix = NSMatrix;
	};
	"_drawsGrid" = {
	    NSTableView = NSTableView;
	};
	"_draws_background" = {
	    NSTabView = NSTabView;
	};
	"_echosBullets" = {
	    NSSecureTextFieldCell = NSSecureTextField;
	};
	"_editCount" = {
	    NSTextStorage = NSTextStorage;
	};
	"_editedCell" = {
	    NSTableView = NSTableView;
	};
	"_editedColumn" = {
	    NSTableView = NSTableView;
	};
	"_editedDelta" = {
	    NSTextStorage = NSTextStorage;
	};
	"_editedMask" = {
	    NSTextStorage = NSTextStorage;
	};
	"_editedRange" = {
	    NSTextStorage = NSTextStorage;
	};
	"_editedRow" = {
	    NSTableView = NSTableView;
	};
	"_editors" = {
	    NSController = NSController;
	};
	"_enabled" = {
	    NSMenuItem = NSMenuItem;
	};
	"_entity_name_key" = {
	    NSObjectController = NSObjectController;
	};
	"_epsData" = {
	    NSEPSImageRep = NSEPSImageRep;
	};
	"_errorAction" = {
	    NSMatrix = NSMatrix;
	};
	"_error_action" = {
	    NSTextField = NSTextField;
	};
	"_expandedItems" = {
	    NSOutlineView = NSOutlineView;
	};
	"_face" = {
	    NSFontPanel = NSFontPanel;
	};
	"_faceList" = {
	    NSFontPanel = NSFontPanel;
	};
	"_family" = {
	    NSFontPanel = NSFontPanel;
	};
	"_familyList" = {
	    NSFontPanel = NSFontPanel;
	};
	"_fetch_predicate" = {
	    NSObjectController = NSObjectController;
	};
	"_fieldEditor" = {
	    NSWindow = NSWindow;
	};
	"_fileName" = {
	    NSImage = NSImage;
	};
	"_fileSystemChanged" = {
	    NSWorkspace = NSWorkspace;
	};
	"_fileWrapper" = {
	    NSTextAttachment = NSTextAttachment;
	};
	"_fill_color" = {
	    NSBox = NSBox;
	};
	"_filter_predicate" = {
	    NSArrayController = NSArrayController;
	};
	"_firstLineHeadIndent" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_firstResponder" = {
	    NSWindow = NSWindow;
	};
	"_firstVisibleColumn" = {
	    NSBrowser = NSBrowser;
	};
	"_first_responder" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"_focusRingType" = {
	    NSView = NSView;
	};
	"_font" = {
	    NSCell = NSCell;
	    NSMenuView = NSMenuView;
	    NSTabView = NSTabView;
	};
	"_fontEnumerator" = {
	    NSFontManager = NSFontManager;
	};
	"_fontMenu" = {
	    NSFontManager = NSFontManager;
	};
	"_fontRef" = {
	    NSFont = NSFont;
	};
	"_form" = {
	    NSSavePanel = NSSavePanel;
	};
	"_format" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_formatter" = {
	    NSCell = NSCell;
	};
	"_frame" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"_frameMatrix" = {
	    NSView = NSView;
	};
	"_frameStyle" = {
	    NSImageCell = NSImageCell;
	};
	"_fullFileName" = {
	    NSColorList = NSColorList;
	    NSSavePanel = NSSavePanel;
	};
	"_futureFirstResponder" = {
	    NSWindow = NSWindow;
	};
	"_gradient_type" = {
	    NSButtonCell = NSButtonCell;
	};
	"_graphicsPort" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"_gridColor" = {
	    NSTableView = NSTableView;
	};
	"_gstate" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"_hLineScroll" = {
	    NSScrollView = NSScrollView;
	};
	"_hPageScroll" = {
	    NSScrollView = NSScrollView;
	};
	"_hasAlpha" = {
	    NSImageRep = NSImageRep;
	};
	"_hasCornerView" = {
	    NSScrollView = NSScrollView;
	};
	"_hasHeaderView" = {
	    NSScrollView = NSScrollView;
	};
	"_hasHorizRuler" = {
	    NSScrollView = NSScrollView;
	};
	"_hasHorizScroller" = {
	    NSScrollView = NSScrollView;
	};
	"_hasHorizontalScroller" = {
	    NSBrowser = NSBrowser;
	};
	"_hasVertRuler" = {
	    NSScrollView = NSScrollView;
	};
	"_hasVertScroller" = {
	    NSScrollView = NSScrollView;
	};
	"_hasVerticalScroller" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_headIndent" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_headerCell" = {
	    NSTableColumn = NSTableColumn;
	};
	"_headerClipView" = {
	    NSScrollView = NSScrollView;
	};
	"_headerLevel" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_headerToolTip" = {
	    NSTableColumn = NSTableColumn;
	};
	"_headerView" = {
	    NSTableView = NSTableView;
	};
	"_heightTracksTextView" = {
	    NSTextContainer = NSTextContainer;
	};
	"_helpAnchor" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_hidden" = {
	    NSApplication = NSApplication;
	};
	"_hidden_key" = {
	    NSApplication = NSApplication;
	};
	"_hidden_main" = {
	    NSApplication = NSApplication;
	};
	"_highlightedItemIndex" = {
	    NSMenuView = NSMenuView;
	};
	"_highlightedTableColumn" = {
	    NSTableView = NSTableView;
	};
	"_highlightsByMask" = {
	    NSButtonCell = NSButtonCell;
	};
	"_hitPart" = {
	    NSScroller = NSScroller;
	};
	"_horizRuler" = {
	    NSScrollView = NSScrollView;
	};
	"_horizScrollElasticity" = {
	    NSScrollView = NSScrollView;
	};
	"_horizScroller" = {
	    NSScrollView = NSScrollView;
	};
	"_horizontal" = {
	    NSMenuView = NSMenuView;
	};
	"_horizontalEdgePad" = {
	    NSMenuView = NSMenuView;
	};
	"_horizontalMargin" = {
	    NSCollectionView = NSCollectionView;
	};
	"_horizontalScroller" = {
	    NSBrowser = NSBrowser;
	};
	"_hot_spot" = {
	    NSCursor = NSCursor;
	};
	"_huggingPriorities" = {
	    NSView = NSView;
	};
	"_hyphenationFactor" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_iconMap" = {
	    NSWorkspace = NSWorkspace;
	};
	"_ident" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"_identifier" = {
	    NSTableColumn = NSTableColumn;
	    NSView = NSView;
	};
	"_ignoresMultiClick" = {
	    NSControl = NSControl;
	};
	"_image" = {
	    NSMenuItem = NSMenuItem;
	    NSRulerMarker = NSRulerMarker;
	};
	"_imageAlignment" = {
	    NSImageCell = NSImageCell;
	};
	"_imageAndTitleOffset" = {
	    NSMenuView = NSMenuView;
	};
	"_imageAndTitleWidth" = {
	    NSMenuView = NSMenuView;
	};
	"_imageData" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_imageOrigin" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"_imagePlanes" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_imageScaling" = {
	    NSButtonCell = NSButtonCell;
	    NSImageCell = NSImageCell;
	};
	"_imageSize" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_imageToDisplay" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_imageWidth" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_in_live_resize" = {
	    NSView = NSView;
	};
	"_inactive" = {
	    NSApplication = NSApplication;
	};
	"_increment" = {
	    NSStepperCell = NSStepperCell;
	};
	"_increments" = {
	    NSWindow = NSWindow;
	};
	"_indentation" = {
	    NSMenuItem = NSMenuItem;
	};
	"_indentationMarkerFollowsCell" = {
	    NSOutlineView = NSOutlineView;
	};
	"_indentationPerLevel" = {
	    NSOutlineView = NSOutlineView;
	};
	"_indexPathsForSupplementaryElementsOfKind" = {
	    NSCollectionView = NSCollectionView;
	};
	"_indexPathsToItems" = {
	    NSCollectionView = NSCollectionView;
	};
	"_info" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"_infoPanel" = {
	    NSApplication = NSApplication;
	};
	"_initialFirstResponder" = {
	    NSWindow = NSWindow;
	};
	"_initial_values" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"_insertionPointColor" = {
	    NSTextView = NSTextView;
	};
	"_insertionPointRect" = {
	    NSTextView = NSTextView;
	};
	"_insertionPointTimer" = {
	    NSTextView = NSTextView;
	};
	"_intercell" = {
	    NSMatrix = NSMatrix;
	};
	"_intercellSpacing" = {
	    NSComboBoxCell = NSComboBoxCell;
	    NSTableView = NSTableView;
	};
	"_interface_style" = {
	    NSResponder = NSResponder;
	};
	"_interp" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"_invalidRect" = {
	    NSView = NSView;
	};
	"_isAlternate" = {
	    NSMenuItem = NSMenuItem;
	};
	"_isBezeled" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_isContinuous" = {
	    NSColorPanel = NSColorPanel;
	};
	"_isDisplayedWhenStopped" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_isDragging" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"_isExtensionHidden" = {
	    NSSavePanel = NSSavePanel;
	};
	"_isFlipped" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"_isIndeterminate" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_isLoaded" = {
	    NSBrowser = NSBrowser;
	};
	"_isMovable" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"_isOpaque" = {
	    NSClipView = NSClipView;
	    NSImageRep = NSImageRep;
	};
	"_isPlanar" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_isRemovable" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"_isSelectable" = {
	    NSCollectionView = NSCollectionView;
	};
	"_isSelected" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"_isTitled" = {
	    NSBrowser = NSBrowser;
	};
	"_isValidating" = {
	    NSTableView = NSTableView;
	};
	"_isVertical" = {
	    NSSliderCell = NSSliderCell;
	    NSSplitView = NSSplitView;
	};
	"_is_active" = {
	    NSColorWell = NSColorWell;
	};
	"_is_bordered" = {
	    NSColorWell = NSColorWell;
	};
	"_is_editable" = {
	    NSColorList = NSColorList;
	    NSObjectController = NSObjectController;
	    NSTableColumn = NSTableColumn;
	};
	"_is_hidden" = {
	    NSTableColumn = NSTableColumn;
	    NSView = NSView;
	};
	"_is_pane_splitter" = {
	    NSSplitView = NSSplitView;
	};
	"_is_resizable" = {
	    NSTableColumn = NSTableColumn;
	};
	"_is_rotated_from_base" = {
	    NSView = NSView;
	};
	"_is_rotated_or_scaled_from_base" = {
	    NSView = NSView;
	};
	"_is_using_managed_proxy" = {
	    NSObjectController = NSObjectController;
	};
	"_itemBasedDelegate" = {
	    NSBrowser = NSBrowser;
	};
	"_itemCells" = {
	    NSMenuView = NSMenuView;
	};
	"_itemDict" = {
	    NSOutlineView = NSOutlineView;
	};
	"_itemHeight" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_itemSize" = {
	    NSCollectionView = NSCollectionView;
	};
	"_items" = {
	    NSCollectionView = NSCollectionView;
	    NSMenu = NSMenu;
	    NSOutlineView = NSOutlineView;
	    NSTabView = NSTabView;
	};
	"_itemsToAttributes" = {
	    NSCollectionView = NSCollectionView;
	};
	"_itemsToIndexPaths" = {
	    NSCollectionView = NSCollectionView;
	};
	"_jobStyleHint" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_job_style_hint" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"_keyEqOffset" = {
	    NSMenuView = NSMenuView;
	};
	"_keyEqWidth" = {
	    NSMenuView = NSMenuView;
	};
	"_keyEquivalent" = {
	    NSButtonCell = NSButtonCell;
	    NSMenuItem = NSMenuItem;
	};
	"_keyEquivalentFont" = {
	    NSButtonCell = NSButtonCell;
	};
	"_keyEquivalentModifierMask" = {
	    NSButtonCell = NSButtonCell;
	    NSMenuItem = NSMenuItem;
	};
	"_keyEquivalentWidth" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_key_window" = {
	    NSApplication = NSApplication;
	};
	"_knobCell" = {
	    NSSliderCell = NSSliderCell;
	};
	"_knobMoved" = {
	    NSScrollView = NSScrollView;
	};
	"_knobProportion" = {
	    NSScroller = NSScroller;
	};
	"_knobStyle" = {
	    NSScroller = NSScroller;
	};
	"_label" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"_lastCheckedRect" = {
	    NSTextView = NSTextView;
	};
	"_lastColumnLoaded" = {
	    NSBrowser = NSBrowser;
	};
	"_lastDragOperationMask" = {
	    NSWindow = NSWindow;
	};
	"_lastDragView" = {
	    NSWindow = NSWindow;
	};
	"_lastKeyPressed" = {
	    NSBrowser = NSBrowser;
	};
	"_lastLeftMouseDownView" = {
	    NSWindow = NSWindow;
	};
	"_lastOtherMouseDownView" = {
	    NSWindow = NSWindow;
	};
	"_lastPoint" = {
	    NSWindow = NSWindow;
	};
	"_lastRightMouseDownView" = {
	    NSWindow = NSWindow;
	};
	"_lastUpdateField" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_lastValidFrame" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_lastVisibleColumn" = {
	    NSBrowser = NSBrowser;
	};
	"_launched" = {
	    NSWorkspace = NSWorkspace;
	};
	"_layoutEngine" = {
	    NSWindow = NSWindow;
	};
	"_layoutManager" = {
	    NSTextContainer = NSTextContainer;
	    NSTextView = NSTextView;
	};
	"_layoutManagers" = {
	    NSTextStorage = NSTextStorage;
	};
	"_leadingOffset" = {
	    NSDrawer = NSDrawer;
	};
	"_levelOfItems" = {
	    NSOutlineView = NSOutlineView;
	};
	"_lineBreakMode" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_lineFragmentPadding" = {
	    NSTextContainer = NSTextContainer;
	};
	"_lineHeightMultiple" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_lineSpacing" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_linkTextAttributes" = {
	    NSTextView = NSTextView;
	};
	"_listener" = {
	    NSApplication = NSApplication;
	};
	"_loader" = {
	    NSNib = NSNib;
	};
	"_location" = {
	    NSRulerMarker = NSRulerMarker;
	    NSTextTab = NSParagraphStyle;
	};
	"_lockedView" = {
	    NSImage = NSImage;
	};
	"_magnifyButton" = {
	    NSColorPanel = NSColorPanel;
	};
	"_main_menu" = {
	    NSApplication = NSApplication;
	};
	"_main_window" = {
	    NSApplication = NSApplication;
	};
	"_managed_object_context" = {
	    NSObjectController = NSObjectController;
	};
	"_managed_proxy" = {
	    NSObjectController = NSObjectController;
	};
	"_markedRange" = {
	    NSTextView = NSTextView;
	};
	"_markedTextAttributes" = {
	    NSTextView = NSTextView;
	};
	"_matrixFromWindow" = {
	    NSView = NSView;
	};
	"_matrixToWindow" = {
	    NSView = NSView;
	};
	"_maxCols" = {
	    NSMatrix = NSMatrix;
	};
	"_maxContentSize" = {
	    NSDrawer = NSDrawer;
	};
	"_maxDate" = {
	    NSDatePickerCell = NSDatePickerCell;
	};
	"_maxItemSize" = {
	    NSCollectionView = NSCollectionView;
	};
	"_maxNumberOfColumns" = {
	    NSCollectionView = NSCollectionView;
	};
	"_maxNumberOfRows" = {
	    NSCollectionView = NSCollectionView;
	};
	"_maxRows" = {
	    NSMatrix = NSMatrix;
	};
	"_maxSize" = {
	    NSTextView = NSTextView;
	};
	"_maxValue" = {
	    NSProgressIndicator = NSProgressIndicator;
	    NSSliderCell = NSSliderCell;
	    NSStepperCell = NSStepperCell;
	};
	"_maxVisibleColumns" = {
	    NSBrowser = NSBrowser;
	};
	"_max_width" = {
	    NSTableColumn = NSTableColumn;
	};
	"_maximumLineHeight" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_maximumSize" = {
	    NSWindow = NSWindow;
	};
	"_mcell_belongs_to_popupbutton" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_menu" = {
	    NSCell = NSCell;
	    NSMenuItem = NSMenuItem;
	};
	"_menuItem" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_menuItemHeight" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_menuView" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_minColumnWidth" = {
	    NSBrowser = NSBrowser;
	};
	"_minContentSize" = {
	    NSDrawer = NSDrawer;
	};
	"_minDate" = {
	    NSDatePickerCell = NSDatePickerCell;
	};
	"_minItemSize" = {
	    NSCollectionView = NSCollectionView;
	};
	"_minSize" = {
	    NSTextView = NSTextView;
	};
	"_minValue" = {
	    NSProgressIndicator = NSProgressIndicator;
	    NSSliderCell = NSSliderCell;
	    NSStepperCell = NSStepperCell;
	};
	"_min_width" = {
	    NSTableColumn = NSTableColumn;
	};
	"_miniaturizedImage" = {
	    NSWindow = NSWindow;
	};
	"_miniaturizedTitle" = {
	    NSWindow = NSWindow;
	};
	"_minimumLineHeight" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_minimumSize" = {
	    NSWindow = NSWindow;
	};
	"_mixedStateImage" = {
	    NSMenuItem = NSMenuItem;
	};
	"_mnemonicLocation" = {
	    NSMenuItem = NSMenuItem;
	};
	"_mode" = {
	    NSMatrix = NSMatrix;
	};
	"_mouseDownPoint" = {
	    NSColorWell = NSColorWell;
	};
	"_mouse_down_flags" = {
	    NSCell = NSCell;
	};
	"_movie" = {
	    NSMovieView = NSMovieView;
	};
	"_multiple" = {
	    NSFontManager = NSFontManager;
	    NSFontPanel = NSFontPanel;
	};
	"_multipleSelection" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_myZone" = {
	    NSMatrix = NSMatrix;
	};
	"_name" = {
	    NSColorList = NSColorList;
	    NSImage = NSImage;
	    NSMenu = NSMenu;
	    NSSound = NSSound;
	};
	"_needsLayout" = {
	    NSView = NSView;
	};
	"_needsSizing" = {
	    NSMenuView = NSMenuView;
	};
	"_needsUpdateConstraints" = {
	    NSView = NSView;
	};
	"_needs_display" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_needs_sizing" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_never_displayed_before" = {
	    NSSplitView = NSSplitView;
	};
	"_nextKeyView" = {
	    NSView = NSView;
	};
	"_next_responder" = {
	    NSResponder = NSResponder;
	};
	"_nibData" = {
	    NSNib = NSNib;
	};
	"_notifObject" = {
	    NSTextView = NSTextView;
	};
	"_notifications" = {
	    NSMenu = NSMenu;
	};
	"_numColors" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_numCols" = {
	    NSMatrix = NSMatrix;
	};
	"_numRows" = {
	    NSMatrix = NSMatrix;
	};
	"_numberOfColumns" = {
	    NSCollectionView = NSCollectionView;
	    NSTableView = NSTableView;
	};
	"_numberOfRows" = {
	    NSTableView = NSTableView;
	};
	"_numberOfTickMarks" = {
	    NSSliderCell = NSSliderCell;
	};
	"_object_class" = {
	    NSObjectController = NSObjectController;
	};
	"_object_class_name" = {
	    NSObjectController = NSObjectController;
	};
	"_object_value" = {
	    NSCell = NSCell;
	};
	"_observingFrameChanges" = {
	    NSTextContainer = NSTextContainer;
	};
	"_offStateImage" = {
	    NSMenuItem = NSMenuItem;
	};
	"_offsets" = {
	    NSBox = NSBox;
	};
	"_okButton" = {
	    NSSavePanel = NSSavePanel;
	};
	"_oldAttachedMenu" = {
	    NSMenu = NSMenu;
	};
	"_oldHiglightedIndex" = {
	    NSMenu = NSMenu;
	};
	"_onStateImage" = {
	    NSMenuItem = NSMenuItem;
	};
	"_onlyReference" = {
	    NSSound = NSSound;
	};
	"_openSourceButton" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_optionPanel" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_options" = {
	    NSPrintPanel = NSPrintPanel;
	    NSTextTab = NSParagraphStyle;
	};
	"_orderedColorKeys" = {
	    NSColorList = NSColorList;
	};
	"_originalInsertionPointCharacterIndex" = {
	    NSTextView = NSTextView;
	};
	"_originalMinSize" = {
	    NSFontPanel = NSFontPanel;
	    NSSavePanel = NSSavePanel;
	};
	"_originalSize" = {
	    NSFontPanel = NSFontPanel;
	    NSSavePanel = NSSavePanel;
	};
	"_original_image_size" = {
	    NSImageCell = NSImageCell;
	};
	"_original_nextKeyView" = {
	    NSTabView = NSTabView;
	};
	"_outlineTableColumn" = {
	    NSOutlineView = NSOutlineView;
	};
	"_pad" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_pad1" = {
	    NSMenuView = NSMenuView;
	};
	"_pad2" = {
	    NSMenuView = NSMenuView;
	};
	"_pageRep" = {
	    NSEPSImageRep = NSEPSImageRep;
	};
	"_page_order" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"_pages" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_panel" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_panelFont" = {
	    NSFontPanel = NSFontPanel;
	};
	"_paragraphSpacing" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_paragraphSpacingBefore" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_parent" = {
	    NSWindow = NSWindow;
	};
	"_passiveDelegate" = {
	    NSBrowser = NSBrowser;
	};
	"_path" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"_pathSeparator" = {
	    NSBrowser = NSBrowser;
	};
	"_pathsToViews" = {
	    NSTableView = NSTableView;
	};
	"_patternPhase" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"_pendingKnobProportion" = {
	    NSScroller = NSScroller;
	};
	"_picked" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_pickerBox" = {
	    NSColorPanel = NSColorPanel;
	};
	"_pickerMatrix" = {
	    NSColorPanel = NSColorPanel;
	};
	"_pickers" = {
	    NSColorPanel = NSColorPanel;
	};
	"_pixelsHigh" = {
	    NSImageRep = NSImageRep;
	};
	"_pixelsWide" = {
	    NSImageRep = NSImageRep;
	};
	"_placeholder" = {
	    NSFormCell = NSFormCell;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"_playbackDeviceIdentifier" = {
	    NSSound = NSSound;
	};
	"_playbackLock" = {
	    NSSound = NSSound;
	};
	"_popUpButtonCell" = {
	    NSMenu = NSMenu;
	};
	"_popUpList" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_post_bounds_changes" = {
	    NSView = NSView;
	};
	"_post_frame_changes" = {
	    NSView = NSView;
	};
	"_preferredEdge" = {
	    NSDrawer = NSDrawer;
	};
	"_prefersAllColumnUserResizing" = {
	    NSBrowser = NSBrowser;
	};
	"_prefetchDataSource" = {
	    NSCollectionView = NSCollectionView;
	};
	"_presentationOptions" = {
	    NSApplication = NSApplication;
	};
	"_prevSelectedRange" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_preview" = {
	    NSFontPanel = NSFontPanel;
	};
	"_previewString" = {
	    NSFontPanel = NSFontPanel;
	};
	"_previousKeyView" = {
	    NSView = NSView;
	};
	"_printInfo" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_print_info" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"_print_panel" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"_printerHost" = {
	    NSPrinter = NSPrinter;
	};
	"_printerName" = {
	    NSPrinter = NSPrinter;
	};
	"_printerNote" = {
	    NSPrinter = NSPrinter;
	};
	"_printerType" = {
	    NSPrinter = NSPrinter;
	};
	"_properties" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"_prototypeCellViews" = {
	    NSTableColumn = NSTableColumn;
	};
	"_providerMap" = {
	    NSPasteboardItem = NSPasteboardItem;
	};
	"_rate" = {
	    NSMovieView = NSMovieView;
	};
	"_readLock" = {
	    NSSound = NSSound;
	};
	"_rect" = {
	    NSCachedImageRep = NSCachedImageRep;
	    NSPrintOperation = NSPrintOperation;
	    NSTabViewItem = NSTabViewItem;
	};
	"_rectNeedingFlush" = {
	    NSWindow = NSWindow;
	};
	"_rectsBeingDrawn" = {
	    NSWindow = NSWindow;
	};
	"_registeredClasses" = {
	    NSCollectionView = NSCollectionView;
	};
	"_registeredNibs" = {
	    NSCollectionView = NSCollectionView;
	    NSTableView = NSTableView;
	};
	"_registeredViews" = {
	    NSTableView = NSTableView;
	};
	"_renderedViewPaths" = {
	    NSTableView = NSTableView;
	};
	"_renew_gstate" = {
	    NSView = NSView;
	};
	"_repeatInterval" = {
	    NSButtonCell = NSButtonCell;
	};
	"_representedFilename" = {
	    NSWindow = NSWindow;
	};
	"_representedObject" = {
	    NSMenuItem = NSMenuItem;
	    NSRulerMarker = NSRulerMarker;
	};
	"_represented_object" = {
	    NSCell = NSCell;
	};
	"_reps" = {
	    NSImage = NSImage;
	};
	"_reserved1" = {
	    NSCell = NSCell;
	    NSMatrix = NSMatrix;
	};
	"_reserved_1" = {
	    NSWindow = NSWindow;
	};
	"_resizedColumn" = {
	    NSTableHeaderView = NSTableHeaderView;
	};
	"_resizing_mask" = {
	    NSTableColumn = NSTableColumn;
	};
	"_reusesColumns" = {
	    NSBrowser = NSBrowser;
	};
	"_rowHeight" = {
	    NSTableView = NSTableView;
	};
	"_rowTemplates" = {
	    NSPredicateEditor = NSPredicateEditor;
	};
	"_rowViews" = {
	    NSTableView = NSTableView;
	};
	"_rulerView" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"_rulersVisible" = {
	    NSScrollView = NSScrollView;
	};
	"_runLoopPool" = {
	    NSApplication = NSApplication;
	};
	"_savePath" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"_screen" = {
	    NSWindow = NSWindow;
	};
	"_scrollerKnobStyle" = {
	    NSScrollView = NSScrollView;
	};
	"_scrollerRect" = {
	    NSBrowser = NSBrowser;
	};
	"_scrollerStyle" = {
	    NSScrollView = NSScrollView;
	    NSScroller = NSScroller;
	};
	"_scrollsDynamically" = {
	    NSScrollView = NSScrollView;
	};
	"_selected" = {
	    NSTabView = NSTabView;
	};
	"_selectedAttributes" = {
	    NSFontManager = NSFontManager;
	};
	"_selectedCell" = {
	    NSMatrix = NSMatrix;
	};
	"_selectedCells" = {
	    NSMatrix = NSMatrix;
	};
	"_selectedColumn" = {
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"_selectedColumns" = {
	    NSTableView = NSTableView;
	};
	"_selectedFont" = {
	    NSFontManager = NSFontManager;
	};
	"_selectedItem" = {
	    NSComboBoxCell = NSComboBoxCell;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"_selectedRow" = {
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"_selectedRows" = {
	    NSTableView = NSTableView;
	};
	"_selectedTextAttributes" = {
	    NSTextView = NSTextView;
	};
	"_selected_item" = {
	    NSTabView = NSTabView;
	};
	"_selectingColumns" = {
	    NSTableView = NSTableView;
	};
	"_selection" = {
	    NSObjectController = NSObjectController;
	};
	"_selectionByRect" = {
	    NSMatrix = NSMatrix;
	};
	"_selectionHighlightStyle" = {
	    NSTableView = NSTableView;
	};
	"_selectionIndexPaths" = {
	    NSCollectionView = NSCollectionView;
	};
	"_selectionIndexes" = {
	    NSCollectionView = NSCollectionView;
	};
	"_selection_indexes" = {
	    NSArrayController = NSArrayController;
	};
	"_selector" = {
	    NSCustomImageRep = NSCustomImageRep;
	};
	"_sendsActionOnAlphaNumericalKeys" = {
	    NSBrowser = NSBrowser;
	};
	"_sendsActionOnArrowKeys" = {
	    NSBrowser = NSBrowser;
	};
	"_separatesColumns" = {
	    NSBrowser = NSBrowser;
	};
	"_session" = {
	    NSApplication = NSApplication;
	};
	"_shadow" = {
	    NSGraphicsContext = NSGraphicsContext;
	    NSView = NSView;
	};
	"_shouldLoop" = {
	    NSSound = NSSound;
	};
	"_shouldStop" = {
	    NSSound = NSSound;
	};
	"_showAltStateMask" = {
	    NSButtonCell = NSButtonCell;
	};
	"_showsAlpha" = {
	    NSColorPanel = NSColorPanel;
	};
	"_showsHiddenFiles" = {
	    NSSavePanel = NSSavePanel;
	};
	"_showsHiddenFilesMenu" = {
	    NSSavePanel = NSSavePanel;
	};
	"_sink" = {
	    NSSound = NSSound;
	};
	"_size" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"_skipUpdateScroller" = {
	    NSBrowser = NSBrowser;
	};
	"_sortDescriptorPrototype" = {
	    NSTableColumn = NSTableColumn;
	};
	"_sortDescriptors" = {
	    NSTableView = NSTableView;
	};
	"_sort_descriptors" = {
	    NSArrayController = NSArrayController;
	};
	"_sound" = {
	    NSButtonCell = NSButtonCell;
	};
	"_source" = {
	    NSSound = NSSound;
	};
	"_sourceField" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_spellCheckerDocumentTag" = {
	    NSTextView = NSTextView;
	};
	"_splitView" = {
	    NSColorPanel = NSColorPanel;
	};
	"_state" = {
	    NSDrawer = NSDrawer;
	    NSMenuItem = NSMenuItem;
	    NSTabViewItem = NSTabViewItem;
	};
	"_stateImageOffset" = {
	    NSMenuView = NSMenuView;
	};
	"_stateImageWidth" = {
	    NSMenuItemCell = NSMenuItemCell;
	    NSMenuView = NSMenuView;
	};
	"_storedTag" = {
	    NSFontManager = NSFontManager;
	};
	"_style" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_styleMask" = {
	    NSWindow = NSWindow;
	};
	"_sub_views" = {
	    NSView = NSView;
	};
	"_submenu" = {
	    NSMenuItem = NSMenuItem;
	};
	"_superMenu" = {
	    NSMenu = NSMenu;
	};
	"_super_view" = {
	    NSView = NSView;
	};
	"_superview_width" = {
	    NSTableView = NSTableView;
	};
	"_tabKeyTraversesCells" = {
	    NSMatrix = NSMatrix;
	};
	"_tabStopType" = {
	    NSTextTab = NSParagraphStyle;
	};
	"_tabStops" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_tableColumns" = {
	    NSTableView = NSTableView;
	};
	"_tableView" = {
	    NSTableColumn = NSTableColumn;
	    NSTableHeaderView = NSTableHeaderView;
	};
	"_tables" = {
	    NSPrinter = NSPrinter;
	};
	"_tabview" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"_tag" = {
	    NSActionCell = NSActionCell;
	    NSControl = NSControl;
	    NSMenuItem = NSMenuItem;
	};
	"_tailIndent" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_takesTitleFromPreviousColumn" = {
	    NSBrowser = NSBrowser;
	};
	"_target" = {
	    NSActionCell = NSActionCell;
	    NSBrowser = NSBrowser;
	    NSColorPanel = NSColorPanel;
	    NSColorWell = NSColorWell;
	    NSImageView = NSImageView;
	    NSMatrix = NSMatrix;
	    NSMenuItem = NSMenuItem;
	    NSRuleEditor = NSRuleEditor;
	    NSScroller = NSScroller;
	    NSTableView = NSTableView;
	};
	"_textBlocks" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_textCheckingTimer" = {
	    NSTextView = NSTextView;
	};
	"_textColor" = {
	    NSDatePickerCell = NSDatePickerCell;
	};
	"_textContainer" = {
	    NSTextView = NSTextView;
	};
	"_textContainerInset" = {
	    NSTextView = NSTextView;
	};
	"_textContainerOrigin" = {
	    NSTextView = NSTextView;
	};
	"_textLists" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_textObject" = {
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"_textStorage" = {
	    NSTextView = NSTextView;
	};
	"_textView" = {
	    NSTextContainer = NSTextContainer;
	};
	"_text_color" = {
	    NSTextFieldCell = NSTextFieldCell;
	};
	"_text_object" = {
	    NSTextField = NSTextField;
	};
	"_the_color" = {
	    NSColorWell = NSColorWell;
	};
	"_tickMarkPosition" = {
	    NSSliderCell = NSSliderCell;
	};
	"_tighteningFactorForTruncation" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"_tileWidth" = {
	    NSCollectionView = NSCollectionView;
	};
	"_tilingDisabled" = {
	    NSTableView = NSTableView;
	};
	"_timeInterval" = {
	    NSDatePickerCell = NSDatePickerCell;
	};
	"_title" = {
	    NSMenu = NSMenu;
	    NSMenuItem = NSMenuItem;
	};
	"_titleCell" = {
	    NSFormCell = NSFormCell;
	    NSSliderCell = NSSliderCell;
	};
	"_titleField" = {
	    NSSavePanel = NSSavePanel;
	};
	"_titleToDisplay" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_titleWidth" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"_title_position" = {
	    NSBox = NSBox;
	};
	"_title_rect" = {
	    NSBox = NSBox;
	};
	"_title_width_needs_update" = {
	    NSForm = NSForm;
	};
	"_toolTip" = {
	    NSMenuItem = NSMenuItem;
	    NSTabViewItem = NSTabViewItem;
	};
	"_toolbar" = {
	    NSWindow = NSWindow;
	};
	"_topView" = {
	    NSColorPanel = NSColorPanel;
	    NSFontPanel = NSFontPanel;
	    NSSavePanel = NSSavePanel;
	};
	"_trackRect" = {
	    NSSliderCell = NSSliderCell;
	};
	"_tracking_rects" = {
	    NSView = NSView;
	};
	"_trailingOffset" = {
	    NSDrawer = NSDrawer;
	};
	"_trait" = {
	    NSFontManager = NSFontManager;
	};
	"_traits" = {
	    NSFontPanel = NSFontPanel;
	};
	"_translatesAutoresizingMaskIntoConstraints" = {
	    NSView = NSView;
	};
	"_transparent" = {
	    NSBox = NSBox;
	};
	"_treatsFilePackagesAsDirectories" = {
	    NSSavePanel = NSSavePanel;
	};
	"_truncated_label" = {
	    NSTabView = NSTabView;
	};
	"_type" = {
	    NSSliderCell = NSSliderCell;
	    NSTabView = NSTabView;
	};
	"_types" = {
	    NSPasteboardItem = NSPasteboardItem;
	};
	"_undoObject" = {
	    NSTextView = NSTextView;
	};
	"_unhide_on_activation" = {
	    NSApplication = NSApplication;
	};
	"_updateDestinationButton" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_updateModeButton" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"_usableParts" = {
	    NSScroller = NSScroller;
	};
	"_userDefaultsChanged" = {
	    NSWorkspace = NSWorkspace;
	};
	"_usesAlternatingRowBackgroundColors" = {
	    NSTableView = NSTableView;
	};
	"_usesDataSource" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_usesThreadedAnimation" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"_vLineScroll" = {
	    NSScrollView = NSScrollView;
	};
	"_vPageScroll" = {
	    NSScrollView = NSScrollView;
	};
	"_value" = {
	    NSSliderCell = NSSliderCell;
	};
	"_values" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"_vertRuler" = {
	    NSScrollView = NSScrollView;
	};
	"_vertScrollElasticity" = {
	    NSScrollView = NSScrollView;
	};
	"_vertScroller" = {
	    NSScrollView = NSScrollView;
	};
	"_verticalMargin" = {
	    NSCollectionView = NSCollectionView;
	};
	"_verticalMotionDrag" = {
	    NSTableView = NSTableView;
	};
	"_view" = {
	    NSMenu = NSMenu;
	    NSPrintOperation = NSPrintOperation;
	    NSTabViewItem = NSTabViewItem;
	};
	"_viewBased" = {
	    NSTableView = NSTableView;
	};
	"_viewController" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"_visibleItems" = {
	    NSCollectionView = NSCollectionView;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"_visibleRect" = {
	    NSView = NSView;
	};
	"_visibleSupplementaryViews" = {
	    NSCollectionView = NSCollectionView;
	};
	"_volume" = {
	    NSMovieView = NSMovieView;
	};
	"_weight" = {
	    NSFontPanel = NSFontPanel;
	};
	"_wellRect" = {
	    NSColorWell = NSColorWell;
	};
	"_width" = {
	    NSTableColumn = NSTableColumn;
	};
	"_widthTracksTextView" = {
	    NSTextContainer = NSTextContainer;
	};
	"_window" = {
	    NSCachedImageRep = NSCachedImageRep;
	    NSView = NSView;
	};
	"_windowController" = {
	    NSWindow = NSWindow;
	};
	"_windowLevel" = {
	    NSWindow = NSWindow;
	};
	"_windowNum" = {
	    NSWindow = NSWindow;
	};
	"_windowTitle" = {
	    NSWindow = NSWindow;
	};
	"_windows_menu" = {
	    NSApplication = NSApplication;
	};
	"_windows_need_update" = {
	    NSApplication = NSApplication;
	};
	"_workspaceCenter" = {
	    NSWorkspace = NSWorkspace;
	};
	"_wv" = {
	    NSWindow = NSWindow;
	};
	cachedFlippedFont = {
	    NSFont = NSFont;
	};
	cachedScreenFont = {
	    NSFont = NSFont;
	};
	changeCount = {
	    NSPasteboard = NSPasteboard;
	};
	completionDelay = {
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"context_data" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"context_info" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	delegate = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	destinationLinks = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"event_context" = {
	    NSEvent = NSEvent;
	};
	"event_time" = {
	    NSEvent = NSEvent;
	};
	"event_type" = {
	    NSEvent = NSEvent;
	};
	filename = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"focus_stack" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	fontInfo = {
	    NSFont = NSFont;
	};
	fontName = {
	    NSFont = NSFont;
	};
	glcontext = {
	    NSOpenGLView = NSOpenGLView;
	};
	highlightDown = {
	    NSStepperCell = NSStepperCell;
	};
	highlightUp = {
	    NSStepperCell = NSStepperCell;
	};
	imageView = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	itemPrototype = {
	    NSCollectionView = NSCollectionView;
	};
	"location_point" = {
	    NSEvent = NSEvent;
	};
	matrix = {
	    NSFont = NSFont;
	};
	matrixExplicitlySet = {
	    NSFont = NSFont;
	};
	methods = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"modifier_flags" = {
	    NSEvent = NSEvent;
	};
	name = {
	    NSPasteboard = NSPasteboard;
	};
	owner = {
	    NSPasteboard = NSPasteboard;
	};
	"pixel_format" = {
	    NSOpenGLView = NSOpenGLView;
	};
	prepared = {
	    NSOpenGLView = NSOpenGLView;
	};
	role = {
	    NSFont = NSFont;
	};
	screenFont = {
	    NSFont = NSFont;
	};
	sourceLinks = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"struct GSArrayControllerFlagsType" = {
	    NSArrayController = NSArrayController;
	};
	"struct GSCellFlagsType" = {
	    NSCell = NSCell;
	};
	"struct GSCursorFlagsType" = {
	    NSCursor = NSCursor;
	};
	"struct GSImageViewFlagsType" = {
	    NSImageView = NSImageView;
	};
	"struct GSMenuFlags" = {
	    NSMenu = NSMenu;
	};
	"struct GSTextAttachmentFlagsType" = {
	    NSTextAttachment = NSTextAttachment;
	};
	"struct GSTextViewFlagsType" = {
	    NSTextView = NSTextView;
	};
	"struct GSWindowFlagsType" = {
	    NSWindow = NSWindow;
	};
	"struct NSMovieViewFlags" = {
	    NSMovieView = NSMovieView;
	};
	"struct __Flags" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"struct __dlmFlags" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"struct __imageFlags" = {
	    NSImage = NSImage;
	};
	"struct __pbcFlags" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"struct _rFlagsType" = {
	    NSView = NSView;
	};
	"struct _scFlagsType" = {
	    NSScroller = NSScroller;
	};
	target = {
	    NSPasteboard = NSPasteboard;
	};
	textField = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	tokenStyle = {
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	tokenizingCharacterSet = {
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"union _MB_event_data" = {
	    NSEvent = NSEvent;
	};
	useHistory = {
	    NSPasteboard = NSPasteboard;
	};
	usedFonts = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"window_num" = {
	    NSEvent = NSEvent;
	};
    };
    method = {
	"+EPSOperationWithView:insideRect:toData:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+EPSOperationWithView:insideRect:toData:printInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+EPSOperationWithView:insideRect:toPath:printInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+IBeamCursor" = {
	    NSCursor = NSCursor;
	};
	"+PDFOperationWithView:insideRect:toData:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+PDFOperationWithView:insideRect:toData:printInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+PDFOperationWithView:insideRect:toPath:printInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+TIFFRepresentationOfImageRepsInArray:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"+TIFFRepresentationOfImageRepsInArray:usingCompression:factor:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"+URLFromPasteboard:" = {
	    "NSURL(NSPasteboard)" = NSPasteboard;
	};
	"+_standardImageWithName:" = {
	    NSImage = NSImage;
	};
	"+alertWithError:" = {
	    NSAlert = NSAlert;
	};
	"+alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:,..." = {
	    NSAlert = NSAlert;
	};
	"+allSelection" = {
	    NSSelection = NSSelection;
	};
	"+alternateSelectedControlColor" = {
	    NSColor = NSColor;
	};
	"+alternateSelectedControlTextColor" = {
	    NSColor = NSColor;
	};
	"+arrowCursor" = {
	    NSCursor = NSCursor;
	};
	"+attachHelpFile:markerName:to:" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"+attributedStringWithAttachment:" = {
	    "NSAttributedString(NSTextAttachment)" = NSTextAttachment;
	};
	"+attributesForVoice:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"+availableColorLists" = {
	    NSColorList = NSColorList;
	};
	"+availableVoices" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"+bezierPath" = {
	    NSBezierPath = NSBezierPath;
	};
	"+bezierPathWithOvalInRect:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+bezierPathWithRect:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+bezierPathWithRoundedRect:xRadius:yRadius:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+blackColor" = {
	    NSColor = NSColor;
	};
	"+blueColor" = {
	    NSColor = NSColor;
	};
	"+boldSystemFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+branchImage" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"+brownColor" = {
	    NSColor = NSColor;
	};
	"+canInitWithData:" = {
	    NSImageRep = NSImageRep;
	};
	"+canInitWithPasteboard:" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	    NSMovie = NSMovie;
	    NSSound = NSSound;
	};
	"+cellClass" = {
	    NSBrowser = NSBrowser;
	    NSControl = NSControl;
	    NSMatrix = NSMatrix;
	};
	"+clearColor" = {
	    NSColor = NSColor;
	};
	"+clearCurrentContext" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"+clipRect:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+closedHandCursor" = {
	    NSCursor = NSCursor;
	};
	"+colorForControlTint:" = {
	    NSColor = NSColor;
	};
	"+colorFromPasteboard:" = {
	    NSColor = NSColor;
	};
	"+colorListNamed:" = {
	    NSColorList = NSColorList;
	};
	"+colorWithCalibratedHue:saturation:brightness:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithCalibratedRed:green:blue:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithCalibratedWhite:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithCatalogName:colorName:" = {
	    NSColor = NSColor;
	};
	"+colorWithColorSpace:components:count:" = {
	    NSColor = NSColor;
	};
	"+colorWithColorSpace:hue:saturation:brightness:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithDeviceCyan:magenta:yellow:black:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithDeviceHue:saturation:brightness:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithDeviceRed:green:blue:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithDeviceWhite:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithDisplayP3Red:green:blue:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithGenericGamma22White:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithHue:saturation:brightness:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithPatternImage:" = {
	    NSColor = NSColor;
	};
	"+colorWithRed:green:blue:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithSRGBRed:green:blue:alpha:" = {
	    NSColor = NSColor;
	};
	"+colorWithWhite:alpha:" = {
	    NSColor = NSColor;
	};
	"+contentRectForFrameRect:styleMask:" = {
	    NSWindow = NSWindow;
	};
	"+contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:" = {
	    NSScrollView = NSScrollView;
	};
	"+contextualMenuCursor" = {
	    NSCursor = NSCursor;
	};
	"+controlAlternatingRowBackgroundColors" = {
	    NSColor = NSColor;
	};
	"+controlBackgroundColor" = {
	    NSColor = NSColor;
	};
	"+controlColor" = {
	    NSColor = NSColor;
	};
	"+controlContentFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+controlDarkShadowColor" = {
	    NSColor = NSColor;
	};
	"+controlHighlightColor" = {
	    NSColor = NSColor;
	};
	"+controlLightHighlightColor" = {
	    NSColor = NSColor;
	};
	"+controlShadowColor" = {
	    NSColor = NSColor;
	};
	"+controlTextColor" = {
	    NSColor = NSColor;
	};
	"+count" = {
	    NSCursor = NSCursor;
	};
	"+crosshairCursor" = {
	    NSCursor = NSCursor;
	};
	"+currentContext" = {
	    NSGraphicsContext = NSGraphicsContext;
	    NSOpenGLContext = NSOpenGL;
	};
	"+currentContextDrawingToScreen" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+currentControlTint" = {
	    NSColor = NSColor;
	};
	"+currentCursor" = {
	    NSCursor = NSCursor;
	};
	"+currentOperation" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+currentSelection" = {
	    NSSelection = NSSelection;
	};
	"+currentSystemCursor" = {
	    NSCursor = NSCursor;
	};
	"+cyanColor" = {
	    NSColor = NSColor;
	};
	"+darkGrayColor" = {
	    NSColor = NSColor;
	};
	"+deepestScreen" = {
	    NSScreen = NSScreen;
	};
	"+defaultCompletionDelay" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"+defaultDepthLimit" = {
	    NSWindow = NSWindow;
	};
	"+defaultFlatness" = {
	    NSBezierPath = NSBezierPath;
	};
	"+defaultFocusRingType" = {
	    NSCell = NSCell;
	    NSView = NSView;
	};
	"+defaultLineCapStyle" = {
	    NSBezierPath = NSBezierPath;
	};
	"+defaultLineJoinStyle" = {
	    NSBezierPath = NSBezierPath;
	};
	"+defaultLineWidth" = {
	    NSBezierPath = NSBezierPath;
	};
	"+defaultMenu" = {
	    NSCell = NSCell;
	    NSView = NSView;
	};
	"+defaultMiterLimit" = {
	    NSBezierPath = NSBezierPath;
	};
	"+defaultParagraphStyle" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"+defaultPixelFormat" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"+defaultPlaceholderForMarker:withBinding:" = {
	    "NSObject(NSPlaceholder)" = NSKeyValueBinding;
	};
	"+defaultPrinter" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"+defaultTokenizingCharacterSet" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"+defaultTypingAttributes" = {
	    NSTextView = NSTextView;
	};
	"+defaultVoice" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"+defaultWindingRule" = {
	    NSBezierPath = NSBezierPath;
	};
	"+defaultWritingDirectionForLanguage:" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"+detachDrawingThread:toTarget:withObject:" = {
	    NSApplication = NSApplication;
	};
	"+detachHelpFrom:" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"+disabledControlTextColor" = {
	    NSColor = NSColor;
	};
	"+disappearingItemCursor" = {
	    NSCursor = NSCursor;
	};
	"+doubleClickInterval" = {
	    NSEvent = NSEvent;
	};
	"+dragColor:withEvent:fromView:" = {
	    NSColorPanel = NSColorPanel;
	};
	"+dragCopyCursor" = {
	    NSCursor = NSCursor;
	};
	"+dragLinkCursor" = {
	    NSCursor = NSCursor;
	};
	"+drawPackedGlyphs:atPoint:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+emptySelection" = {
	    NSSelection = NSSelection;
	};
	"+enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:" = {
	    NSEvent = NSEvent;
	};
	"+eventWithEventRef:" = {
	    NSEvent = NSEvent;
	};
	"+exposeBinding:" = {
	    "NSObject(NSKeyValueBindingCreation)" = NSKeyValueBinding;
	};
	"+fillRect:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+focusView" = {
	    NSView = NSView;
	};
	"+fontDescriptorWithFontAttributes:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"+fontDescriptorWithName:matrix:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"+fontDescriptorWithName:size:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"+fontWithDescriptor:size:" = {
	    NSFont = NSFont;
	};
	"+fontWithDescriptor:size:textTransform:" = {
	    NSFont = NSFont;
	};
	"+fontWithDescriptor:textTransform:" = {
	    NSFont = NSFont;
	};
	"+fontWithName:matrix:" = {
	    NSFont = NSFont;
	};
	"+fontWithName:size:" = {
	    NSFont = NSFont;
	};
	"+frameRectForContentRect:styleMask:" = {
	    NSWindow = NSWindow;
	};
	"+frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:" = {
	    NSScrollView = NSScrollView;
	};
	"+generalPasteboard" = {
	    NSPasteboard = NSPasteboard;
	};
	"+getLink:manager:isMultiple:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"+getTIFFCompressionTypes:count:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"+graphicsContextWithAttributes:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+graphicsContextWithBitmapImageRep:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+graphicsContextWithCGContext:flipped:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+graphicsContextWithGraphicsPort:flipped:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+graphicsContextWithWindow:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+grayColor" = {
	    NSColor = NSColor;
	};
	"+greenArrowCursor" = {
	    NSCursor = NSCursor;
	};
	"+greenColor" = {
	    NSColor = NSColor;
	};
	"+gridColor" = {
	    NSColor = NSColor;
	};
	"+handleExposeRect:forDriver:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"+headerColor" = {
	    NSColor = NSColor;
	};
	"+headerTextColor" = {
	    NSColor = NSColor;
	};
	"+hide" = {
	    NSCursor = NSCursor;
	};
	"+highlightColor" = {
	    NSColor = NSColor;
	};
	"+highlightedBranchImage" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"+ignoresAlpha" = {
	    NSColor = NSColor;
	};
	"+imageFileTypes" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"+imageNamed:" = {
	    NSImage = NSImage;
	};
	"+imagePasteboardTypes" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"+imageRepClassForData:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepClassForFileType:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepClassForPasteboardType:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepWithContentsOfFile:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepWithContentsOfURL:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepWithData:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	    NSEPSImageRep = NSEPSImageRep;
	};
	"+imageRepWithPasteboard:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepsWithContentsOfFile:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepsWithContentsOfURL:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageRepsWithData:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"+imageRepsWithFile:" = {
	    "NSBitmapImageRep(GNUstepExtension)" = NSBitmapImageRep;
	};
	"+imageRepsWithPasteboard:" = {
	    NSImageRep = NSImageRep;
	};
	"+imageUnfilteredFileTypes" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"+imageUnfilteredPasteboardTypes" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"+imageViewWithImage:" = {
	    NSImageView = NSImageView;
	};
	"+isAnyApplicationSpeaking" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"+isAutomaticDashSubstitutionEnabled" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"+isAutomaticQuoteSubstitutionEnabled" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"+isAutomaticTextReplacementEnabled" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"+isContextHelpModeActive" = {
	    NSHelpManager = NSHelpManager;
	};
	"+isHiddenUntilMouseMoves" = {
	    NSCursor = NSCursor;
	};
	"+isMouseCoalescingEnabled" = {
	    NSEvent = NSEvent;
	};
	"+isNativeType:" = {
	    NSDocument = NSDocument;
	};
	"+keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:" = {
	    NSEvent = NSEvent;
	};
	"+keyRepeatDelay" = {
	    NSEvent = NSEvent;
	};
	"+keyRepeatInterval" = {
	    NSEvent = NSEvent;
	};
	"+keyboardFocusIndicatorColor" = {
	    NSColor = NSColor;
	};
	"+knobColor" = {
	    NSColor = NSColor;
	};
	"+labelColor" = {
	    NSColor = NSColor;
	};
	"+labelFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+labelFontSize" = {
	    NSFont = NSFont;
	};
	"+lightGrayColor" = {
	    NSColor = NSColor;
	};
	"+localizedNameForTIFFCompressionType:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"+magentaColor" = {
	    NSColor = NSColor;
	};
	"+mainScreen" = {
	    NSScreen = NSScreen;
	};
	"+menuBarFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+menuBarHeight" = {
	    NSMenuView = NSMenuView;
	};
	"+menuBarVisible" = {
	    NSMenu = NSMenu;
	};
	"+menuChanged:" = {
	    NSWindow = NSWindow;
	};
	"+menuFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+menuZone" = {
	    NSMenu = NSMenu;
	};
	"+messageFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+mimeTypeForPasteboardType:" = {
	    "NSPasteboard(GNUstepExtensions)" = NSPasteboard;
	};
	"+minFrameWidthWithTitle:styleMask:" = {
	    NSWindow = NSWindow;
	};
	"+modifierFlags" = {
	    NSEvent = NSEvent;
	};
	"+mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:" = {
	    NSEvent = NSEvent;
	};
	"+mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:buttonNumber:deltaX:deltaY:deltaZ:" = {
	    NSEvent = NSEvent;
	};
	"+mouseLocation" = {
	    NSEvent = NSEvent;
	};
	"+movieUnfilteredFileTypes" = {
	    NSMovie = NSMovie;
	};
	"+movieUnfilteredPasteboardTypes" = {
	    NSMovie = NSMovie;
	};
	"+openHandCursor" = {
	    NSCursor = NSCursor;
	};
	"+openPanel" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"+operationNotAllowedCursor" = {
	    NSCursor = NSCursor;
	};
	"+orangeColor" = {
	    NSColor = NSColor;
	};
	"+otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:" = {
	    NSEvent = NSEvent;
	};
	"+pageLayout" = {
	    NSPageLayout = NSPageLayout;
	};
	"+paletteFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+pasteboardByFilteringData:ofType:" = {
	    NSPasteboard = NSPasteboard;
	};
	"+pasteboardByFilteringFile:" = {
	    NSPasteboard = NSPasteboard;
	};
	"+pasteboardByFilteringTypesInPasteboard:" = {
	    NSPasteboard = NSPasteboard;
	};
	"+pasteboardTypeForMimeType:" = {
	    "NSPasteboard(GNUstepExtensions)" = NSPasteboard;
	};
	"+pasteboardWithName:" = {
	    NSPasteboard = NSPasteboard;
	};
	"+pasteboardWithUniqueName" = {
	    NSPasteboard = NSPasteboard;
	};
	"+pointingHandCursor" = {
	    NSCursor = NSCursor;
	};
	"+pop" = {
	    NSCursor = NSCursor;
	};
	"+popUpContextMenu:withEvent:forView:" = {
	    NSMenu = NSMenu;
	};
	"+popUpContextMenu:withEvent:forView:withFont:" = {
	    NSMenu = NSMenu;
	};
	"+preferredFontNames" = {
	    NSFont = NSFont;
	};
	"+preferredScrollerStyle" = {
	    NSScroller = NSScroller;
	};
	"+prefersTrackingUntilMouseUp" = {
	    NSCell = NSCell;
	    NSSliderCell = NSSliderCell;
	};
	"+pressedMouseButtons" = {
	    NSEvent = NSEvent;
	};
	"+printOperationWithView:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+printOperationWithView:printInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+printPanel" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"+printerNames" = {
	    NSPrinter = NSPrinter;
	};
	"+printerTypes" = {
	    NSPrinter = NSPrinter;
	};
	"+printerWithName:" = {
	    NSPrinter = NSPrinter;
	};
	"+printerWithType:" = {
	    NSPrinter = NSPrinter;
	};
	"+purpleColor" = {
	    NSColor = NSColor;
	};
	"+quaternaryLabelColor" = {
	    NSColor = NSColor;
	};
	"+readableTypes" = {
	    NSDocument = NSDocument;
	};
	"+readableTypesForPasteboard:" = {
	    "(NSPasteboardReading)" = NSPasteboard;
	};
	"+readingOptionsForType:pasteboard:" = {
	    "NSObject(NSPasteboardReading)" = NSPasteboard;
	};
	"+redColor" = {
	    NSColor = NSColor;
	};
	"+registerForServices" = {
	    NSTextView = NSTextView;
	};
	"+registerImageRepClass:" = {
	    NSImageRep = NSImageRep;
	};
	"+registeredImageRepClasses" = {
	    NSImageRep = NSImageRep;
	};
	"+removeFrameUsingName:" = {
	    NSWindow = NSWindow;
	};
	"+removeSavedColumnsWithAutosaveName:" = {
	    NSBrowser = NSBrowser;
	};
	"+representationOfImageRepsInArray:usingType:properties:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"+resetScreens" = {
	    NSScreen = NSScreen;
	};
	"+resizeDownCursor" = {
	    NSCursor = NSCursor;
	};
	"+resizeLeftCursor" = {
	    NSCursor = NSCursor;
	};
	"+resizeLeftRightCursor" = {
	    NSCursor = NSCursor;
	};
	"+resizeRightCursor" = {
	    NSCursor = NSCursor;
	};
	"+resizeUpCursor" = {
	    NSCursor = NSCursor;
	};
	"+resizeUpDownCursor" = {
	    NSCursor = NSCursor;
	};
	"+restoreGraphicsState" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+rulerViewClass" = {
	    NSScrollView = NSScrollView;
	};
	"+saveGraphicsState" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+savePanel" = {
	    NSSavePanel = NSSavePanel;
	};
	"+screens" = {
	    NSScreen = NSScreen;
	};
	"+scrollBarColor" = {
	    NSColor = NSColor;
	};
	"+scrollerWidth" = {
	    NSScroller = NSScroller;
	};
	"+scrollerWidthForControlSize:" = {
	    NSScroller = NSScroller;
	};
	"+secondaryLabelColor" = {
	    NSColor = NSColor;
	};
	"+secondarySelectedControlColor" = {
	    NSColor = NSColor;
	};
	"+selectedControlColor" = {
	    NSColor = NSColor;
	};
	"+selectedControlTextColor" = {
	    NSColor = NSColor;
	};
	"+selectedKnobColor" = {
	    NSColor = NSColor;
	};
	"+selectedMenuItemColor" = {
	    NSColor = NSColor;
	};
	"+selectedMenuItemTextColor" = {
	    NSColor = NSColor;
	};
	"+selectedTextBackgroundColor" = {
	    NSColor = NSColor;
	};
	"+selectedTextColor" = {
	    NSColor = NSColor;
	};
	"+selectionWithDescriptionData:" = {
	    NSSelection = NSSelection;
	};
	"+separatorItem" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"+setCellClass:" = {
	    NSControl = NSControl;
	    NSMatrix = NSMatrix;
	};
	"+setContextHelpModeActive:" = {
	    NSHelpManager = NSHelpManager;
	};
	"+setCurrentContext:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+setCurrentOperation:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"+setDefaultContextClass:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"+setDefaultFlatness:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+setDefaultLineCapStyle:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+setDefaultLineJoinStyle:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+setDefaultLineWidth:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+setDefaultMiterLimit:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+setDefaultPlaceholder:forMarker:withBinding:" = {
	    "NSObject(NSPlaceholder)" = NSKeyValueBinding;
	};
	"+setDefaultPrinter:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"+setDefaultWindingRule:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+setFontManagerFactory:" = {
	    NSFontManager = NSFontManager;
	};
	"+setFontPanelFactory:" = {
	    NSFontManager = NSFontManager;
	};
	"+setGraphicsState:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"+setHelpDirectory:" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"+setHiddenUntilMouseMoves:" = {
	    NSCursor = NSCursor;
	};
	"+setIgnoresAlpha:" = {
	    NSColor = NSColor;
	};
	"+setLink:manager:isMultiple:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"+setMenuBarVisible:" = {
	    NSMenu = NSMenu;
	};
	"+setMenuZone:" = {
	    NSMenu = NSMenu;
	};
	"+setMouseCoalescingEnabled:" = {
	    NSEvent = NSEvent;
	};
	"+setPickerMask:" = {
	    NSColorPanel = NSColorPanel;
	};
	"+setPickerMode:" = {
	    NSColorPanel = NSColorPanel;
	};
	"+setPreferredFontNames:" = {
	    NSFont = NSFont;
	};
	"+setRulerViewClass:" = {
	    NSScrollView = NSScrollView;
	};
	"+setSharedPrintInfo:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"+setUserFixedPitchFont:" = {
	    NSFont = NSFont;
	};
	"+setUserFont:" = {
	    NSFont = NSFont;
	};
	"+setUsesUserKeyEquivalents:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"+shadowColor" = {
	    NSColor = NSColor;
	};
	"+sharedApplication" = {
	    NSApplication = NSApplication;
	};
	"+sharedColorPanel" = {
	    NSColorPanel = NSColorPanel;
	};
	"+sharedColorPanelExists" = {
	    NSColorPanel = NSColorPanel;
	};
	"+sharedDataLinkPanel" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"+sharedDocumentController" = {
	    NSDocumentController = NSDocumentController;
	};
	"+sharedFontManager" = {
	    NSFontManager = NSFontManager;
	};
	"+sharedFontPanel" = {
	    NSFontPanel = NSFontPanel;
	};
	"+sharedFontPanelExists" = {
	    NSFontPanel = NSFontPanel;
	};
	"+sharedHelpManager" = {
	    NSHelpManager = NSHelpManager;
	};
	"+sharedHelpPanel" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"+sharedHelpPanelWithDirectory:" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"+sharedPrintInfo" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"+sharedSpellChecker" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"+sharedSpellCheckerExists" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"+sharedUserDefaultsController" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"+sharedWorkspace" = {
	    NSWorkspace = NSWorkspace;
	};
	"+sizeForPaperName:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"+smallSystemFontSize" = {
	    NSFont = NSFont;
	};
	"+soundNamed:" = {
	    NSSound = NSSound;
	};
	"+soundUnfilteredFileTypes" = {
	    NSSound = NSSound;
	};
	"+soundUnfilteredPasteboardTypes" = {
	    NSSound = NSSound;
	};
	"+soundUnfilteredTypes" = {
	    NSSound = NSSound;
	};
	"+standardWindowButton:forStyleMask:" = {
	    NSWindow = NSWindow;
	};
	"+startPeriodicEventsAfterDelay:withPeriod:" = {
	    NSEvent = NSEvent;
	};
	"+stopPeriodicEvents" = {
	    NSEvent = NSEvent;
	};
	"+strokeLineFromPoint:toPoint:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+strokeRect:" = {
	    NSBezierPath = NSBezierPath;
	};
	"+systemBlueColor" = {
	    NSColor = NSColor;
	};
	"+systemBrownColor" = {
	    NSColor = NSColor;
	};
	"+systemFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+systemFontSize" = {
	    NSFont = NSFont;
	};
	"+systemFontSizeForControlSize:" = {
	    NSFont = NSFont;
	};
	"+systemGrayColor" = {
	    NSColor = NSColor;
	};
	"+systemGreenColor" = {
	    NSColor = NSColor;
	};
	"+systemIndigoColor" = {
	    NSColor = NSColor;
	};
	"+systemOrangeColor" = {
	    NSColor = NSColor;
	};
	"+systemPinkColor" = {
	    NSColor = NSColor;
	};
	"+systemPurpleColor" = {
	    NSColor = NSColor;
	};
	"+systemRedColor" = {
	    NSColor = NSColor;
	};
	"+systemTealColor" = {
	    NSColor = NSColor;
	};
	"+systemYellowColor" = {
	    NSColor = NSColor;
	};
	"+tabViewItemWithViewController:" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"+templatesWithAttributeKeyPaths:inEntityDescription:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"+tertiaryLabelColor" = {
	    NSColor = NSColor;
	};
	"+textBackgroundColor" = {
	    NSColor = NSColor;
	};
	"+textColor" = {
	    NSColor = NSColor;
	};
	"+textFileTypes" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"+textPasteboardTypes" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"+textTypes" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"+textUnfilteredFileTypes" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"+textUnfilteredPasteboardTypes" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"+textUnfilteredTypes" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"+titleBarFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+toolTipColor" = {
	    NSColor = NSColor;
	};
	"+toolTipTextColor" = {
	    NSColor = NSColor;
	};
	"+toolTipsFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+typesFilterableTo:" = {
	    NSPasteboard = NSPasteboard;
	};
	"+unhide" = {
	    NSCursor = NSCursor;
	};
	"+uniqueSpellDocumentTag" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"+unregisterImageRepClass:" = {
	    NSImageRep = NSImageRep;
	};
	"+useFont:" = {
	    NSFont = NSFont;
	};
	"+userFixedPitchFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+userFontOfSize:" = {
	    NSFont = NSFont;
	};
	"+usesUserKeyEquivalents" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"+whiteColor" = {
	    NSColor = NSColor;
	};
	"+windowBackgroundColor" = {
	    NSColor = NSColor;
	};
	"+windowFrameColor" = {
	    NSColor = NSColor;
	};
	"+windowFrameTextColor" = {
	    NSColor = NSColor;
	};
	"+windowNumberAtPoint:belowWindowWithWindowNumber:" = {
	    NSWindow = NSWindow;
	};
	"+windowWithContentViewController:" = {
	    NSWindow = NSWindow;
	};
	"+writableTypes" = {
	    NSDocument = NSDocument;
	};
	"+yellowColor" = {
	    NSColor = NSColor;
	};
	"-CGColor" = {
	    "NSColor(GSQuartz)" = NSColor;
	};
	"-CGContext" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-CGImageForProposedRect:context:hints:" = {
	    "NSImage(GSQuartz)" = NSImage;
	    "NSImageRep(GSQuartz)" = NSImageRep;
	};
	"-CGLContextObj" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-DPSPrintf::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSWriteData::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSarc:::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSarcn:::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSarct:::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSashow:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSawidthshow::::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScharpath::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSclip" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSclosepath" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScomposite::::::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScompositerect:::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSconcat:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentalpha:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentcmykcolor::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentflat:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentgray:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrenthsbcolor:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentlinecap:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentlinejoin:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentlinewidth:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentmiterlimit:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentoffset::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentpoint::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentrgbcolor:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurrentstrokeadjust:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPScurveto::::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSdissolve::::::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSeoclip" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSeofill" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSfill" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSflattenpath" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSgrestore" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSgsave" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSinitclip" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSinitgraphics" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSinitmatrix" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSlineto::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSmoveto::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSnewpath" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSpathbbox::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSrcurveto::::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSrectclip::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSrectfill::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSrectstroke::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSreversepath" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSrlineto::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSrmoveto::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSrotate:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSscale::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetalpha:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetcmykcolor::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetdash:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetflat:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetgray:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetgstate:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsethalftonephase::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsethsbcolor:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetlinecap:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetlinejoin:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetlinewidth:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetmiterlimit:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetoffset::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetrgbcolor:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSsetstrokeadjust:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSshfill:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSshow:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSstroke" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPStranslate::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSwidthshow::::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSxshow:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSxyshow:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-DPSyshow:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-EPSRepresentation" = {
	    NSEPSImageRep = NSEPSImageRep;
	};
	"-GSConcatCTM:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSCurrentCTM" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSCurrentDevice:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSDefineGState" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSDrawImage::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSGetTextCTM" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSGetTextPosition" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSReadRect:" = {
	    "NSGraphicsContext(NSGraphics)" = NSGraphicsContext;
	};
	"-GSRectClipList::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSRectFillList::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSReplaceGState:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSendBezierPath:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetCTM:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetCharacterSpacing:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetDevice:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetFillColor:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetFillColorspace:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetFont:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetFontSize:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetPatterColor:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetStrokeColor:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetStrokeColorspace:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetTextCTM:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetTextDrawingMode:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSSetTextPosition:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSShowGlyphs::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSShowGlyphsWithAdvances:::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSShowText::" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSUndefineGState:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSWSetViewIsFlipped:" = {
	    "NSGraphicsContext(NSGraphics)" = NSGraphicsContext;
	};
	"-GSWViewIsFlipped" = {
	    "NSGraphicsContext(NSGraphics)" = NSGraphicsContext;
	};
	"-GScomposite:toPoint:fromRect:operation:fraction:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-GSdraw:toPoint:fromRect:operation:fraction:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-NSBeep" = {
	    "NSGraphicsContext(NSGraphics)" = NSGraphicsContext;
	};
	"-NSDrawBitmap:::::::::::" = {
	    "NSGraphicsContext(NSGraphics)" = NSGraphicsContext;
	};
	"-QTMovie" = {
	    NSMovie = NSMovie;
	};
	"-RTFDFileWrapperFromRange:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-RTFDFromRange:" = {
	    NSText = NSText;
	};
	"-RTFDFromRange:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-RTFFromRange:" = {
	    NSText = NSText;
	};
	"-RTFFromRange:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-TIFFRepresentation" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	    NSImage = NSImage;
	};
	"-TIFFRepresentationUsingCompression:factor:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	    NSImage = NSImage;
	};
	"-URL" = {
	    NSMovie = NSMovie;
	    NSSavePanel = NSSavePanel;
	};
	"-URLs" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-URLsFromRunningOpenPanel" = {
	    NSDocumentController = NSDocumentController;
	};
	"-_captureMouse:" = {
	    "NSWindow(GNUstepBackend)" = NSWindow;
	};
	"-_drawAttributedString" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_drawAttributedText:inFrame:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_drawBackgroundWithFrame:inView:" = {
	    "NSTextFieldCell(PrivateMethods)" = NSTextFieldCell;
	};
	"-_drawBorderAndBackgroundWithFrame:inView:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_drawEditorWithFrame:inView:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_drawFocusRingWithFrame:inView:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_drawText:inFrame:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_futureFirstResponder" = {
	    "NSWindow(GNUstepTextView)" = NSWindow;
	};
	"-_getSavePath" = {
	    "NSPrintPanel(Private)" = NSPrintPanel;
	};
	"-_ignoresBacking" = {
	    "NSView(PrivateMethods)" = NSView;
	};
	"-_initDefaults" = {
	    "NSWindow(GNUstepBackend)" = NSWindow;
	};
	"-_invalidateCoordinates" = {
	    "NSView(PrivateMethods)" = NSView;
	};
	"-_layoutManagerDidInvalidateLayout" = {
	    "NSTextView(GSTextViewSync)" = NSTextView;
	};
	"-_matrixFromWindow" = {
	    "NSView(PrivateMethods)" = NSView;
	};
	"-_matrixToWindow" = {
	    "NSView(PrivateMethods)" = NSView;
	};
	"-_nonAutoreleasedTypingAttributes" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_ownedByPopUp" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-_owningPopUp" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-_rebuildCoordinates" = {
	    "NSView(PrivateMethods)" = NSView;
	};
	"-_recacheDelegateResponses" = {
	    "NSTextView(GSTextViewSync)" = NSTextView;
	};
	"-_releaseMouse:" = {
	    "NSWindow(GNUstepBackend)" = NSWindow;
	};
	"-_selectColumn:modifiers:" = {
	    "NSTableView(GNUPrivate)" = NSTableView;
	};
	"-_sendDoubleActionForColumn:" = {
	    "NSTableView(GNUPrivate)" = NSTableView;
	};
	"-_sendsActionOn:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_setIgnoresBacking:" = {
	    "NSView(PrivateMethods)" = NSView;
	};
	"-_setInEditing:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_setOwnedByPopUp:" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-_setStatusStringValue:" = {
	    "NSPrintPanel(Private)" = NSPrintPanel;
	};
	"-_setTabState:" = {
	    "NSTabViewItem(GNUstep)" = NSTabViewItem;
	};
	"-_setTabView:" = {
	    "NSTabViewItem(GNUstep)" = NSTabViewItem;
	};
	"-_setTitleWidthNeedsUpdate:" = {
	    NSForm = NSForm;
	};
	"-_setVisible:" = {
	    "NSWindow(GNUstepBackend)" = NSWindow;
	};
	"-_sizeText:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_syncTextViewsByCalling:withFlag:" = {
	    "NSTextView(GSTextViewSync)" = NSTextView;
	};
	"-_tabRect" = {
	    "NSTabViewItem(GNUstep)" = NSTabViewItem;
	};
	"-_truncatedLabel" = {
	    "NSTabViewItem(GNUstep)" = NSTabViewItem;
	};
	"-_updateFieldEditor:" = {
	    "NSCell(PrivateMethods)" = NSCell;
	};
	"-_updateInputMethodState" = {
	    NSTextView = NSTextView;
	};
	"-_updateInputMethodWithInsertionPoint:" = {
	    NSTextView = NSTextView;
	};
	"-_updateMultipleTextViews" = {
	    "NSTextView(GSTextViewSync)" = NSTextView;
	};
	"-_windowWillDealloc:" = {
	    "NSApplication(GSGUIInternal)" = NSApplication;
	};
	"-abortEditing" = {
	    NSControl = NSControl;
	};
	"-abortModal" = {
	    NSApplication = NSApplication;
	};
	"-absolutePathForAppBundleWithIdentifier:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-absoluteX" = {
	    NSEvent = NSEvent;
	};
	"-absoluteY" = {
	    NSEvent = NSEvent;
	};
	"-absoluteZ" = {
	    NSEvent = NSEvent;
	};
	"-acceptableDragTypes" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-acceptsAlphaNumericalKeys" = {
	    "NSBrowser(GNUstepExtensions)" = NSBrowser;
	};
	"-acceptsArrowKeys" = {
	    NSBrowser = NSBrowser;
	};
	"-acceptsBinary" = {
	    NSPrinter = NSPrinter;
	};
	"-acceptsFirstMouse:" = {
	    NSMatrix = NSMatrix;
	    NSSlider = NSSlider;
	    NSView = NSView;
	};
	"-acceptsFirstResponder" = {
	    NSCell = NSCell;
	    NSResponder = NSResponder;
	    NSTextField = NSTextField;
	};
	"-acceptsGlyphInfo" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-acceptsMouseMovedEvents" = {
	    NSWindow = NSWindow;
	};
	"-accessoryControllers" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-accessoryView" = {
	    NSColorPanel = NSColorPanel;
	    NSDataLinkPanel = NSDataLinkPanel;
	    NSFontPanel = NSFontPanel;
	    NSPageLayout = NSPageLayout;
	    NSPrintOperation = NSPrintOperation;
	    NSPrintPanel = NSPrintPanel;
	    NSSavePanel = NSSavePanel;
	    NSSpellChecker = NSSpellChecker;
	};
	"-action" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSFontManager = NSFontManager;
	    NSMatrix = NSMatrix;
	};
	"-activate:" = {
	    NSColorWell = NSColorWell;
	};
	"-activateContextHelpMode:" = {
	    "NSApplication(NSHelpManager)" = NSHelpManager;
	};
	"-activateIgnoringOtherApps:" = {
	    NSApplication = NSApplication;
	};
	"-activeApplication" = {
	    NSWorkspace = NSWorkspace;
	};
	"-activeConversationChanged:toNewConversation:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-activeConversationWillChange:fromOldConversation:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-add:" = {
	    NSObjectController = NSObjectController;
	};
	"-addAccessoryController:" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-addButtonWithTitle:" = {
	    NSAlert = NSAlert;
	};
	"-addChildWindow:ordered:" = {
	    NSWindow = NSWindow;
	};
	"-addClip" = {
	    NSBezierPath = NSBezierPath;
	};
	"-addCollection:options:" = {
	    NSFontManager = NSFontManager;
	};
	"-addColumn" = {
	    NSBrowser = NSBrowser;
	    NSMatrix = NSMatrix;
	};
	"-addColumnWithCells:" = {
	    NSMatrix = NSMatrix;
	};
	"-addConstraint:" = {
	    "NSView(NSConstraintBasedLayoutInstallingConstraints)" = NSView;
	};
	"-addConstraints:" = {
	    "NSView(NSConstraintBasedLayoutInstallingConstraints)" = NSView;
	};
	"-addCursorRect:cursor:" = {
	    NSView = NSView;
	};
	"-addDocument:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-addEntry:" = {
	    NSForm = NSForm;
	};
	"-addFontDescriptors:toCollection:" = {
	    NSFontManager = NSFontManager;
	};
	"-addFontTrait:" = {
	    NSFontManager = NSFontManager;
	};
	"-addItem:" = {
	    NSMenu = NSMenu;
	};
	"-addItemWithObjectValue:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-addItemWithTitle:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-addItemWithTitle:action:keyEquivalent:" = {
	    NSMenu = NSMenu;
	};
	"-addItemsWithObjectValues:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-addItemsWithTitles:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-addLayoutManager:" = {
	    NSTextStorage = NSTextStorage;
	};
	"-addLink:at:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-addLinkAsMarker:at:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-addLinkPreviouslyAt:fromPasteboard:at:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-addObject:" = {
	    NSArrayController = NSArrayController;
	    NSObjectController = NSObjectController;
	};
	"-addObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-addRepresentation:" = {
	    NSImage = NSImage;
	};
	"-addRepresentations:" = {
	    NSImage = NSImage;
	};
	"-addRow" = {
	    NSMatrix = NSMatrix;
	};
	"-addRow:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-addRowWithCells:" = {
	    NSMatrix = NSMatrix;
	};
	"-addSelectedObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-addSelectionIndexes:" = {
	    NSArrayController = NSArrayController;
	};
	"-addSpeechDictionary:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-addSubview:" = {
	    NSView = NSView;
	};
	"-addSubview:positioned:relativeTo:" = {
	    NSView = NSView;
	};
	"-addSupplement:inPath:" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"-addTabStop:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-addTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-addTableColumn:" = {
	    NSTableView = NSTableView;
	};
	"-addToPageSetup" = {
	    NSView = NSView;
	};
	"-addToolTipRect:owner:userData:" = {
	    NSView = NSView;
	};
	"-addTrackingRect:owner:userData:assumeInside:" = {
	    NSView = NSView;
	};
	"-addTypes:owner:" = {
	    NSPasteboard = NSPasteboard;
	};
	"-addWindowController:" = {
	    NSDocument = NSDocument;
	};
	"-addWindowsItem:title:filename:" = {
	    NSApplication = NSApplication;
	};
	"-adjustPageHeightNew:top:bottom:limit:" = {
	    NSView = NSView;
	};
	"-adjustPageWidthNew:left:right:limit:" = {
	    NSView = NSView;
	};
	"-adjustScroll:" = {
	    NSView = NSView;
	};
	"-adjustSubviews" = {
	    NSSplitView = NSSplitView;
	};
	"-advancementForGlyph:" = {
	    NSFont = NSFont;
	};
	"-afmDictionary" = {
	    NSFont = NSFont;
	};
	"-afmFileContents" = {
	    NSFont = NSFont;
	};
	"-alertShowHelp:" = {
	    "NSObject(NSAlertDelegate)" = NSAlert;
	};
	"-alertStyle" = {
	    NSAlert = NSAlert;
	};
	"-alignCenter:" = {
	    NSText = NSText;
	};
	"-alignJustified:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-alignLeft:" = {
	    NSText = NSText;
	};
	"-alignRight:" = {
	    NSText = NSText;
	};
	"-alignment" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSParagraphStyle = NSParagraphStyle;
	    NSText = NSText;
	    NSTextTab = NSParagraphStyle;
	};
	"-allKeys" = {
	    NSColorList = NSColorList;
	};
	"-allocateGState" = {
	    NSView = NSView;
	};
	"-allowedFileTypes" = {
	    NSSavePanel = NSSavePanel;
	};
	"-allowsBranchSelection" = {
	    NSBrowser = NSBrowser;
	};
	"-allowsColumnReordering" = {
	    NSTableView = NSTableView;
	};
	"-allowsColumnResizing" = {
	    NSTableView = NSTableView;
	};
	"-allowsColumnSelection" = {
	    NSTableView = NSTableView;
	};
	"-allowsCutCopyPaste" = {
	    NSImageView = NSImageView;
	};
	"-allowsDocumentBackgroundColorChange" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-allowsEditingTextAttributes" = {
	    NSCell = NSCell;
	    NSTextField = NSTextField;
	};
	"-allowsEmptySelection" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-allowsMagnification" = {
	    NSScrollView = NSScrollView;
	};
	"-allowsMixedState" = {
	    NSButton = NSButton;
	    NSCell = NSCell;
	};
	"-allowsMultipleSelection" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSOpenPanel = NSOpenPanel;
	    NSTableView = NSTableView;
	};
	"-allowsOtherFileTypes" = {
	    NSSavePanel = NSSavePanel;
	};
	"-allowsTickMarkValuesOnly" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-allowsToolTipsWhenApplicationIsInactive" = {
	    NSWindow = NSWindow;
	};
	"-allowsTruncatedLabels" = {
	    NSTabView = NSTabView;
	};
	"-allowsTypeSelect" = {
	    NSBrowser = NSBrowser;
	};
	"-allowsUndo" = {
	    NSCell = NSCell;
	    NSTextView = NSTextView;
	};
	"-alpha" = {
	    NSColorPanel = NSColorPanel;
	};
	"-alphaComponent" = {
	    NSColor = NSColor;
	};
	"-alphaControlAddedOrRemoved:" = {
	    NSColorPicker = NSColorPicker;
	};
	"-alphaValue" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-altIncrementValue" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-alternateImage" = {
	    NSBrowserCell = NSBrowserCell;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-alternateMnemonic" = {
	    NSButtonCell = NSButtonCell;
	};
	"-alternateMnemonicLocation" = {
	    NSButtonCell = NSButtonCell;
	};
	"-alternateTitle" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-altersStateOfSelectedItem" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-alwaysUsesMultipleValuesMarker" = {
	    NSArrayController = NSArrayController;
	};
	"-ancestorSharedWithView:" = {
	    NSView = NSView;
	};
	"-animate:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-animates" = {
	    NSImageView = NSImageView;
	};
	"-animationDelay" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-animationResizeTime:" = {
	    NSWindow = NSWindow;
	};
	"-appIconForApp:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-appendBezierPath:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithArcFromPoint:toPoint:radius:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithGlyph:inFont:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithGlyphs:count:inFont:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithOvalInRect:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithPackedGlyphs:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithPackedGlyphs:path:" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-appendBezierPathWithPoints:count:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithRect:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-appendBezierPathWithRoundedRect:xRadius:yRadius:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-application:delegateHandlesKey:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:openFile:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:openFileWithoutUI:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:openFiles:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:openTempFile:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:printFile:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:printFiles:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:printFiles:withSettings:showPrintPanels:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-application:willPresentError:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDidBecomeActive:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDidChangeScreenParameters:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDidFinishLaunching:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDidHide:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDidResignActive:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDidUnhide:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDidUpdate:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationDockMenu:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationIconImage" = {
	    NSApplication = NSApplication;
	};
	"-applicationOpenUntitledFile:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationShouldHandleReopen:hasVisibleWindows:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationShouldOpenUntitledFile:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationShouldTerminate:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationShouldTerminateAfterLastWindowClosed:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationWillBecomeActive:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationWillFinishLaunching:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationWillHide:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationWillResignActive:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationWillTerminate:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationWillUnhide:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-applicationWillUpdate:" = {
	    "NSObject(NSApplicationDelegate)" = NSApplication;
	};
	"-appliesImmediately" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-applyFontTraits:range:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-applyLayoutAttributes:" = {
	    "(NSCollectionViewElement)" = NSCollectionView;
	};
	"-areCursorRectsEnabled" = {
	    NSWindow = NSWindow;
	};
	"-areLinkOutlinesVisible" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-arrangeInFront:" = {
	    NSApplication = NSApplication;
	};
	"-arrangeObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-arrangedObjects" = {
	    NSArrayController = NSArrayController;
	};
	"-arrowPosition" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-arrowsPosition" = {
	    NSScroller = NSScroller;
	};
	"-ascender" = {
	    NSFont = NSFont;
	};
	"-aspectRatio" = {
	    NSWindow = NSWindow;
	};
	"-associatedEventsMask" = {
	    NSEvent = NSEvent;
	};
	"-attachColorList:" = {
	    NSColorPanel = NSColorPanel;
	    NSColorPicker = NSColorPicker;
	};
	"-attachPopUpWithFrame:inView:" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-attachSubmenuForItemAtIndex:" = {
	    NSMenuView = NSMenuView;
	};
	"-attachedMenu" = {
	    NSMenu = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-attachedMenuView" = {
	    NSMenuView = NSMenuView;
	};
	"-attachedSheet" = {
	    "NSObject(NSWindowDelegateAdditions)" = NSWindow;
	};
	"-attachment" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-attachmentCell" = {
	    NSTextAttachment = NSTextAttachment;
	};
	"-attributeRuns" = {
	    "NSTextStorage(Scripting)" = NSTextStorage;
	};
	"-attributedAlternateTitle" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-attributedStringValue" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-attributedTitle" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSFormCell = NSFormCell;
	};
	"-attributes" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-autoResizesOutlineColumn" = {
	    NSOutlineView = NSOutlineView;
	};
	"-autoenablesItems" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-autohidesScroller" = {
	    NSBrowser = NSBrowser;
	};
	"-autohidesScrollers" = {
	    NSScrollView = NSScrollView;
	};
	"-automaticallyAdjustsContentInsets" = {
	    NSScrollView = NSScrollView;
	};
	"-automaticallyPreparesContent" = {
	    NSObjectController = NSObjectController;
	};
	"-automaticallyRearrangesObjects" = {
	    NSArrayController = NSArrayController;
	};
	"-autorecalculatesKeyViewLoop" = {
	    NSWindow = NSWindow;
	};
	"-autorepeat" = {
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-autoresizesAllColumnsToFit" = {
	    NSTableView = NSTableView;
	};
	"-autoresizesSubviews" = {
	    NSView = NSView;
	};
	"-autoresizingMask" = {
	    NSView = NSView;
	};
	"-autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-autosaveExpandedItems" = {
	    NSOutlineView = NSOutlineView;
	};
	"-autosaveName" = {
	    NSSplitView = NSSplitView;
	    NSTableView = NSTableView;
	};
	"-autosaveTableColumns" = {
	    NSTableView = NSTableView;
	};
	"-autosavedContentsFileURL" = {
	    NSDocument = NSDocument;
	};
	"-autosavingDelay" = {
	    NSDocumentController = NSDocumentController;
	};
	"-autosavingFileType" = {
	    NSDocument = NSDocument;
	};
	"-autoscroll:" = {
	    NSClipView = NSClipView;
	    NSView = NSView;
	};
	"-autosizesCells" = {
	    NSMatrix = NSMatrix;
	};
	"-availableFontFamilies" = {
	    NSFontManager = NSFontManager;
	};
	"-availableFontNamesMatchingFontDescriptor:" = {
	    NSFontManager = NSFontManager;
	};
	"-availableFontNamesWithTraits:" = {
	    NSFontManager = NSFontManager;
	};
	"-availableFonts" = {
	    NSFontManager = NSFontManager;
	};
	"-availableMembersOfFontFamily:" = {
	    NSFontManager = NSFontManager;
	};
	"-availableTypeFromArray:" = {
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-avoidsEmptySelection" = {
	    NSArrayController = NSArrayController;
	};
	"-backgroundColor" = {
	    NSBrowser = NSBrowser;
	    NSButtonCell = NSButtonCell;
	    NSClipView = NSClipView;
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSImage = NSImage;
	    NSMatrix = NSMatrix;
	    NSScrollView = NSScrollView;
	    "NSSplitView(GNUstepExtra)" = NSSplitView;
	    NSTableView = NSTableView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	    NSWindow = NSWindow;
	};
	"-backgroundColors" = {
	    NSCollectionView = NSCollectionView;
	};
	"-backgroundStyle" = {
	    NSCell = NSCell;
	};
	"-backgroundView" = {
	    NSCollectionView = NSCollectionView;
	};
	"-backgroundViewScrollsWithContent" = {
	    NSCollectionView = NSCollectionView;
	};
	"-backingScaleFactor" = {
	    NSScreen = NSScreen;
	    NSWindow = NSWindow;
	};
	"-backingType" = {
	    NSWindow = NSWindow;
	};
	"-baseWritingDirection" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-baselineOffsetFromBottom" = {
	    NSView = NSView;
	};
	"-becomeFirstResponder" = {
	    NSResponder = NSResponder;
	};
	"-becomeKeyWindow" = {
	    NSWindow = NSWindow;
	};
	"-becomeMainWindow" = {
	    NSWindow = NSWindow;
	};
	"-becomesKeyOnlyIfNeeded" = {
	    NSPanel = NSPanel;
	};
	"-beginDocument" = {
	    NSView = NSView;
	};
	"-beginEditing" = {
	    NSTextStorage = NSTextStorage;
	};
	"-beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-beginModalSessionForWindow:" = {
	    NSApplication = NSApplication;
	};
	"-beginOpenPanel:forTypes:completionHandler:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-beginOpenPanelWithCompletionHandler:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-beginPage:label:bBox:fonts:" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-beginPageInRect:atPlacement:" = {
	    NSView = NSView;
	};
	"-beginPageSetupRect:placement:" = {
	    NSView = NSView;
	};
	"-beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-beginSetup" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-beginSheet:completionHandler:" = {
	    NSWindow = NSWindow;
	};
	"-beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:" = {
	    NSApplication = NSApplication;
	};
	"-beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-beginSheetModalForWindow:completionHandler:" = {
	    NSAlert = NSAlert;
	    NSSavePanel = NSSavePanel;
	};
	"-beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:" = {
	    NSAlert = NSAlert;
	};
	"-beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:" = {
	    NSPageLayout = NSPageLayout;
	    NSPrintPanel = NSPrintPanel;
	};
	"-beginTrailer" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-beginUpdates" = {
	    NSTableView = NSTableView;
	};
	"-beginWithCompletionHandler:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-bestRepresentationForDevice:" = {
	    NSImage = NSImage;
	};
	"-bestRepresentationForRect:context:hints:" = {
	    NSImage = NSImage;
	};
	"-bezelStyle" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-bezierPathByFlatteningPath" = {
	    NSBezierPath = NSBezierPath;
	};
	"-bezierPathByReversingPath" = {
	    NSBezierPath = NSBezierPath;
	};
	"-bind:toObject:withKeyPath:options:" = {
	    "NSObject(NSKeyValueBindingCreation)" = NSKeyValueBinding;
	};
	"-bitmapData" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-bitmapFormat" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-bitmapImageRepForCachingDisplayInRect:" = {
	    NSView = NSView;
	};
	"-bitsPerPixel" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-bitsPerSample" = {
	    NSImageRep = NSImageRep;
	};
	"-blackComponent" = {
	    NSColor = NSColor;
	};
	"-blendedColorWithFraction:ofColor:" = {
	    NSColor = NSColor;
	};
	"-blueComponent" = {
	    NSColor = NSColor;
	};
	"-booleanForKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-borderColor" = {
	    NSBox = NSBox;
	};
	"-borderRect" = {
	    NSBox = NSBox;
	};
	"-borderType" = {
	    NSBox = NSBox;
	    NSScrollView = NSScrollView;
	};
	"-borderWidth" = {
	    NSBox = NSBox;
	};
	"-bottomMargin" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-boundingBox" = {
	    NSEPSImageRep = NSEPSImageRep;
	};
	"-boundingRectFor:result:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-boundingRectForFont" = {
	    NSFont = NSFont;
	};
	"-boundingRectForGlyph:" = {
	    NSFont = NSFont;
	};
	"-boundingRectWithSize:options:" = {
	    "NSAttributedString(NSStringDrawing)" = NSStringDrawing;
	};
	"-boundingRectWithSize:options:attributes:" = {
	    "NSString(NSStringDrawing)" = NSStringDrawing;
	};
	"-bounds" = {
	    NSBezierPath = NSBezierPath;
	    NSView = NSView;
	};
	"-boundsRotation" = {
	    NSView = NSView;
	};
	"-boxType" = {
	    NSBox = NSBox;
	};
	"-break" = {
	    NSDataLink = NSDataLink;
	};
	"-breakAllLinks" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-breakUndoCoalescing" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-brightnessComponent" = {
	    NSColor = NSColor;
	};
	"-browser:canDragRowsWithIndexes:inColumn:withEvent:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:child:ofItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:createRowsForColumn:inMatrix:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:didChangeLastColumn:toColumn:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:headerViewControllerForItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:isColumnValid:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:isLeafItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:numberOfChildrenOfItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:numberOfRowsInColumn:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:objectValueForItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:previewViewControllerForLeafItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:selectCellWithString:inColumn:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:selectRow:inColumn:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:setObjectValue:forItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:shouldEditItem:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:shouldSizeColumn:forUserResize:toWidth:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:sizeToFitWidthOfColumn:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:titleOfColumn:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browser:willDisplayCell:atRow:column:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browserColumnConfigurationDidChange:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browserDidScroll:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-browserWillScroll:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-bundleForApp:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-buttonMask" = {
	    NSEvent = NSEvent;
	};
	"-buttonNumber" = {
	    NSEvent = NSEvent;
	};
	"-buttons" = {
	    NSAlert = NSAlert;
	};
	"-bytesPerPlane" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-bytesPerRow" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-cacheDepthMatchesImageDepth" = {
	    NSImage = NSImage;
	};
	"-cacheDisplayInRect:toBitmapImageRep:" = {
	    NSView = NSView;
	};
	"-cacheImageInRect:" = {
	    NSWindow = NSWindow;
	};
	"-cacheMode" = {
	    NSImage = NSImage;
	};
	"-cachesBezierPath" = {
	    NSBezierPath = NSBezierPath;
	};
	"-calcDrawInfo:" = {
	    NSCell = NSCell;
	};
	"-calcSize" = {
	    NSControl = NSControl;
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-calendar" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-canAdd" = {
	    NSObjectController = NSObjectController;
	};
	"-canBeCompressedUsing:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-canBeDisabled" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-canBecomeKeyView" = {
	    NSView = NSView;
	};
	"-canBecomeKeyWindow" = {
	    NSWindow = NSWindow;
	};
	"-canBecomeMainWindow" = {
	    NSWindow = NSWindow;
	};
	"-canChooseDirectories" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-canChooseFiles" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-canCloseDocument" = {
	    NSDocument = NSDocument;
	};
	"-canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-canCreateDirectories" = {
	    NSSavePanel = NSSavePanel;
	};
	"-canDragRowsWithIndexes:atPoint:" = {
	    NSTableView = NSTableView;
	};
	"-canDragRowsWithIndexes:inColumn:withEvent:" = {
	    NSBrowser = NSBrowser;
	};
	"-canDraw" = {
	    NSView = NSView;
	};
	"-canHide" = {
	    NSWindow = NSWindow;
	};
	"-canInsert" = {
	    NSArrayController = NSArrayController;
	};
	"-canRemove" = {
	    NSObjectController = NSObjectController;
	};
	"-canRemoveAllRows" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-canSelectHiddenExtension" = {
	    NSSavePanel = NSSavePanel;
	};
	"-canSelectNext" = {
	    NSArrayController = NSArrayController;
	};
	"-canSelectPrevious" = {
	    NSArrayController = NSArrayController;
	};
	"-canSpawnSeparateThread" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-canStoreColor" = {
	    NSWindow = NSWindow;
	};
	"-cancel:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-cancelOperation:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-cancelUserAttentionRequest:" = {
	    NSApplication = NSApplication;
	};
	"-capHeight" = {
	    NSFont = NSFont;
	};
	"-capabilityMask" = {
	    NSEvent = NSEvent;
	};
	"-capitalizeWord:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-cascadeTopLeftFromPoint:" = {
	    NSWindow = NSWindow;
	};
	"-catalogNameComponent" = {
	    NSColor = NSColor;
	};
	"-cell" = {
	    NSControl = NSControl;
	};
	"-cellAtIndex:" = {
	    NSForm = NSForm;
	};
	"-cellAtRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-cellAttribute:" = {
	    NSCell = NSCell;
	};
	"-cellBackgroundColor" = {
	    NSMatrix = NSMatrix;
	};
	"-cellBaselineOffset" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-cellClass" = {
	    NSMatrix = NSMatrix;
	};
	"-cellFrameAtRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-cellPrototype" = {
	    NSBrowser = NSBrowser;
	};
	"-cellSize" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	    NSCell = NSCell;
	    NSMatrix = NSMatrix;
	};
	"-cellSizeForBounds:" = {
	    NSCell = NSCell;
	};
	"-cellWithTag:" = {
	    NSMatrix = NSMatrix;
	};
	"-cells" = {
	    NSMatrix = NSMatrix;
	};
	"-center" = {
	    NSWindow = NSWindow;
	};
	"-centerScanRect:" = {
	    NSView = NSView;
	};
	"-centerSelectionInVisibleArea:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-changeAttributes:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-changeCaseOfLetter:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-changeCount" = {
	    NSPasteboard = NSPasteboard;
	};
	"-changeDocumentBackgroundColor:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-changeFont:" = {
	    NSText = NSText;
	};
	"-changeInLength" = {
	    NSTextStorage = NSTextStorage;
	};
	"-changeSpelling:" = {
	    NSText = NSText;
	};
	"-changeWindowsItem:title:filename:" = {
	    NSApplication = NSApplication;
	};
	"-changesState" = {
	    "NSMenuItem(GNUstepExtra)" = NSMenuItem;
	};
	"-channelMapping" = {
	    NSSound = NSSound;
	};
	"-characters" = {
	    NSEvent = NSEvent;
	    "NSTextStorage(Scripting)" = NSTextStorage;
	};
	"-charactersIgnoringModifiers" = {
	    NSEvent = NSEvent;
	};
	"-checkForRemovableMedia" = {
	    NSWorkspace = NSWorkspace;
	};
	"-checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-checkSpaceForParts" = {
	    NSScroller = NSScroller;
	};
	"-checkSpelling:" = {
	    NSText = NSText;
	};
	"-checkSpellingOfString:startingAt:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-childWindows" = {
	    NSWindow = NSWindow;
	};
	"-cleanUpAfterDragOperation" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-cleanUpOperation" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-clear:" = {
	    NSMovieView = NSMovieView;
	};
	"-clearDrawable" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-clearGLContext" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-clearRecentDocuments:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-clearsFilterPredicateOnInsertion" = {
	    NSArrayController = NSArrayController;
	};
	"-clickCount" = {
	    NSEvent = NSEvent;
	};
	"-clickedColumn" = {
	    NSBrowser = NSBrowser;
	    NSTableView = NSTableView;
	};
	"-clickedOnLink:atIndex:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-clickedRow" = {
	    NSBrowser = NSBrowser;
	    NSTableView = NSTableView;
	};
	"-close" = {
	    NSDocument = NSDocument;
	    NSDrawer = NSDrawer;
	    "NSMenu(GNUstepExtra)" = NSMenu;
	    NSWindow = NSWindow;
	    NSWindowController = NSWindowController;
	};
	"-close:" = {
	    NSDrawer = NSDrawer;
	};
	"-closeAllDocuments" = {
	    NSDocumentController = NSDocumentController;
	};
	"-closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-closePath" = {
	    NSBezierPath = NSBezierPath;
	};
	"-closeSpellDocumentWithTag:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-closeTransient" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-closestTickMarkValueToValue:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-collapseItem:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-collapseItem:collapseChildren:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-collectionBehavior" = {
	    NSWindow = NSWindow;
	};
	"-collectionNames" = {
	    NSFontManager = NSFontManager;
	};
	"-collectionView" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-collectionView:acceptDrop:index:dropOperation:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:acceptDrop:indexPath:dropOperation:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:canDragItemsAtIndexPaths:withEvent:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:canDragItemsAtIndexes:withEvent:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:cancelPrefetchingForItemsAtIndexPaths:" = {
	    "(NSCollectionViewPrefetching)" = NSCollectionView;
	};
	"-collectionView:didChangeItemsAtIndexPaths:toHighlightState:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:didDeselectItemsAtIndexPaths:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:didSelectItemsAtIndexPaths:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:draggingImageForItemsAtIndexes:withEvent:offset:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:draggingSession:endedAtPoint:dragOperation:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:itemForRepresentedObjectAtIndexPath:" = {
	    "(NSCollectionViewDataSource)" = NSCollectionView;
	};
	"-collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexPaths:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:numberOfItemsInSection:" = {
	    "(NSCollectionViewDataSource)" = NSCollectionView;
	};
	"-collectionView:pasteboardWriterForItemAtIndex:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:pasteboardWriterForItemAtIndexPath:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:prefetchItemsAtIndexPaths:" = {
	    "(NSCollectionViewPrefetching)" = NSCollectionView;
	};
	"-collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:shouldDeselectItemsAtIndexPaths:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:shouldSelectItemsAtIndexPaths:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:transitionLayoutForOldLayout:newLayout:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:updateDraggingItemsForDrag:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:validateDrop:proposedIndex:dropOperation:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:validateDrop:proposedIndexPath:dropOperation:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:viewForSupplementaryElementOfKind:atIndexPath:" = {
	    "(NSCollectionViewDataSource)" = NSCollectionView;
	};
	"-collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:writeItemsAtIndexPaths:toPasteboard:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionView:writeItemsAtIndexes:toPasteboard:" = {
	    "(NSCollectionViewDelegate)" = NSCollectionView;
	};
	"-collectionViewLayout" = {
	    NSCollectionView = NSCollectionView;
	};
	"-color" = {
	    NSColorPanel = NSColorPanel;
	    NSColorWell = NSColorWell;
	    NSTabViewItem = NSTabViewItem;
	};
	"-colorAtX:y:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-colorNameComponent" = {
	    NSColor = NSColor;
	};
	"-colorPanel" = {
	    NSColorPicker = NSColorPicker;
	};
	"-colorSpace" = {
	    NSColor = NSColor;
	};
	"-colorSpaceName" = {
	    NSColor = NSColor;
	    NSImageRep = NSImageRep;
	};
	"-colorUsingColorSpace:" = {
	    NSColor = NSColor;
	};
	"-colorUsingColorSpaceName:" = {
	    NSColor = NSColor;
	};
	"-colorUsingColorSpaceName:device:" = {
	    NSColor = NSColor;
	};
	"-colorUsingType:" = {
	    NSColor = NSColor;
	};
	"-colorWithAlphaComponent:" = {
	    NSColor = NSColor;
	};
	"-colorWithKey:" = {
	    NSColorList = NSColorList;
	};
	"-colorWithSystemEffect:" = {
	    NSColor = NSColor;
	};
	"-colorizeByMappingGray:toColor:blackMapping:whiteMapping:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-columnAtPoint:" = {
	    NSTableHeaderView = NSTableHeaderView;
	    NSTableView = NSTableView;
	};
	"-columnAutoresizingStyle" = {
	    NSTableView = NSTableView;
	};
	"-columnContentWidthForColumnWidth:" = {
	    NSBrowser = NSBrowser;
	};
	"-columnForView:" = {
	    NSTableView = NSTableView;
	};
	"-columnIndexesInRect:" = {
	    NSTableView = NSTableView;
	};
	"-columnOfMatrix:" = {
	    NSBrowser = NSBrowser;
	};
	"-columnResizingType" = {
	    NSBrowser = NSBrowser;
	};
	"-columnWidthForColumnContentWidth:" = {
	    NSBrowser = NSBrowser;
	};
	"-columnWithIdentifier:" = {
	    NSTableView = NSTableView;
	};
	"-columnsAutosaveName" = {
	    NSBrowser = NSBrowser;
	};
	"-columnsInRect:" = {
	    NSTableView = NSTableView;
	};
	"-comboBox:completedString:" = {
	    "(NSComboBoxDataSource)" = NSComboBox;
	};
	"-comboBox:indexOfItemWithStringValue:" = {
	    "(NSComboBoxDataSource)" = NSComboBox;
	};
	"-comboBox:objectValueForItemAtIndex:" = {
	    "(NSComboBoxDataSource)" = NSComboBox;
	};
	"-comboBoxCell:completedString:" = {
	    "NSObject(NSComboBoxCellDataSource)" = NSComboBoxCell;
	};
	"-comboBoxCell:indexOfItemWithStringValue:" = {
	    "NSObject(NSComboBoxCellDataSource)" = NSComboBoxCell;
	};
	"-comboBoxCell:objectValueForItemAtIndex:" = {
	    "NSObject(NSComboBoxCellDataSource)" = NSComboBoxCell;
	};
	"-comboBoxSelectionDidChange:" = {
	    "(NSComboBoxDelegate)" = NSComboBox;
	};
	"-comboBoxSelectionIsChanging:" = {
	    "(NSComboBoxDelegate)" = NSComboBox;
	};
	"-comboBoxWillDismiss:" = {
	    "(NSComboBoxDelegate)" = NSComboBox;
	};
	"-comboBoxWillPopUp:" = {
	    "(NSComboBoxDelegate)" = NSComboBox;
	};
	"-commitEditing" = {
	    NSController = NSController;
	    "NSObject(NSEditor)" = NSKeyValueBinding;
	};
	"-commitEditingWithDelegate:didCommitSelector:contextInfo:" = {
	    NSController = NSController;
	    "NSObject(NSEditor)" = NSKeyValueBinding;
	};
	"-compare:" = {
	    NSCell = NSCell;
	};
	"-complete:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-completedString:" = {
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-completes" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-completionDelay" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"-completionsForPartialWordRange:indexOfSelectedItem:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-compositeToPoint:fromRect:operation:" = {
	    NSImage = NSImage;
	};
	"-compositeToPoint:fromRect:operation:fraction:" = {
	    NSImage = NSImage;
	};
	"-compositeToPoint:operation:" = {
	    NSImage = NSImage;
	};
	"-compositeToPoint:operation:fraction:" = {
	    NSImage = NSImage;
	};
	"-compositingOperation" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-compoundTypes" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-concat" = {
	    "NSAffineTransform(GUIAdditions)" = NSAffineTransform;
	};
	"-concatenateWith:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-concatenateWithMatrix:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-confinementRectForMenu:onScreen:" = {
	    "(NSMenuDelegate)" = NSMenu;
	};
	"-constrainFrameRect:toScreen:" = {
	    NSWindow = NSWindow;
	};
	"-constrainScrollPoint:" = {
	    NSClipView = NSClipView;
	};
	"-containerSize" = {
	    NSTextContainer = NSTextContainer;
	};
	"-containsAttachments" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	    "NSAttributedString(NSTextAttachment)" = NSTextAttachment;
	};
	"-containsPoint:" = {
	    NSBezierPath = NSBezierPath;
	    NSTextContainer = NSTextContainer;
	};
	"-content" = {
	    NSCollectionView = NSCollectionView;
	    NSObjectController = NSObjectController;
	};
	"-contentAspectRatio" = {
	    NSWindow = NSWindow;
	};
	"-contentCompressionResistancePriority" = {
	    NSView = NSView;
	};
	"-contentCompressionResistancePriorityForOrientation:" = {
	    "NSView(NSConstraintBasedLayoutCoreMethods)" = NSView;
	};
	"-contentHuggingPriorityForOrientation:" = {
	    "NSView(NSConstraintBasedLayoutCoreMethods)" = NSView;
	};
	"-contentInsets" = {
	    NSScrollView = NSScrollView;
	};
	"-contentMaxSize" = {
	    NSWindow = NSWindow;
	};
	"-contentMinSize" = {
	    NSWindow = NSWindow;
	};
	"-contentRect" = {
	    NSTabView = NSTabView;
	};
	"-contentRectForFrameRect:" = {
	    NSWindow = NSWindow;
	};
	"-contentResizeIncrements" = {
	    NSWindow = NSWindow;
	};
	"-contentSize" = {
	    NSDrawer = NSDrawer;
	    NSScrollView = NSScrollView;
	};
	"-contentView" = {
	    NSBox = NSBox;
	    NSDrawer = NSDrawer;
	    NSScrollView = NSScrollView;
	    NSWindow = NSWindow;
	};
	"-contentViewMargins" = {
	    NSBox = NSBox;
	};
	"-context" = {
	    NSApplication = NSApplication;
	    NSEvent = NSEvent;
	    NSPrintOperation = NSPrintOperation;
	};
	"-contextHelpForKey:" = {
	    "NSBundle(NSHelpManager)" = NSHelpManager;
	};
	"-contextHelpForObject:" = {
	    NSHelpManager = NSHelpManager;
	};
	"-contextMenuRepresentation" = {
	    NSMenu = NSMenu;
	};
	"-continueSpeaking" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-continueTracking:at:inView:" = {
	    NSCell = NSCell;
	};
	"-control:didFailToFormatString:errorDescription:" = {
	    "NSObject(NSControlTextEditingDelegate)" = NSControl;
	};
	"-control:didFailToValidatePartialString:errorDescription:" = {
	    "NSObject(NSControlTextEditingDelegate)" = NSControl;
	};
	"-control:isValidObject:" = {
	    "NSObject(NSControlTextEditingDelegate)" = NSControl;
	};
	"-control:textShouldBeginEditing:" = {
	    "NSObject(NSControlTextEditingDelegate)" = NSControl;
	};
	"-control:textShouldEndEditing:" = {
	    "NSObject(NSControlTextEditingDelegate)" = NSControl;
	};
	"-control:textView:completions:forPartialWordRange:indexOfSelectedItem:" = {
	    "NSObject(NSControlTextEditingDelegate)" = NSControl;
	};
	"-control:textView:doCommandBySelector:" = {
	    "NSObject(NSControlTextEditingDelegate)" = NSControl;
	};
	"-controlPointBounds" = {
	    NSBezierPath = NSBezierPath;
	};
	"-controlSize" = {
	    NSCell = NSCell;
	    NSProgressIndicator = NSProgressIndicator;
	    NSScroller = NSScroller;
	    NSTabView = NSTabView;
	};
	"-controlTextDidBeginEditing:" = {
	    "NSObject(NSControlDelegate)" = NSControl;
	};
	"-controlTextDidChange:" = {
	    "NSObject(NSControlDelegate)" = NSControl;
	};
	"-controlTextDidEndEditing:" = {
	    "NSObject(NSControlDelegate)" = NSControl;
	};
	"-controlTint" = {
	    NSCell = NSCell;
	    NSProgressIndicator = NSProgressIndicator;
	    NSScroller = NSScroller;
	    NSTabView = NSTabView;
	};
	"-controlView" = {
	    NSCell = NSCell;
	};
	"-convertAttributes:" = {
	    NSFontManager = NSFontManager;
	};
	"-convertBaseToScreen:" = {
	    NSWindow = NSWindow;
	};
	"-convertFont:" = {
	    NSFontManager = NSFontManager;
	};
	"-convertFont:toFace:" = {
	    NSFontManager = NSFontManager;
	};
	"-convertFont:toFamily:" = {
	    NSFontManager = NSFontManager;
	};
	"-convertFont:toHaveTrait:" = {
	    NSFontManager = NSFontManager;
	};
	"-convertFont:toNotHaveTrait:" = {
	    NSFontManager = NSFontManager;
	};
	"-convertFont:toSize:" = {
	    NSFontManager = NSFontManager;
	};
	"-convertOldFactor:newFactor:" = {
	    NSPageLayout = NSPageLayout;
	};
	"-convertPoint:fromView:" = {
	    NSView = NSView;
	};
	"-convertPoint:toView:" = {
	    NSView = NSView;
	};
	"-convertPointFromBase:" = {
	    NSView = NSView;
	};
	"-convertPointToBase:" = {
	    NSView = NSView;
	};
	"-convertRect:fromView:" = {
	    NSView = NSView;
	};
	"-convertRect:toView:" = {
	    NSView = NSView;
	};
	"-convertRectFromBase:" = {
	    NSView = NSView;
	};
	"-convertRectFromScreen:" = {
	    NSWindow = NSWindow;
	};
	"-convertRectToBase:" = {
	    NSView = NSView;
	};
	"-convertRectToScreen:" = {
	    NSWindow = NSWindow;
	};
	"-convertScreenToBase:" = {
	    NSWindow = NSWindow;
	};
	"-convertSize:fromView:" = {
	    NSView = NSView;
	};
	"-convertSize:toView:" = {
	    NSView = NSView;
	};
	"-convertSizeFromBase:" = {
	    NSView = NSView;
	};
	"-convertSizeToBase:" = {
	    NSView = NSView;
	};
	"-convertWeight:ofFont:" = {
	    NSFontManager = NSFontManager;
	};
	"-copiesOnScroll" = {
	    NSClipView = NSClipView;
	};
	"-copy:" = {
	    NSMovieView = NSMovieView;
	    NSText = NSText;
	};
	"-copyAttributesFromContext:withMask:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-copyFont:" = {
	    NSText = NSText;
	};
	"-copyRuler:" = {
	    NSText = NSText;
	};
	"-copyToPasteboard:at:cheapCopyAllowed:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-cornerRadius" = {
	    NSBox = NSBox;
	};
	"-cornerView" = {
	    NSTableView = NSTableView;
	};
	"-countWordsInString:language:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-counterpart" = {
	    NSWindow = NSWindow;
	};
	"-coveredCharacterSet" = {
	    NSFont = NSFont;
	};
	"-createContext" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-createTexture:fromView:internalFormat:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-criteriaForRow:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-criteriaKeyPath" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-currentDirectory" = {
	    NSDocumentController = NSDocumentController;
	};
	"-currentDocument" = {
	    NSDocumentController = NSDocumentController;
	};
	"-currentEditor" = {
	    NSControl = NSControl;
	};
	"-currentEvent" = {
	    NSApplication = NSApplication;
	    NSWindow = NSWindow;
	};
	"-currentPage" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-currentPoint" = {
	    NSBezierPath = NSBezierPath;
	};
	"-currentPresentationOptions" = {
	    NSApplication = NSApplication;
	};
	"-currentTime" = {
	    NSSound = NSSound;
	};
	"-currentVirtualScreen" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-curveToPoint:controlPoint1:controlPoint2:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-cut:" = {
	    NSMovieView = NSMovieView;
	    NSText = NSText;
	};
	"-cyanComponent" = {
	    NSColor = NSColor;
	};
	"-data1" = {
	    NSEvent = NSEvent;
	};
	"-data2" = {
	    NSEvent = NSEvent;
	};
	"-dataCell" = {
	    NSTableColumn = NSTableColumn;
	};
	"-dataCellForRow:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-dataForType:" = {
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-dataFromRange:documentAttributes:error:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-dataLinkManager:didBreakLink:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataLinkManager:isUpdateNeededForLink:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataLinkManager:startTrackingLink:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataLinkManager:stopTrackingLink:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataLinkManagerCloseDocument:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataLinkManagerDidEditLinks:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataLinkManagerRedrawLinkOutlines:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataLinkManagerTracksLinksIndividually:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-dataOfType:error:" = {
	    NSDocument = NSDocument;
	};
	"-dataRepresentationOfType:" = {
	    NSDocument = NSDocument;
	};
	"-dataSource" = {
	    NSCollectionView = NSCollectionView;
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSTableView = NSTableView;
	};
	"-dataWithEPSInsideRect:" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-dataWithPDFInsideRect:" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-datePickerCell:validateProposedDateValue:timeInterval:" = {
	    "NSObject(NSDataPickerCellDelegate)" = NSDatePickerCell;
	};
	"-datePickerElements" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-datePickerMode" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-datePickerStyle" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-dateValue" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-deactivate" = {
	    NSApplication = NSApplication;
	    NSColorWell = NSColorWell;
	};
	"-declareTypes:owner:" = {
	    NSPasteboard = NSPasteboard;
	};
	"-decodeNXColor" = {
	    "NSCoder(NSCoderAdditions)" = NSColor;
	};
	"-deepestScreen" = {
	    NSWindow = NSWindow;
	};
	"-defaultButtonCell" = {
	    NSWindow = NSWindow;
	};
	"-defaultButtonTitle" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-defaultLineHeightForFont" = {
	    NSFont = NSFont;
	};
	"-defaultParagraphStyle" = {
	    NSTextView = NSTextView;
	};
	"-defaultTabInterval" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-defaultType" = {
	    NSDocumentController = NSDocumentController;
	};
	"-defaults" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-delegate" = {
	    NSAlert = NSAlert;
	    NSApplication = NSApplication;
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSCustomImageRep = NSCustomImageRep;
	    NSDataLinkManager = NSDataLinkManager;
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSDrawer = NSDrawer;
	    NSFontManager = NSFontManager;
	    NSImage = NSImage;
	    NSMatrix = NSMatrix;
	    NSMenu = NSMenu;
	    NSRuleEditor = NSRuleEditor;
	    NSSound = NSSound;
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	    NSSplitView = NSSplitView;
	    NSTabView = NSTabView;
	    NSTableView = NSTableView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextStorage = NSTextStorage;
	    NSWindow = NSWindow;
	};
	"-delegateVerifiesLinks" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-delete:" = {
	    NSText = NSText;
	};
	"-deleteBackward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteBackwardByDecomposingPreviousCharacter:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteForward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteItemsAtIndexPaths:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-deleteSections:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-deleteToBeginningOfLine:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteToBeginningOfParagraph:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteToEndOfLine:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteToEndOfParagraph:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteToMark:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteWordBackward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deleteWordForward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-deliverResult" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-deltaPointInMatrixSpace:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-deltaX" = {
	    NSEvent = NSEvent;
	};
	"-deltaY" = {
	    NSEvent = NSEvent;
	};
	"-deltaZ" = {
	    NSEvent = NSEvent;
	};
	"-deminiaturize:" = {
	    NSWindow = NSWindow;
	};
	"-depth" = {
	    NSScreen = NSScreen;
	};
	"-depthLimit" = {
	    NSWindow = NSWindow;
	};
	"-descender" = {
	    NSFont = NSFont;
	};
	"-descriptionData" = {
	    NSSelection = NSSelection;
	};
	"-deselectAll:" = {
	    NSCollectionView = NSCollectionView;
	    NSTableView = NSTableView;
	};
	"-deselectAllCells" = {
	    NSMatrix = NSMatrix;
	};
	"-deselectColumn:" = {
	    NSTableView = NSTableView;
	};
	"-deselectItemAtIndex:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-deselectItemsAtIndexPaths:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-deselectRow:" = {
	    NSTableView = NSTableView;
	};
	"-deselectSelectedCell" = {
	    NSMatrix = NSMatrix;
	};
	"-destinationApplicationName" = {
	    NSDataLink = NSDataLink;
	};
	"-destinationFilename" = {
	    NSDataLink = NSDataLink;
	};
	"-destinationLinkEnumerator" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-destinationLinkWithSelection:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-destinationSelection" = {
	    NSDataLink = NSDataLink;
	};
	"-destroyContext" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-detachColorList:" = {
	    NSColorPanel = NSColorPanel;
	    NSColorPicker = NSColorPicker;
	};
	"-detachSubmenu" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-deviceDescription" = {
	    NSPrinter = NSPrinter;
	    NSScreen = NSScreen;
	    NSWindow = NSWindow;
	};
	"-deviceID" = {
	    NSEvent = NSEvent;
	};
	"-dictionary" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-didAddSubview:" = {
	    NSView = NSView;
	};
	"-didChangeText" = {
	    NSTextView = NSTextView;
	};
	"-didTransitionFromLayout:toLayout:" = {
	    "(NSCollectionViewElement)" = NSCollectionView;
	};
	"-dimpleImage" = {
	    "NSSplitView(GNUstepExtra)" = NSSplitView;
	};
	"-directory" = {
	    NSSavePanel = NSSavePanel;
	};
	"-directoryURL" = {
	    NSSavePanel = NSSavePanel;
	};
	"-disableCursorRects" = {
	    NSWindow = NSWindow;
	};
	"-disableFlushWindow" = {
	    NSWindow = NSWindow;
	};
	"-disableKeyEquivalentForDefaultButtonCell" = {
	    NSWindow = NSWindow;
	};
	"-discardCachedImage" = {
	    NSWindow = NSWindow;
	};
	"-discardCursorRects" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-discardEditing" = {
	    NSController = NSController;
	    "NSObject(NSEditor)" = NSKeyValueBinding;
	};
	"-discardEventsMatchingMask:beforeEvent:" = {
	    NSApplication = NSApplication;
	    NSWindow = NSWindow;
	};
	"-dismissPopUp" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-display" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-displayAllColumns" = {
	    NSBrowser = NSBrowser;
	};
	"-displayColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-displayIfNeeded" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-displayIfNeededIgnoringOpacity" = {
	    NSView = NSView;
	};
	"-displayIfNeededInRect:" = {
	    NSView = NSView;
	};
	"-displayIfNeededInRectIgnoringOpacity:" = {
	    NSView = NSView;
	};
	"-displayName" = {
	    NSDocument = NSDocument;
	    NSFont = NSFont;
	};
	"-displayNameForType:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-displayRect:" = {
	    NSView = NSView;
	};
	"-displayRectIgnoringOpacity:" = {
	    NSView = NSView;
	};
	"-displayRectIgnoringOpacity:inContext:" = {
	    NSView = NSView;
	};
	"-displayTransient" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-displayValuesForRow:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-displayValuesKeyPath" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-displayableSubpredicatesOfPredicate:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-displaysWhenScreenProfileChanges" = {
	    NSWindow = NSWindow;
	};
	"-disposition" = {
	    NSDataLink = NSDataLink;
	};
	"-dissolveToPoint:fraction:" = {
	    NSImage = NSImage;
	};
	"-dissolveToPoint:fromRect:fraction:" = {
	    NSImage = NSImage;
	};
	"-dividerColor" = {
	    NSSplitView = NSSplitView;
	};
	"-dividerStyle" = {
	    NSSplitView = NSSplitView;
	};
	"-dividerThickness" = {
	    NSSplitView = NSSplitView;
	};
	"-doClick:" = {
	    NSBrowser = NSBrowser;
	};
	"-doCommandBySelector:" = {
	    NSResponder = NSResponder;
	};
	"-doCommandBySelector:client:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-doDoubleClick:" = {
	    NSBrowser = NSBrowser;
	};
	"-docFormatFromRange:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-document" = {
	    NSWindowController = NSWindowController;
	};
	"-documentClassForType:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-documentClassNames" = {
	    NSDocumentController = NSDocumentController;
	};
	"-documentCursor" = {
	    NSClipView = NSClipView;
	    NSScrollView = NSScrollView;
	};
	"-documentForFileName:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-documentForURL:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-documentForWindow:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-documentRect" = {
	    NSClipView = NSClipView;
	};
	"-documentView" = {
	    NSClipView = NSClipView;
	    NSScrollView = NSScrollView;
	};
	"-documentVisibleRect" = {
	    NSClipView = NSClipView;
	    NSScrollView = NSScrollView;
	};
	"-documents" = {
	    NSDocumentController = NSDocumentController;
	};
	"-doubleAction" = {
	    NSBrowser = NSBrowser;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-doubleClickAtIndex:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-doubleValue" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-dragFile:fromRect:slideBack:event:" = {
	    NSView = NSView;
	};
	"-dragImage:at:offset:event:pasteboard:source:slideBack:" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-dragImageForRows:event:dragImageOffset:" = {
	    NSTableView = NSTableView;
	};
	"-dragImageForRowsWithIndexes:tableColumns:event:offset:" = {
	    NSTableView = NSTableView;
	};
	"-dragImageForSelectionWithEvent:origin:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-dragOperationForDraggingInfo:type:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-dragPromisedFilesOfTypes:fromRect:source:slideBack:event:" = {
	    NSView = NSView;
	};
	"-dragSelectionWithEvent:offset:slideBack:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-draggedBarWidth" = {
	    "NSSplitView(GNUstepExtra)" = NSSplitView;
	};
	"-draggedColumn" = {
	    NSTableHeaderView = NSTableHeaderView;
	};
	"-draggedDistance" = {
	    NSTableHeaderView = NSTableHeaderView;
	};
	"-draggingImageComponents" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-draggingImageForItemsAtIndexes:withEvent:offset:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-draw" = {
	    NSImageRep = NSImageRep;
	};
	"-drawArrow:highlight:" = {
	    NSScroller = NSScroller;
	};
	"-drawAtPoint:" = {
	    "NSAttributedString(NSStringDrawing)" = NSStringDrawing;
	    NSImageRep = NSImageRep;
	};
	"-drawAtPoint:fromRect:operation:fraction:" = {
	    NSImage = NSImage;
	};
	"-drawAtPoint:withAttributes:" = {
	    "NSString(NSStringDrawing)" = NSStringDrawing;
	};
	"-drawBackgroundInClipRect:" = {
	    NSTableView = NSTableView;
	};
	"-drawBarInside:flipped:" = {
	    NSSliderCell = NSSliderCell;
	};
	"-drawBezelWithFrame:inView:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-drawBorderAndBackgroundWithFrame:inView:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-drawCell:" = {
	    NSControl = NSControl;
	};
	"-drawCellAtIndex:" = {
	    NSForm = NSForm;
	};
	"-drawCellAtRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-drawCellInside:" = {
	    NSControl = NSControl;
	};
	"-drawDividerInRect:" = {
	    NSSplitView = NSSplitView;
	};
	"-drawGradient:fromCenter:radius:toCenter:radius:options:" = {
	    "NSGraphicsContext(NSGradient)" = NSGraphicsContext;
	};
	"-drawGradient:fromPoint:toPoint:options:" = {
	    "NSGraphicsContext(NSGradient)" = NSGraphicsContext;
	};
	"-drawGridInClipRect:" = {
	    NSTableView = NSTableView;
	};
	"-drawImage:withFrame:inView:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-drawImageWithFrame:inView:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-drawInRect:" = {
	    "NSAttributedString(NSStringDrawing)" = NSStringDrawing;
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"-drawInRect:fromRect:operation:fraction:" = {
	    NSImage = NSImage;
	};
	"-drawInRect:fromRect:operation:fraction:respectFlipped:hints:" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"-drawInRect:withAttributes:" = {
	    "NSString(NSStringDrawing)" = NSStringDrawing;
	};
	"-drawInsertionPointInRect:color:turnedOn:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-drawInteriorWithFrame:inView:" = {
	    NSCell = NSCell;
	};
	"-drawKeyEquivalentWithFrame:inView:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-drawKnob" = {
	    NSScroller = NSScroller;
	    NSSliderCell = NSSliderCell;
	};
	"-drawKnob:" = {
	    NSSliderCell = NSSliderCell;
	};
	"-drawKnobSlot" = {
	    NSScroller = NSScroller;
	};
	"-drawKnobSlotInRect:highlight:" = {
	    NSScroller = NSScroller;
	};
	"-drawLabel:inRect:" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-drawPageBorderWithSize:" = {
	    NSView = NSView;
	};
	"-drawParts" = {
	    NSScroller = NSScroller;
	};
	"-drawRect:" = {
	    NSRulerMarker = NSRulerMarker;
	    NSView = NSView;
	};
	"-drawRepresentation:inRect:" = {
	    NSImage = NSImage;
	};
	"-drawRow:clipRect:" = {
	    NSTableView = NSTableView;
	};
	"-drawSelector" = {
	    NSCustomImageRep = NSCustomImageRep;
	};
	"-drawSeparatorItemWithFrame:inView:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-drawSheetBorderWithSize:" = {
	    NSView = NSView;
	};
	"-drawSortIndicatorWithFrame:inView:ascending:priority:" = {
	    NSTableHeaderCell = NSTableHeaderCell;
	};
	"-drawStateImageWithFrame:inView:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-drawSwatchInRect:" = {
	    NSColor = NSColor;
	};
	"-drawTitle:inRect:ofColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-drawTitle:withFrame:inView:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-drawTitleOfColumn:inRect:" = {
	    NSBrowser = NSBrowser;
	};
	"-drawTitleWithFrame:inView:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-drawViewBackgroundInRect:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-drawWellInside:" = {
	    NSColorWell = NSColorWell;
	};
	"-drawWithFrame:inView:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	    NSCell = NSCell;
	};
	"-drawWithFrame:inView:characterIndex:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-drawWithFrame:inView:characterIndex:layoutManager:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-drawWithRect:options:" = {
	    "NSAttributedString(NSStringDrawing)" = NSStringDrawing;
	};
	"-drawWithRect:options:attributes:" = {
	    "NSString(NSStringDrawing)" = NSStringDrawing;
	};
	"-drawerDidClose:" = {
	    NSDrawerDelegate = NSDrawer;
	};
	"-drawerDidOpen:" = {
	    NSDrawerDelegate = NSDrawer;
	};
	"-drawerShouldClose:" = {
	    NSDrawerDelegate = NSDrawer;
	};
	"-drawerShouldOpen:" = {
	    NSDrawerDelegate = NSDrawer;
	};
	"-drawerWillClose:" = {
	    NSDrawerDelegate = NSDrawer;
	};
	"-drawerWillOpen:" = {
	    NSDrawerDelegate = NSDrawer;
	};
	"-drawerWillResizeContents:toSize:" = {
	    NSDrawerDelegate = NSDrawer;
	};
	"-drawers" = {
	    NSWindow = NSWindow;
	};
	"-drawingRectForBounds:" = {
	    NSCell = NSCell;
	};
	"-drawsBackground" = {
	    NSClipView = NSClipView;
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSMatrix = NSMatrix;
	    NSScrollView = NSScrollView;
	    NSTabView = NSTabView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-drawsCellBackground" = {
	    NSMatrix = NSMatrix;
	};
	"-drawsGrid" = {
	    NSTableView = NSTableView;
	};
	"-duplicateDocumentWithContentsOfURL:copying:displayName:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-duration" = {
	    NSSound = NSSound;
	};
	"-echosBullets" = {
	    NSSecureTextField = NSSecureTextField;
	    NSSecureTextFieldCell = NSSecureTextField;
	};
	"-edge" = {
	    NSDrawer = NSDrawer;
	};
	"-editColumn:row:withEvent:select:" = {
	    NSTableView = NSTableView;
	};
	"-editWithFrame:inView:editor:delegate:event:" = {
	    NSCell = NSCell;
	};
	"-edited:range:changeInLength:" = {
	    NSTextStorage = NSTextStorage;
	};
	"-editedColumn" = {
	    NSTableView = NSTableView;
	};
	"-editedMask" = {
	    NSTextStorage = NSTextStorage;
	};
	"-editedRange" = {
	    NSTextStorage = NSTextStorage;
	};
	"-editedRow" = {
	    NSTableView = NSTableView;
	};
	"-elementAtIndex:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-elementAtIndex:associatedPoints:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-elementCount" = {
	    NSBezierPath = NSBezierPath;
	};
	"-enableCursorRects" = {
	    NSWindow = NSWindow;
	};
	"-enableFlushWindow" = {
	    NSWindow = NSWindow;
	};
	"-enableKeyEquivalentForDefaultButtonCell" = {
	    NSWindow = NSWindow;
	};
	"-enclosingScrollView" = {
	    NSView = NSView;
	};
	"-encodeWithCoder:" = {
	    NSColorList = NSColorList;
	    NSColorWell = NSColorWell;
	    NSPrinter = NSPrinter;
	    NSResponder = NSResponder;
	};
	"-encodingScheme" = {
	    NSFont = NSFont;
	};
	"-endDocument" = {
	    NSView = NSView;
	};
	"-endDocumentPages:documentFonts:" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	};
	"-endEditing" = {
	    NSTextStorage = NSTextStorage;
	};
	"-endEditing:" = {
	    NSCell = NSCell;
	};
	"-endEditingFor:" = {
	    NSWindow = NSWindow;
	};
	"-endHeaderComments" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-endModalSession:" = {
	    NSApplication = NSApplication;
	};
	"-endPage" = {
	    NSView = NSView;
	};
	"-endPageSetup" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-endPrologue" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-endSetup" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-endSheet" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	};
	"-endSheet:" = {
	    NSApplication = NSApplication;
	};
	"-endSheet:returnCode:" = {
	    NSApplication = NSApplication;
	};
	"-endTrailer" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	    NSView = NSView;
	};
	"-endUpdates" = {
	    NSTableView = NSTableView;
	};
	"-ensureAttributesAreFixedInRange:" = {
	    NSTextStorage = NSTextStorage;
	};
	"-entityNameKey" = {
	    NSObjectController = NSObjectController;
	};
	"-entryType" = {
	    NSCell = NSCell;
	};
	"-errorAction" = {
	    NSMatrix = NSMatrix;
	    NSTextField = NSTextField;
	};
	"-eventNumber" = {
	    NSEvent = NSEvent;
	};
	"-eventRef" = {
	    NSEvent = NSEvent;
	};
	"-expandItem:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-expandItem:expandChildren:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-exposedBindings" = {
	    "NSObject(NSKeyValueBindingCreation)" = NSKeyValueBinding;
	};
	"-extendPowerOffBy:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-familyName" = {
	    NSFont = NSFont;
	};
	"-fax:" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-fetch:" = {
	    NSObjectController = NSObjectController;
	};
	"-fetchPredicate" = {
	    NSObjectController = NSObjectController;
	};
	"-fetchWithRequest:merge:error:" = {
	    NSObjectController = NSObjectController;
	};
	"-fieldEditor:forObject:" = {
	    NSWindow = NSWindow;
	};
	"-fileAttributesToWriteToFile:ofType:saveOperation:" = {
	    NSDocument = NSDocument;
	};
	"-fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:" = {
	    NSDocument = NSDocument;
	};
	"-fileExtensionsFromType:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-fileModificationDate" = {
	    NSDocument = NSDocument;
	};
	"-fileName" = {
	    NSDocument = NSDocument;
	};
	"-fileNameExtensionForType:saveOperation:" = {
	    NSDocument = NSDocument;
	};
	"-fileNameExtensionWasHiddenInLastRunSavePanel" = {
	    NSDocument = NSDocument;
	};
	"-fileNameFromRunningSavePanelForSaveOperation:" = {
	    NSDocument = NSDocument;
	};
	"-fileNamesFromRunningOpenPanel" = {
	    NSDocumentController = NSDocumentController;
	};
	"-fileSystemChanged" = {
	    NSWorkspace = NSWorkspace;
	};
	"-fileType" = {
	    NSDocument = NSDocument;
	};
	"-fileTypeFromLastRunSavePanel" = {
	    NSDocument = NSDocument;
	};
	"-fileURL" = {
	    NSDocument = NSDocument;
	};
	"-fileWrapper" = {
	    NSTextAttachment = NSTextAttachment;
	};
	"-fileWrapperFromRange:documentAttributes:error:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-fileWrapperOfType:error:" = {
	    NSDocument = NSDocument;
	};
	"-fileWrapperRepresentationOfType:" = {
	    NSDocument = NSDocument;
	};
	"-filename" = {
	    NSDataLinkManager = NSDataLinkManager;
	    NSSavePanel = NSSavePanel;
	};
	"-filenameExtension:isValidForType:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-filenames" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-fill" = {
	    NSBezierPath = NSBezierPath;
	};
	"-fillColor" = {
	    NSBox = NSBox;
	};
	"-filterPredicate" = {
	    NSArrayController = NSArrayController;
	};
	"-finalWritePrintInfo" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-findApplications" = {
	    NSWorkspace = NSWorkspace;
	};
	"-finishLaunching" = {
	    NSApplication = NSApplication;
	};
	"-firstBaselineOffsetFromTop" = {
	    NSView = NSView;
	};
	"-firstLineHeadIndent" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-firstResponder" = {
	    NSWindow = NSWindow;
	};
	"-firstVisibleColumn" = {
	    NSBrowser = NSBrowser;
	};
	"-fixAttachmentAttributeInRange:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-fixAttributesInRange:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-fixFontAttributeInRange:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-fixParagraphStyleAttributeInRange:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-fixesAttributesLazily" = {
	    NSTextStorage = NSTextStorage;
	};
	"-flagsChanged:" = {
	    NSResponder = NSResponder;
	};
	"-flashScroller" = {
	    NSScroller = NSScroller;
	};
	"-flashScrollers" = {
	    NSScrollView = NSScrollView;
	};
	"-flatness" = {
	    NSBezierPath = NSBezierPath;
	};
	"-floatForKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-floatValue" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-flushBuffer" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-flushBufferedKeyEvents" = {
	    NSResponder = NSResponder;
	};
	"-flushGraphics" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-flushWindow" = {
	    NSWindow = NSWindow;
	};
	"-flushWindowIfNeeded" = {
	    NSWindow = NSWindow;
	};
	"-focusRingType" = {
	    NSCell = NSCell;
	    NSView = NSView;
	};
	"-focusStack" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-focusView" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-font" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSMenuView = NSMenuView;
	    NSTabView = NSTabView;
	    NSText = NSText;
	    "NSTextStorage(Scripting)" = NSTextStorage;
	};
	"-fontAttributes" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-fontAttributesInRange:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-fontDescriptor" = {
	    NSFont = NSFont;
	};
	"-fontDescriptorByAddingAttributes:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-fontDescriptorWithFace:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-fontDescriptorWithFamily:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-fontDescriptorWithMatrix:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-fontDescriptorWithSize:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-fontDescriptorWithSymbolicTraits:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-fontDescriptorsInCollection:" = {
	    NSFontManager = NSFontManager;
	};
	"-fontInfo" = {
	    "NSFont(GNUstep)" = NSFont;
	};
	"-fontManager:willIncludeFont:" = {
	    "NSObject(NSFontManagerDelegate)" = NSFontManager;
	};
	"-fontMenu:" = {
	    NSFontManager = NSFontManager;
	};
	"-fontName" = {
	    NSFont = NSFont;
	};
	"-fontNamed:hasTraits:" = {
	    NSFontManager = NSFontManager;
	};
	"-fontPanel:" = {
	    NSFontManager = NSFontManager;
	};
	"-fontRef" = {
	    "NSFont(GNUstep)" = NSFont;
	};
	"-fontWithFamily:traits:weight:size:" = {
	    NSFontManager = NSFontManager;
	};
	"-foregroundColor" = {
	    "NSTextStorage(Scripting)" = NSTextStorage;
	};
	"-formatter" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-formattingDictionary" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-formattingStringsFilename" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-frame" = {
	    NSScreen = NSScreen;
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-frameAutosaveName" = {
	    NSWindow = NSWindow;
	};
	"-frameCenterRotation" = {
	    NSView = NSView;
	};
	"-frameForItemAtIndex:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-frameOfCellAtColumn:row:" = {
	    NSTableView = NSTableView;
	};
	"-frameOfColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-frameOfInsideOfColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-frameOfOutlineCellAtRow:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-frameRectForContentRect:" = {
	    NSWindow = NSWindow;
	};
	"-frameRotation" = {
	    NSView = NSView;
	};
	"-fullPathForApplication:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-gState" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-getAdvancements:forGlyphs:count:" = {
	    NSFont = NSFont;
	};
	"-getAdvancements:forPackedGlyphs:count:" = {
	    NSFont = NSFont;
	};
	"-getBestAppInRole:forExtension:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-getBestAppInRole:forScheme:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-getBestIconForExtension:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-getBitmapDataPlanes:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-getBoundingRects:forGlyphs:count:" = {
	    NSFont = NSFont;
	};
	"-getComponents:" = {
	    NSColor = NSColor;
	};
	"-getCompression:factor:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-getCyan:magenta:yellow:black:alpha:" = {
	    NSColor = NSColor;
	};
	"-getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-getHue:saturation:brightness:alpha:" = {
	    NSColor = NSColor;
	};
	"-getInfoForFile:application:type:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-getLineDash:count:phase:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-getLink:manager:isMultiple:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"-getMatrix:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-getNumberOfRows:columns:" = {
	    NSMatrix = NSMatrix;
	};
	"-getPeriodicDelay:interval:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSCell = NSCell;
	};
	"-getPixel:atX:y:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-getRectsBeingDrawn:count:" = {
	    NSView = NSView;
	};
	"-getRectsExposedDuringLiveResize:count:" = {
	    NSView = NSView;
	};
	"-getRed:green:blue:alpha:" = {
	    NSColor = NSColor;
	};
	"-getRow:column:forPoint:" = {
	    NSMatrix = NSMatrix;
	};
	"-getRow:column:ofCell:" = {
	    NSMatrix = NSMatrix;
	};
	"-getValues:forAttribute:forVirtualScreen:" = {
	    NSOpenGLPixelFormat = NSOpenGL;
	};
	"-getValues:forParameter:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-getWhite:alpha:" = {
	    NSColor = NSColor;
	};
	"-glyphIsEncoded:" = {
	    NSFont = NSFont;
	};
	"-glyphPacking" = {
	    NSFont = NSFont;
	};
	"-glyphWithName:" = {
	    NSFont = NSFont;
	};
	"-gotoBeginning:" = {
	    NSMovieView = NSMovieView;
	};
	"-gotoEnd:" = {
	    NSMovieView = NSMovieView;
	};
	"-gotoPosterFrame:" = {
	    NSMovieView = NSMovieView;
	};
	"-gradientType" = {
	    NSButtonCell = NSButtonCell;
	};
	"-graphicsContext" = {
	    NSWindow = NSWindow;
	};
	"-graphicsPort" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-greenComponent" = {
	    NSColor = NSColor;
	};
	"-gridColor" = {
	    NSTableView = NSTableView;
	};
	"-gridStyleMask" = {
	    NSTableView = NSTableView;
	};
	"-guessesForWord:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-hasAlpha" = {
	    NSImageRep = NSImageRep;
	};
	"-hasDynamicDepthLimit" = {
	    NSWindow = NSWindow;
	};
	"-hasEditedDocuments" = {
	    NSDocumentController = NSDocumentController;
	};
	"-hasHorizontalRuler" = {
	    NSScrollView = NSScrollView;
	};
	"-hasHorizontalScroller" = {
	    NSBrowser = NSBrowser;
	    NSScrollView = NSScrollView;
	};
	"-hasShadow" = {
	    NSWindow = NSWindow;
	};
	"-hasSubmenu" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-hasUnappliedChanges" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-hasUnautosavedChanges" = {
	    NSDocument = NSDocument;
	};
	"-hasUndoManager" = {
	    NSDocument = NSDocument;
	};
	"-hasValidObjectValue" = {
	    NSCell = NSCell;
	};
	"-hasVerticalRuler" = {
	    NSScrollView = NSScrollView;
	};
	"-hasVerticalScroller" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSScrollView = NSScrollView;
	};
	"-headIndent" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-headerCell" = {
	    NSTableColumn = NSTableColumn;
	};
	"-headerLevel" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-headerRectOfColumn:" = {
	    NSTableHeaderView = NSTableHeaderView;
	};
	"-headerToolTip" = {
	    NSTableColumn = NSTableColumn;
	};
	"-headerView" = {
	    NSTableView = NSTableView;
	};
	"-heightAdjustLimit" = {
	    NSView = NSView;
	};
	"-heightTracksTextView" = {
	    NSTextContainer = NSTextContainer;
	};
	"-helpAnchor" = {
	    NSAlert = NSAlert;
	    NSPrintPanel = NSPrintPanel;
	};
	"-helpDirectory" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"-helpFile" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"-helpRequested:" = {
	    NSMenu = NSMenu;
	    NSResponder = NSResponder;
	};
	"-hide:" = {
	    NSApplication = NSApplication;
	};
	"-hideOtherApplications" = {
	    NSWorkspace = NSWorkspace;
	};
	"-hideOtherApplications:" = {
	    NSApplication = NSApplication;
	};
	"-hidesOnDeactivate" = {
	    NSWindow = NSWindow;
	};
	"-highlight:" = {
	    NSButton = NSButton;
	    NSScroller = NSScroller;
	};
	"-highlight:withFrame:inView:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	    NSCell = NSCell;
	};
	"-highlightCell:atRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-highlightColorInView:" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"-highlightColorWithFrame:inView:" = {
	    NSCell = NSCell;
	};
	"-highlightSelectionInClipRect:" = {
	    NSTableView = NSTableView;
	};
	"-highlightWithLevel:" = {
	    NSColor = NSColor;
	};
	"-highlightedItemIndex" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-highlightedTableColumn" = {
	    NSTableView = NSTableView;
	};
	"-highlightsBy" = {
	    NSButtonCell = NSButtonCell;
	};
	"-hitPart" = {
	    NSScroller = NSScroller;
	};
	"-hitTest:" = {
	    NSView = NSView;
	};
	"-hitTestForEvent:inRect:ofView:" = {
	    NSCell = NSCell;
	};
	"-horizontalEdgePadding" = {
	    NSMenuView = NSMenuView;
	};
	"-horizontalLineScroll" = {
	    NSScrollView = NSScrollView;
	};
	"-horizontalPageScroll" = {
	    NSScrollView = NSScrollView;
	};
	"-horizontalPagination" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-horizontalRulerView" = {
	    NSScrollView = NSScrollView;
	};
	"-horizontalScrollElasticity" = {
	    NSScrollView = NSScrollView;
	};
	"-horizontalScroller" = {
	    NSScrollView = NSScrollView;
	};
	"-host" = {
	    NSPrinter = NSPrinter;
	};
	"-hotSpot" = {
	    NSCursor = NSCursor;
	};
	"-hueComponent" = {
	    NSColor = NSColor;
	};
	"-hyphenationFactor" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-icon" = {
	    NSAlert = NSAlert;
	    "NSFileWrapper(NSExtensions)" = NSFileWrapperExtensions;
	};
	"-iconForFile:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-iconForFileType:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-iconForFiles:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-iconWindow" = {
	    "NSObject(NSServicesRequests)" = NSApplication;
	};
	"-identifier" = {
	    NSTabViewItem = NSTabViewItem;
	    NSTableColumn = NSTableColumn;
	};
	"-ignoreSpelling:" = {
	    NSText = NSText;
	};
	"-ignoreWord:inSpellDocumentWithTag:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-ignoredWordsInSpellDocumentWithTag:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-ignoresMouseEvents" = {
	    NSWindow = NSWindow;
	};
	"-ignoresMultiClick" = {
	    NSControl = NSControl;
	};
	"-image" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSCell = NSCell;
	    NSCursor = NSCursor;
	    NSImageView = NSImageView;
	    NSRulerMarker = NSRulerMarker;
	    NSSlider = NSSlider;
	};
	"-imageAlignment" = {
	    NSImageCell = NSImageCell;
	    NSImageView = NSImageView;
	};
	"-imageAndTitleOffset" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-imageAndTitleWidth" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-imageDidNotDraw:inRect:" = {
	    "(GSImageDelegateProtocol)" = NSImage;
	};
	"-imageDimsWhenDisabled" = {
	    NSButtonCell = NSButtonCell;
	};
	"-imageFrameStyle" = {
	    NSImageCell = NSImageCell;
	    NSImageView = NSImageView;
	};
	"-imageInterpolation" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-imageOrigin" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-imagePosition" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-imageRectForBounds:" = {
	    NSCell = NSCell;
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-imageRectForPaper:" = {
	    NSPrinter = NSPrinter;
	};
	"-imageRectInRuler" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-imageScaling" = {
	    NSButtonCell = NSButtonCell;
	    NSImageCell = NSImageCell;
	    NSImageView = NSImageView;
	};
	"-imageView" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-imageWidth" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-imageablePageBounds" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-importFile:at:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-importsGraphics" = {
	    NSCell = NSCell;
	    NSText = NSText;
	    NSTextField = NSTextField;
	};
	"-inLiveResize" = {
	    NSView = NSView;
	};
	"-increment" = {
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-incrementBy:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-incrementalLoadFromData:complete:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-indent:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-indentationLevel" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-indentationMarkerFollowsCell" = {
	    NSOutlineView = NSOutlineView;
	};
	"-indentationPerLevel" = {
	    NSOutlineView = NSOutlineView;
	};
	"-indexOfCellWithTag:" = {
	    NSForm = NSForm;
	};
	"-indexOfItem:" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-indexOfItemAtPoint:" = {
	    NSMenuView = NSMenuView;
	};
	"-indexOfItemWithObjectValue:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-indexOfItemWithRepresentedObject:" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-indexOfItemWithSubmenu:" = {
	    NSMenu = NSMenu;
	};
	"-indexOfItemWithTag:" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-indexOfItemWithTarget:andAction:" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-indexOfItemWithTitle:" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-indexOfSelectedItem" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSForm = NSForm;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-indexOfTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-indexOfTabViewItemWithIdentifier:" = {
	    NSTabView = NSTabView;
	};
	"-indexOfTickMarkAtPoint:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-indexPathForItem:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-indexPathForItemAtPoint:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-indexPathsForVisibleItems" = {
	    NSCollectionView = NSCollectionView;
	};
	"-indexPathsForVisibleSupplementaryElementsOfKind:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-indicatorImageInTableColumn:" = {
	    NSTableView = NSTableView;
	};
	"-infoForBinding:" = {
	    "NSObject(NSKeyValueBindingCreation)" = NSKeyValueBinding;
	};
	"-infoForExtension:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-infoForScheme:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-informativeText" = {
	    NSAlert = NSAlert;
	};
	"-init" = {
	    NSDocument = NSDocument;
	};
	"-initAsTearOff" = {
	    NSMenuView = NSMenuView;
	};
	"-initByReferencingFile:" = {
	    NSImage = NSImage;
	};
	"-initEPSOperationWithView:insideRect:toData:printInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-initForIncrementalLoad" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-initForURL:withContentsOfURL:ofType:error:" = {
	    NSDocument = NSDocument;
	};
	"-initImageCell:" = {
	    NSCell = NSCell;
	};
	"-initLinkedToFile:" = {
	    NSDataLink = NSDataLink;
	};
	"-initLinkedToSourceSelection:managedBy:supportingTypes:" = {
	    NSDataLink = NSDataLink;
	};
	"-initTextCell:" = {
	    NSCell = NSCell;
	};
	"-initTextCell:pullsDown:" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-initWithAttributes:" = {
	    NSOpenGLPixelFormat = NSOpenGL;
	};
	"-initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-initWithBitmapHandle:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	    NSImage = NSImage;
	};
	"-initWithCGLContextObj:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-initWithCoder:" = {
	    NSColorList = NSColorList;
	    NSColorWell = NSColorWell;
	    NSPrinter = NSPrinter;
	    NSResponder = NSResponder;
	};
	"-initWithCompoundTypes:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-initWithContainerSize:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-initWithContent:" = {
	    NSObjectController = NSObjectController;
	};
	"-initWithContentRect:styleMask:backing:defer:" = {
	    NSWindow = NSWindow;
	};
	"-initWithContentRect:styleMask:backing:defer:screen:" = {
	    NSWindow = NSWindow;
	};
	"-initWithContentSize:preferredEdge:" = {
	    NSDrawer = NSDrawer;
	};
	"-initWithContentsOfFile:" = {
	    NSDataLink = NSDataLink;
	    NSImage = NSImage;
	};
	"-initWithContentsOfFile:byReference:" = {
	    NSSound = NSSound;
	};
	"-initWithContentsOfFile:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-initWithContentsOfURL:" = {
	    NSImage = NSImage;
	    NSNib = NSNib;
	};
	"-initWithContentsOfURL:byReference:" = {
	    NSSound = NSSound;
	};
	"-initWithContentsOfURL:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-initWithContentsOfURL:ofType:error:" = {
	    NSDocument = NSDocument;
	};
	"-initWithContextInfo:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-initWithData:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	    NSEPSImageRep = NSEPSImageRep;
	    NSImage = NSImage;
	    NSSound = NSSound;
	};
	"-initWithData:options:documentAttributes:error:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithDefaults:initialValues:" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-initWithDelegate:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-initWithDelegate:fromFile:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-initWithDelegate:name:" = {
	    NSInputServer = NSInputServer;
	};
	"-initWithDescriptionData:" = {
	    NSSelection = NSSelection;
	};
	"-initWithDictionary:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-initWithDocFormat:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithDrawSelector:delegate:" = {
	    NSCustomImageRep = NSCustomImageRep;
	};
	"-initWithFileWrapper:" = {
	    NSTextAttachment = NSTextAttachment;
	};
	"-initWithFocusedViewRect:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-initWithFontAttributes:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-initWithFormat:shareContext:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-initWithFrame:" = {
	    NSMatrix = NSMatrix;
	    NSTextView = NSTextView;
	    NSView = NSView;
	};
	"-initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:" = {
	    NSMatrix = NSMatrix;
	};
	"-initWithFrame:mode:prototype:numberOfRows:numberOfColumns:" = {
	    NSMatrix = NSMatrix;
	};
	"-initWithFrame:pixelFormat:" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-initWithFrame:pullsDown:" = {
	    NSPopUpButton = NSPopUpButton;
	};
	"-initWithFrame:textContainer:" = {
	    NSTextView = NSTextView;
	};
	"-initWithGraphicsPort:flipped:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-initWithHTML:baseURL:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithHTML:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithHTML:options:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithIconHandle:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	    NSImage = NSImage;
	};
	"-initWithIdentifier:" = {
	    NSTabViewItem = NSTabViewItem;
	    NSTableColumn = NSTableColumn;
	};
	"-initWithImage:" = {
	    NSCursor = NSCursor;
	};
	"-initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:" = {
	    NSCursor = NSCursor;
	};
	"-initWithImage:hotSpot:" = {
	    NSCursor = NSCursor;
	};
	"-initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-initWithLeftExpressions:rightExpressions:modifier:operators:options:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-initWithMovie:" = {
	    NSMovie = NSMovie;
	};
	"-initWithName:" = {
	    NSColorList = NSColorList;
	};
	"-initWithName:fromFile:" = {
	    NSColorList = NSColorList;
	};
	"-initWithName:withType:withHost:withNote:" = {
	    "NSPrinter(Private)" = NSPrinter;
	};
	"-initWithNibData:bundle:" = {
	    NSNib = NSNib;
	};
	"-initWithNibNamed:bundle:" = {
	    NSNib = NSNib;
	};
	"-initWithPasteboard:" = {
	    NSDataLink = NSDataLink;
	    NSImage = NSImage;
	    NSMovie = NSMovie;
	    NSSelection = NSSelection;
	    NSSound = NSSound;
	};
	"-initWithPasteboardPropertyList:ofType:" = {
	    "NSObject(NSPasteboardReading)" = NSPasteboard;
	};
	"-initWithPath:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithPickerMask:colorPanel:" = {
	    NSColorPicker = NSColorPicker;
	};
	"-initWithRTF:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithRTFD:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithRTFDFileWrapper:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithRulerView:markerLocation:image:imageOrigin:" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-initWithSize:" = {
	    NSImage = NSImage;
	};
	"-initWithSize:depth:separate:alpha:" = {
	    NSCachedImageRep = NSCachedImageRep;
	};
	"-initWithSize:pixelsWide:pixelsHigh:depth:separate:alpha:" = {
	    NSCachedImageRep = NSCachedImageRep;
	};
	"-initWithTextAlignment:location:options:" = {
	    NSTextTab = NSParagraphStyle;
	};
	"-initWithTitle:" = {
	    NSMenu = NSMenu;
	};
	"-initWithTitle:action:keyEquivalent:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-initWithType:error:" = {
	    NSDocument = NSDocument;
	};
	"-initWithType:location:" = {
	    NSTextTab = NSParagraphStyle;
	};
	"-initWithURL:byReference:" = {
	    NSMovie = NSMovie;
	};
	"-initWithURL:documentAttributes:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithURL:options:documentAttributes:error:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-initWithView:insideRect:toData:printInfo:" = {
	    "NSPrintOperation(Private)" = NSPrintOperation;
	};
	"-initWithView:printInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-initWithVoice:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-initWithWindow:" = {
	    NSWindowController = NSWindowController;
	};
	"-initWithWindow:rect:" = {
	    NSCachedImageRep = NSCachedImageRep;
	};
	"-initWithWindowNibName:" = {
	    NSWindowController = NSWindowController;
	};
	"-initWithWindowNibName:owner:" = {
	    NSWindowController = NSWindowController;
	};
	"-initWithWindowNibPath:owner:" = {
	    NSWindowController = NSWindowController;
	};
	"-initWithWindowRef:" = {
	    NSWindow = NSWindow;
	};
	"-initialFirstResponder" = {
	    NSTabViewItem = NSTabViewItem;
	    NSWindow = NSWindow;
	};
	"-initialValues" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-initiatesDrag" = {
	    "NSImageView(GNUstep)" = NSImageView;
	};
	"-innerRect" = {
	    NSMenuView = NSMenuView;
	};
	"-inputClientBecomeActive:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-inputClientDisabled:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-inputClientEnabled:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-inputClientResignActive:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-insert:" = {
	    NSArrayController = NSArrayController;
	};
	"-insertBacktab:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertColor:key:atIndex:" = {
	    NSColorList = NSColorList;
	};
	"-insertColumn:" = {
	    NSMatrix = NSMatrix;
	};
	"-insertColumn:withCells:" = {
	    NSMatrix = NSMatrix;
	};
	"-insertCompletion:forPartialWordRange:movement:isFinal:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-insertContainerBreak:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertEntry:atIndex:" = {
	    NSForm = NSForm;
	};
	"-insertItem:atIndex:" = {
	    NSMenu = NSMenu;
	};
	"-insertItemWithObjectValue:atIndex:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-insertItemWithTitle:action:keyEquivalent:atIndex:" = {
	    NSMenu = NSMenu;
	};
	"-insertItemWithTitle:atIndex:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-insertItemsAtIndexPaths:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-insertLineBreak:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertNewButtonImage:in:" = {
	    NSColorPicker = NSColorPicker;
	};
	"-insertNewline:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertNewlineIgnoringFieldEditor:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertObject:atArrangedObjectIndex:" = {
	    NSArrayController = NSArrayController;
	};
	"-insertObjects:atArrangedObjectIndexes:" = {
	    NSArrayController = NSArrayController;
	};
	"-insertParagraphSeparator:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertRow:" = {
	    NSMatrix = NSMatrix;
	};
	"-insertRow:withCells:" = {
	    NSMatrix = NSMatrix;
	};
	"-insertRowAtIndex:withType:asSubrowOfRow:animate:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-insertRowsAtIndexes:withAnimation:" = {
	    NSTableView = NSTableView;
	};
	"-insertSections:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-insertTab:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertTabIgnoringFieldEditor:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-insertTabViewItem:atIndex:" = {
	    NSTabView = NSTabView;
	};
	"-insertText:" = {
	    NSResponder = NSResponder;
	};
	"-insertText:client:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-insertionPointColor" = {
	    NSTextView = NSTextView;
	};
	"-instantiateNibWithExternalNameTable:" = {
	    NSNib = NSNib;
	};
	"-instantiateNibWithExternalNameTable:withZone:" = {
	    NSNib = NSNib;
	};
	"-instantiateNibWithOwner:topLevelObjects:" = {
	    NSNib = NSNib;
	};
	"-instantiateWithOwner:topLevelObjects:" = {
	    NSNib = NSNib;
	};
	"-intForKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-intValue" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-integerValue" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-interactsWithUser" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-intercellSpacing" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-interfaceStyle" = {
	    NSResponder = NSResponder;
	};
	"-interpretKeyEvents:" = {
	    NSResponder = NSResponder;
	};
	"-intrinsicContentSize" = {
	    NSView = NSView;
	};
	"-invalidateAttributesInRange:" = {
	    NSTextStorage = NSTextStorage;
	};
	"-invalidateCursorRectsForView:" = {
	    NSWindow = NSWindow;
	};
	"-invalidateShadow" = {
	    NSWindow = NSWindow;
	};
	"-invalidateTextContainerOrigin" = {
	    NSTextView = NSTextView;
	};
	"-inverse" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-isARepeat" = {
	    NSEvent = NSEvent;
	};
	"-isActive" = {
	    NSApplication = NSApplication;
	    NSColorWell = NSColorWell;
	};
	"-isAlternate" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-isAttached" = {
	    NSMenu = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-isAutodisplay" = {
	    NSWindow = NSWindow;
	};
	"-isAutoscroll" = {
	    NSMatrix = NSMatrix;
	};
	"-isBaseFont" = {
	    NSFont = NSFont;
	};
	"-isBezeled" = {
	    NSCell = NSCell;
	    NSDatePicker = NSDatePicker;
	    NSProgressIndicator = NSProgressIndicator;
	    NSTextField = NSTextField;
	};
	"-isBordered" = {
	    NSButton = NSButton;
	    NSCell = NSCell;
	    NSColorWell = NSColorWell;
	    NSDatePicker = NSDatePicker;
	    NSTextField = NSTextField;
	};
	"-isButtonBordered" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-isCachedSeparately" = {
	    NSImage = NSImage;
	};
	"-isColor" = {
	    NSPrinter = NSPrinter;
	};
	"-isColumnSelected:" = {
	    NSTableView = NSTableView;
	};
	"-isContinuous" = {
	    NSCell = NSCell;
	    NSColorPanel = NSColorPanel;
	    NSControl = NSControl;
	};
	"-isContinuousSpellCheckingEnabled" = {
	    NSTextView = NSTextView;
	};
	"-isControllerVisible" = {
	    NSMovieView = NSMovieView;
	};
	"-isCopyingOperation" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-isDataRetained" = {
	    NSImage = NSImage;
	};
	"-isDescendantOf:" = {
	    NSView = NSView;
	};
	"-isDisplayedWhenStopped" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-isDocumentEdited" = {
	    NSDocument = NSDocument;
	    NSWindow = NSWindow;
	};
	"-isDragging" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-isDrawingToScreen" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-isEPSOperation" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-isEditable" = {
	    NSCell = NSCell;
	    NSColorList = NSColorList;
	    NSImageView = NSImageView;
	    NSMovieView = NSMovieView;
	    NSObjectController = NSObjectController;
	    NSRuleEditor = NSRuleEditor;
	    NSTableColumn = NSTableColumn;
	    NSText = NSText;
	    NSTextField = NSTextField;
	};
	"-isEdited" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-isEditing" = {
	    NSController = NSController;
	};
	"-isEmpty" = {
	    NSBezierPath = NSBezierPath;
	};
	"-isEnabled" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSFontManager = NSFontManager;
	    NSFontPanel = NSFontPanel;
	};
	"-isEnteringProximity" = {
	    NSEvent = NSEvent;
	};
	"-isEntryAcceptable:" = {
	    NSCell = NSCell;
	};
	"-isExcludedFromWindowsMenu" = {
	    NSWindow = NSWindow;
	};
	"-isExpandable:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-isExpanded" = {
	    NSSavePanel = NSSavePanel;
	};
	"-isExtensionHidden" = {
	    NSSavePanel = NSSavePanel;
	};
	"-isFieldEditor" = {
	    NSText = NSText;
	};
	"-isFilePackageAtPath:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-isFixedPitch" = {
	    NSFont = NSFont;
	};
	"-isFlipped" = {
	    NSGraphicsContext = NSGraphicsContext;
	    NSImage = NSImage;
	    NSView = NSView;
	};
	"-isFloatingPanel" = {
	    NSPanel = NSPanel;
	};
	"-isFlushWindowDisabled" = {
	    NSWindow = NSWindow;
	};
	"-isFontAvailable:" = {
	    NSPrinter = NSPrinter;
	};
	"-isHidden" = {
	    NSApplication = NSApplication;
	    NSTableColumn = NSTableColumn;
	    NSView = NSView;
	};
	"-isHiddenOrHasHiddenAncestor" = {
	    NSView = NSView;
	};
	"-isHighlighted" = {
	    NSCell = NSCell;
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-isHorizontal" = {
	    NSMenuView = NSMenuView;
	};
	"-isHorizontallyCentered" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-isHorizontallyResizable" = {
	    NSText = NSText;
	};
	"-isIndeterminate" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-isItemExpanded:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-isKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-isKeyWindow" = {
	    NSWindow = NSWindow;
	};
	"-isLeaf" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"-isLoaded" = {
	    NSBrowser = NSBrowser;
	    NSBrowserCell = NSBrowserCell;
	};
	"-isMainWindow" = {
	    NSWindow = NSWindow;
	};
	"-isMiniaturized" = {
	    NSWindow = NSWindow;
	};
	"-isMovable" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-isMovableByWindowBackground" = {
	    NSWindow = NSWindow;
	};
	"-isMultiple" = {
	    NSFontManager = NSFontManager;
	};
	"-isMuted" = {
	    NSMovieView = NSMovieView;
	};
	"-isOneShot" = {
	    NSWindow = NSWindow;
	};
	"-isOpaque" = {
	    NSCell = NSCell;
	    NSImageRep = NSImageRep;
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-isOutputStackInReverseOrder" = {
	    NSPrinter = NSPrinter;
	};
	"-isPaneSplitter" = {
	    NSSplitView = NSSplitView;
	};
	"-isPartlyOffScreen" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-isPlanar" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-isPlaying" = {
	    NSMovieView = NSMovieView;
	    NSSound = NSSound;
	};
	"-isReleasedWhenClosed" = {
	    NSWindow = NSWindow;
	};
	"-isRemovable" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-isResizable" = {
	    NSTableColumn = NSTableColumn;
	};
	"-isRichText" = {
	    NSText = NSText;
	};
	"-isRotated" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-isRotatedFromBase" = {
	    NSView = NSView;
	};
	"-isRotatedOrScaledFromBase" = {
	    NSView = NSView;
	};
	"-isRowSelected:" = {
	    NSTableView = NSTableView;
	};
	"-isRulerVisible" = {
	    NSText = NSText;
	};
	"-isRunning" = {
	    NSApplication = NSApplication;
	};
	"-isScrollable" = {
	    NSCell = NSCell;
	};
	"-isSelectable" = {
	    NSCell = NSCell;
	    NSCollectionView = NSCollectionView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	};
	"-isSelected" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-isSelectionByRect" = {
	    NSMatrix = NSMatrix;
	};
	"-isSeparatorItem" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-isSetOnMouseEntered" = {
	    NSCursor = NSCursor;
	};
	"-isSetOnMouseExited" = {
	    NSCursor = NSCursor;
	};
	"-isSimpleRectangularTextContainer" = {
	    NSTextContainer = NSTextContainer;
	};
	"-isSpeaking" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-isSubviewCollapsed:" = {
	    NSSplitView = NSSplitView;
	};
	"-isTitled" = {
	    NSBrowser = NSBrowser;
	};
	"-isTornOff" = {
	    NSMenu = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-isTransient" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-isTransparent" = {
	    NSBox = NSBox;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-isValid" = {
	    NSImage = NSImage;
	};
	"-isVertical" = {
	    "NSProgressIndicator(GNUstepExtensions)" = NSProgressIndicator;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	    NSSplitView = NSSplitView;
	};
	"-isVerticallyCentered" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-isVerticallyResizable" = {
	    NSText = NSText;
	};
	"-isVisible" = {
	    NSWindow = NSWindow;
	};
	"-isWellKnownSelection" = {
	    NSSelection = NSSelection;
	};
	"-isWindowLoaded" = {
	    NSWindowController = NSWindowController;
	};
	"-isZoomed" = {
	    NSWindow = NSWindow;
	};
	"-italicAngle" = {
	    NSFont = NSFont;
	};
	"-itemAdded:" = {
	    NSMenuView = NSMenuView;
	};
	"-itemArray" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-itemAtIndex:" = {
	    NSCollectionView = NSCollectionView;
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-itemAtIndexPath:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-itemAtRow:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-itemChanged:" = {
	    NSMenu = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-itemHeight" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-itemNumberInTextList:atIndex:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-itemObjectValueAtIndex:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-itemPrototype" = {
	    NSCollectionView = NSCollectionView;
	};
	"-itemRemoved:" = {
	    NSMenuView = NSMenuView;
	};
	"-itemTitleAtIndex:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-itemTitles" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-itemWithTag:" = {
	    NSMenu = NSMenu;
	};
	"-itemWithTitle:" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-jobDisposition" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-jobStyleHint" = {
	    NSPrintOperation = NSPrintOperation;
	    NSPrintPanel = NSPrintPanel;
	};
	"-keepBackupFile" = {
	    NSDocument = NSDocument;
	};
	"-keyCell" = {
	    NSMatrix = NSMatrix;
	};
	"-keyCode" = {
	    NSEvent = NSEvent;
	};
	"-keyDown:" = {
	    NSResponder = NSResponder;
	    NSWindow = NSWindow;
	};
	"-keyEquivalent" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSCell = NSCell;
	};
	"-keyEquivalentFont" = {
	    NSButtonCell = NSButtonCell;
	};
	"-keyEquivalentModifierMask" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-keyEquivalentOffset" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-keyEquivalentRectForBounds:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-keyEquivalentWidth" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuItemCell = NSMenuItemCell;
	    NSMenuView = NSMenuView;
	};
	"-keyPathsForValuesAffectingPreview" = {
	    "(NSPrintPanelAccessorizing)" = NSPrintPanel;
	};
	"-keyUp:" = {
	    NSResponder = NSResponder;
	};
	"-keyViewSelectionDirection" = {
	    NSWindow = NSWindow;
	};
	"-keyWindow" = {
	    NSApplication = NSApplication;
	};
	"-knobProportion" = {
	    NSScroller = NSScroller;
	};
	"-knobRectFlipped:" = {
	    NSSliderCell = NSSliderCell;
	};
	"-knobStyle" = {
	    NSScroller = NSScroller;
	};
	"-knobThickness" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-knowsPageRange:" = {
	    NSView = NSView;
	};
	"-knowsPagesFirst:last:" = {
	    NSView = NSView;
	};
	"-label" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-language" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-languageLevel" = {
	    NSPrinter = NSPrinter;
	};
	"-lastColumn" = {
	    NSBrowser = NSBrowser;
	};
	"-lastComponentOfFileName" = {
	    NSDocument = NSDocument;
	};
	"-lastItem" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-lastUpdateTime" = {
	    NSDataLink = NSDataLink;
	};
	"-lastVisibleColumn" = {
	    NSBrowser = NSBrowser;
	};
	"-launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-launchApplication:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-launchApplication:showIcon:autolaunch:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-launchedApplications" = {
	    NSWorkspace = NSWorkspace;
	};
	"-layerContentsPlacement" = {
	    NSView = NSView;
	};
	"-layerContentsRedrawPolicy" = {
	    NSView = NSView;
	};
	"-layout" = {
	    NSView = NSView;
	};
	"-layoutAttributesForItemAtIndexPath:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-layoutAttributesForSupplementaryElementOfKind:atIndexPath:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-layoutManager" = {
	    NSTextContainer = NSTextContainer;
	    NSTextView = NSTextView;
	};
	"-layoutManagers" = {
	    NSTextStorage = NSTextStorage;
	};
	"-layoutSubtreeIfNeeded" = {
	    NSView = NSView;
	};
	"-leading" = {
	    NSFont = NSFont;
	};
	"-leadingOffset" = {
	    NSDrawer = NSDrawer;
	};
	"-leftExpressions" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-leftMargin" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-level" = {
	    NSWindow = NSWindow;
	};
	"-levelForItem:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-levelForRow:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-lineBreakBeforeIndex:withinRange:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-lineBreakByHyphenatingBeforeIndex:withinRange:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-lineBreakMode" = {
	    NSCell = NSCell;
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-lineCapStyle" = {
	    NSBezierPath = NSBezierPath;
	};
	"-lineFragmentPadding" = {
	    NSTextContainer = NSTextContainer;
	};
	"-lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-lineHeightMultiple" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-lineJoinStyle" = {
	    NSBezierPath = NSBezierPath;
	};
	"-lineScroll" = {
	    NSScrollView = NSScrollView;
	};
	"-lineSpacing" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-lineToPoint:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-lineWidth" = {
	    NSBezierPath = NSBezierPath;
	};
	"-linkNumber" = {
	    NSDataLink = NSDataLink;
	};
	"-linkTextAttributes" = {
	    NSTextView = NSTextView;
	};
	"-loadColumnZero" = {
	    NSBrowser = NSBrowser;
	};
	"-loadDataRepresentation:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-loadFileWrapperRepresentation:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-loadWindow" = {
	    NSWindowController = NSWindowController;
	};
	"-loadedCellAtRow:column:" = {
	    NSBrowser = NSBrowser;
	};
	"-locale" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-localizedCatalogNameComponent" = {
	    NSColor = NSColor;
	};
	"-localizedColorNameComponent" = {
	    NSColor = NSColor;
	};
	"-localizedDescriptionForType:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-localizedNameForFamily:face:" = {
	    NSFontManager = NSFontManager;
	};
	"-localizedPaperName" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-localizedSummaryItems" = {
	    "(NSPrintPanelAccessorizing)" = NSPrintPanel;
	};
	"-locateApplicationBinary:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-location" = {
	    NSTextTab = NSParagraphStyle;
	};
	"-locationForSubmenu:" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenu = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-locationInWindow" = {
	    NSEvent = NSEvent;
	};
	"-locationOfPrintRect:" = {
	    NSView = NSView;
	};
	"-lockFocus" = {
	    NSImage = NSImage;
	    NSView = NSView;
	};
	"-lockFocusIfCanDraw" = {
	    NSView = NSView;
	};
	"-lockFocusIfCanDrawInContext:" = {
	    NSView = NSView;
	};
	"-lockFocusInRect:" = {
	    NSView = NSView;
	};
	"-lockFocusOnRepresentation:" = {
	    NSImage = NSImage;
	};
	"-lockFocusView:inRect:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-loopMode" = {
	    NSMovieView = NSMovieView;
	};
	"-loops" = {
	    NSSound = NSSound;
	};
	"-loosenKerning:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-lowerBaseline:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-lowercaseWord:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-magentaComponent" = {
	    NSColor = NSColor;
	};
	"-mainMenu" = {
	    NSApplication = NSApplication;
	};
	"-mainWindow" = {
	    NSApplication = NSApplication;
	};
	"-makeCellAtRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-makeCurrentContext" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-makeDocumentForURL:withContentsOfURL:ofType:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-makeDocumentWithContentsOfFile:ofType:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-makeDocumentWithContentsOfURL:ofType:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-makeDocumentWithContentsOfURL:ofType:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-makeFirstResponder:" = {
	    NSWindow = NSWindow;
	};
	"-makeIdentityMatrix" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-makeItemWithIdentifier:forIndexPath:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-makeKeyAndOrderFront:" = {
	    NSWindow = NSWindow;
	};
	"-makeKeyWindow" = {
	    NSWindow = NSWindow;
	};
	"-makeMainWindow" = {
	    NSWindow = NSWindow;
	};
	"-makeSupplementaryViewOfKind:withIdentifier:forIndexPath:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-makeUntitledDocumentOfType:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-makeUntitledDocumentOfType:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-makeViewWithIdentifier:owner:" = {
	    NSTableView = NSTableView;
	};
	"-makeWindowControllers" = {
	    NSDocument = NSDocument;
	};
	"-makeWindowsPerform:inOrder:" = {
	    NSApplication = NSApplication;
	};
	"-managedObjectContext" = {
	    NSObjectController = NSObjectController;
	};
	"-manager" = {
	    NSDataLink = NSDataLink;
	};
	"-markedTextAbandoned:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-markedTextAttributes" = {
	    NSTextView = NSTextView;
	};
	"-markedTextSelectionChanged:client:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-markerLocation" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-matchForPredicate:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-matchesOnMultipleResolution" = {
	    NSImage = NSImage;
	};
	"-matchingFontDescriptorWithMandatoryKeys:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-matchingFontDescriptorsWithMandatoryKeys:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-matrix" = {
	    NSFont = NSFont;
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-matrixClass" = {
	    NSBrowser = NSBrowser;
	};
	"-matrixInColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-maxContentSize" = {
	    NSDrawer = NSDrawer;
	};
	"-maxDate" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-maxItemSize" = {
	    NSCollectionView = NSCollectionView;
	};
	"-maxNumberOfColumns" = {
	    NSCollectionView = NSCollectionView;
	};
	"-maxNumberOfRows" = {
	    NSCollectionView = NSCollectionView;
	};
	"-maxPossiblePositionOfDividerAtIndex:" = {
	    NSSplitView = NSSplitView;
	};
	"-maxSize" = {
	    NSText = NSText;
	    NSWindow = NSWindow;
	};
	"-maxValue" = {
	    NSProgressIndicator = NSProgressIndicator;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-maxVisibleColumns" = {
	    NSBrowser = NSBrowser;
	};
	"-maxWidth" = {
	    NSTableColumn = NSTableColumn;
	};
	"-maximumAdvancement" = {
	    NSFont = NSFont;
	};
	"-maximumLineHeight" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-maximumRecentDocumentCount" = {
	    NSDocumentController = NSDocumentController;
	};
	"-menu" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSMenuView = NSMenuView;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	    NSResponder = NSResponder;
	};
	"-menu:updateItem:atIndex:shouldCancel:" = {
	    "(NSMenuDelegate)" = NSMenu;
	    "NSObject(NSMenuDelegate)" = NSMenu;
	};
	"-menu:willHighlightItem:" = {
	    "(NSMenuDelegate)" = NSMenu;
	};
	"-menuBarHeight" = {
	    NSMenu = NSMenu;
	};
	"-menuChangedMessagesEnabled" = {
	    NSMenu = NSMenu;
	};
	"-menuDidClose:" = {
	    "(NSMenuDelegate)" = NSMenu;
	};
	"-menuForEvent:" = {
	    NSView = NSView;
	};
	"-menuForEvent:inRect:ofView:" = {
	    NSCell = NSCell;
	};
	"-menuHasKeyEquivalent:forEvent:target:action:" = {
	    "(NSMenuDelegate)" = NSMenu;
	    "NSObject(NSMenuDelegate)" = NSMenu;
	};
	"-menuItem" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-menuItemCellForItemAtIndex:" = {
	    NSMenuView = NSMenuView;
	};
	"-menuNeedsUpdate:" = {
	    "(NSMenuDelegate)" = NSMenu;
	    "NSObject(NSMenuDelegate)" = NSMenu;
	};
	"-menuRepresentation" = {
	    NSMenu = NSMenu;
	};
	"-menuView" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-menuWillOpen:" = {
	    "(NSMenuDelegate)" = NSMenu;
	};
	"-message" = {
	    NSSavePanel = NSSavePanel;
	};
	"-messageText" = {
	    NSAlert = NSAlert;
	};
	"-methods" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-minColumnWidth" = {
	    NSBrowser = NSBrowser;
	};
	"-minContentSize" = {
	    NSDrawer = NSDrawer;
	};
	"-minDate" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-minItemSize" = {
	    NSCollectionView = NSCollectionView;
	};
	"-minPossiblePositionOfDividerAtIndex:" = {
	    NSSplitView = NSSplitView;
	};
	"-minSize" = {
	    NSText = NSText;
	    NSWindow = NSWindow;
	};
	"-minValue" = {
	    NSProgressIndicator = NSProgressIndicator;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-minWidth" = {
	    NSTableColumn = NSTableColumn;
	};
	"-miniaturize:" = {
	    NSWindow = NSWindow;
	};
	"-miniaturizeAll:" = {
	    NSApplication = NSApplication;
	};
	"-minimumAdvancement" = {
	    NSFont = NSFont;
	};
	"-minimumLineHeight" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-minimumSize" = {
	    NSBox = NSBox;
	    NSTabView = NSTabView;
	};
	"-miniwindowImage" = {
	    NSWindow = NSWindow;
	};
	"-miniwindowTitle" = {
	    NSWindow = NSWindow;
	};
	"-miterLimit" = {
	    NSBezierPath = NSBezierPath;
	};
	"-mixedStateImage" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-mnemonic" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	};
	"-mnemonicLocation" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	};
	"-modalWindow" = {
	    NSApplication = NSApplication;
	};
	"-mode" = {
	    NSColorPanel = NSColorPanel;
	    NSMatrix = NSMatrix;
	};
	"-modifier" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-modifierFlags" = {
	    NSEvent = NSEvent;
	};
	"-modifyFont:" = {
	    NSFontManager = NSFontManager;
	};
	"-modifyFontViaPanel:" = {
	    NSFontManager = NSFontManager;
	};
	"-momentumPhase" = {
	    NSEvent = NSEvent;
	};
	"-mostCompatibleStringEncoding" = {
	    NSFont = NSFont;
	};
	"-mountNewRemovableMedia" = {
	    NSWorkspace = NSWorkspace;
	};
	"-mountedLocalVolumePaths" = {
	    NSWorkspace = NSWorkspace;
	};
	"-mountedRemovableMedia" = {
	    NSWorkspace = NSWorkspace;
	};
	"-mouse:inRect:" = {
	    NSView = NSView;
	};
	"-mouseDown:" = {
	    NSControl = NSControl;
	    NSMatrix = NSMatrix;
	    NSResponder = NSResponder;
	};
	"-mouseDownCanMoveWindow" = {
	    NSView = NSView;
	};
	"-mouseDownFlags" = {
	    NSCell = NSCell;
	    NSMatrix = NSMatrix;
	};
	"-mouseDownOnCharacterIndex:atCoordinate:withModifier:client:" = {
	    "(NSInputServerMouseTracker)" = NSInputServer;
	};
	"-mouseDragged:" = {
	    NSResponder = NSResponder;
	};
	"-mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:" = {
	    "(NSInputServerMouseTracker)" = NSInputServer;
	};
	"-mouseEntered:" = {
	    NSButtonCell = NSButtonCell;
	    NSCursor = NSCursor;
	    NSResponder = NSResponder;
	};
	"-mouseExited:" = {
	    NSButtonCell = NSButtonCell;
	    NSCursor = NSCursor;
	    NSResponder = NSResponder;
	};
	"-mouseLocationOutsideOfEventStream" = {
	    NSWindow = NSWindow;
	};
	"-mouseMoved:" = {
	    NSResponder = NSResponder;
	};
	"-mouseUp:" = {
	    NSResponder = NSResponder;
	};
	"-mouseUpOnCharacterIndex:atCoordinate:withModifier:client:" = {
	    "(NSInputServerMouseTracker)" = NSInputServer;
	};
	"-moveBackward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveBackwardAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveColumn:toColumn:" = {
	    NSTableView = NSTableView;
	};
	"-moveDown:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveDownAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveForward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveForwardAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveItemAtIndexPath:toIndexPath:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-moveLeft:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveLeftAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveRight:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveRightAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveSection:toSection:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-moveToBeginningOfDocument:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveToBeginningOfLine:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveToBeginningOfParagraph:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveToEndOfDocument:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveToEndOfLine:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveToEndOfParagraph:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveToPoint:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-moveUp:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveUpAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordBackward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordBackwardAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordForward:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordForwardAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordLeft:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordLeftAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordRight:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-moveWordRightAndModifySelection:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-movie" = {
	    NSMovieView = NSMovieView;
	};
	"-movieController" = {
	    NSMovieView = NSMovieView;
	};
	"-movieRect" = {
	    NSMovieView = NSMovieView;
	};
	"-name" = {
	    NSColorList = NSColorList;
	    NSImage = NSImage;
	    NSPasteboard = NSPasteboard;
	    NSPrinter = NSPrinter;
	    NSSound = NSSound;
	};
	"-nameFieldLabel" = {
	    NSSavePanel = NSSavePanel;
	};
	"-nameFieldStringValue" = {
	    NSSavePanel = NSSavePanel;
	};
	"-needsDisplay" = {
	    NSMenuItemCell = NSMenuItemCell;
	    NSView = NSView;
	};
	"-needsLayout" = {
	    NSView = NSView;
	};
	"-needsPanelToBecomeKey" = {
	    NSView = NSView;
	};
	"-needsSizing" = {
	    NSMenuItemCell = NSMenuItemCell;
	    NSMenuView = NSMenuView;
	};
	"-needsToDrawRect:" = {
	    NSView = NSView;
	};
	"-needsUpdateConstraints" = {
	    NSView = NSView;
	};
	"-nestedSetFrameOrigin:" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-nestingMode" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-newDocument:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-newItemForRepresentedObject:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-newObject" = {
	    NSObjectController = NSObjectController;
	};
	"-nextEventMatchingMask:" = {
	    NSWindow = NSWindow;
	};
	"-nextEventMatchingMask:untilDate:inMode:dequeue:" = {
	    NSApplication = NSApplication;
	    NSWindow = NSWindow;
	};
	"-nextKeyView" = {
	    NSView = NSView;
	};
	"-nextResponder" = {
	    NSResponder = NSResponder;
	};
	"-nextState" = {
	    NSCell = NSCell;
	};
	"-nextText" = {
	    NSMatrix = NSMatrix;
	    NSTextField = NSTextField;
	};
	"-nextValidKeyView" = {
	    NSView = NSView;
	};
	"-nextWordFromIndex:forward:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-noResponderFor:" = {
	    NSResponder = NSResponder;
	};
	"-note" = {
	    NSPrinter = NSPrinter;
	};
	"-noteDocumentClosed" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-noteDocumentEdited" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-noteDocumentReverted" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-noteDocumentSaved" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-noteDocumentSavedAs:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-noteDocumentSavedTo:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-noteFileSystemChanged" = {
	    NSWorkspace = NSWorkspace;
	};
	"-noteFileSystemChanged:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-noteHeightOfRowsWithIndexesChanged:" = {
	    NSTableView = NSTableView;
	};
	"-noteNewRecentDocument:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-noteNewRecentDocumentURL:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-noteNumberOfItemsChanged" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-noteNumberOfRowsChanged" = {
	    NSTableView = NSTableView;
	};
	"-noteSourceEdited" = {
	    NSDataLink = NSDataLink;
	};
	"-noteUserDefaultsChanged" = {
	    NSWorkspace = NSWorkspace;
	};
	"-notificationCenter" = {
	    NSWorkspace = NSWorkspace;
	};
	"-numberOfColumns" = {
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-numberOfComponents" = {
	    NSColor = NSColor;
	};
	"-numberOfGlyphs" = {
	    NSFont = NSFont;
	};
	"-numberOfItems" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-numberOfItemsInComboBox:" = {
	    "(NSComboBoxDataSource)" = NSComboBox;
	};
	"-numberOfItemsInComboBoxCell:" = {
	    "NSObject(NSComboBoxCellDataSource)" = NSComboBoxCell;
	};
	"-numberOfItemsInMenu:" = {
	    "(NSMenuDelegate)" = NSMenu;
	    "NSObject(NSMenuDelegate)" = NSMenu;
	};
	"-numberOfItemsInSection:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-numberOfPlanes" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-numberOfRows" = {
	    NSMatrix = NSMatrix;
	    NSRuleEditor = NSRuleEditor;
	    NSTableView = NSTableView;
	};
	"-numberOfRowsInTableView:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-numberOfSections" = {
	    NSCollectionView = NSCollectionView;
	};
	"-numberOfSectionsInCollectionView:" = {
	    "(NSCollectionViewDataSource)" = NSCollectionView;
	};
	"-numberOfSelectedColumns" = {
	    NSTableView = NSTableView;
	};
	"-numberOfSelectedRows" = {
	    NSTableView = NSTableView;
	};
	"-numberOfTabViewItems" = {
	    NSTabView = NSTabView;
	};
	"-numberOfTickMarks" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-numberOfVirtualScreens" = {
	    NSOpenGLPixelFormat = NSOpenGL;
	};
	"-numberOfVisibleColumns" = {
	    NSBrowser = NSBrowser;
	};
	"-numberOfVisibleItems" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-objectClass" = {
	    NSObjectController = NSObjectController;
	};
	"-objectDidBeginEditing:" = {
	    NSController = NSController;
	    "NSObject(NSEditorRegistration)" = NSKeyValueBinding;
	};
	"-objectDidEndEditing:" = {
	    NSController = NSController;
	    "NSObject(NSEditorRegistration)" = NSKeyValueBinding;
	};
	"-objectForKey:" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-objectForProperty:error:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-objectValue" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-objectValueOfSelectedItem" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-objectValues" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-offStateImage" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-ok:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-onStateImage" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-opaqueAncestor" = {
	    NSView = NSView;
	};
	"-open" = {
	    NSDrawer = NSDrawer;
	};
	"-open:" = {
	    NSDrawer = NSDrawer;
	};
	"-openDocument:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-openDocumentWithContentsOfFile:display:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-openDocumentWithContentsOfURL:display:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-openDocumentWithContentsOfURL:display:completionHandler:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-openDocumentWithContentsOfURL:display:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-openFile:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-openFile:fromImage:at:inView:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-openFile:withApplication:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-openFile:withApplication:andDeactivate:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-openGLContext" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-openOnEdge:" = {
	    NSDrawer = NSDrawer;
	};
	"-openSource" = {
	    NSDataLink = NSDataLink;
	};
	"-openTempFile:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-openURL:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-openUntitledDocumentAndDisplay:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-openUntitledDocumentOfType:display:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-operators" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-options" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	    NSPrintPanel = NSPrintPanel;
	    NSTextTab = NSParagraphStyle;
	};
	"-orderBack:" = {
	    NSWindow = NSWindow;
	};
	"-orderFront:" = {
	    NSWindow = NSWindow;
	};
	"-orderFrontCharacterPalette:" = {
	    "NSApplication(CharacterPanel)" = NSApplication;
	};
	"-orderFrontColorPanel:" = {
	    "NSApplication(NSColorPanel)" = NSColorPanel;
	};
	"-orderFrontDataLinkPanel:" = {
	    "NSApplication(NSDataLinkPanel)" = NSDataLinkPanel;
	};
	"-orderFrontFontPanel:" = {
	    NSFontManager = NSFontManager;
	};
	"-orderFrontHelpPanel:" = {
	    "NSApplication(NSHelpPanel)" = NSHelpPanel;
	};
	"-orderFrontLinkPanel:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-orderFrontListPanel:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-orderFrontRegardless" = {
	    NSWindow = NSWindow;
	};
	"-orderFrontStandardAboutPanel:" = {
	    NSApplication = NSApplication;
	};
	"-orderFrontStandardAboutPanelWithOptions:" = {
	    NSApplication = NSApplication;
	};
	"-orderFrontStandardInfoPanel:" = {
	    NSApplication = NSApplication;
	};
	"-orderFrontStandardInfoPanelWithOptions:" = {
	    NSApplication = NSApplication;
	};
	"-orderFrontTablePanel:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-orderOut:" = {
	    NSWindow = NSWindow;
	};
	"-orderWindow:relativeTo:" = {
	    NSWindow = NSWindow;
	};
	"-orderedDocuments" = {
	    NSApplication = NSApplication;
	};
	"-orderedWindows" = {
	    NSApplication = NSApplication;
	};
	"-orientation" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-otherMouseDown:" = {
	    NSResponder = NSResponder;
	};
	"-otherMouseDragged:" = {
	    NSResponder = NSResponder;
	};
	"-otherMouseUp:" = {
	    NSResponder = NSResponder;
	};
	"-outline:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-outlineTableColumn" = {
	    NSOutlineView = NSOutlineView;
	};
	"-outlineView:acceptDrop:item:childIndex:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:child:ofItem:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:dataCellForTableColumn:item:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:didAddRowView:forRow:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:didClickTableColumn:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:didRemoveRowView:forRow:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:isItemExpandable:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:itemForPersistentObject:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:numberOfChildrenOfItem:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:objectValueForTableColumn:byItem:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:persistentObjectForItem:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:rowViewForItem:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:setObjectValue:forTableColumn:byItem:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:shouldCollapseItem:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:shouldEditTableColumn:item:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:shouldExpandItem:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:shouldSelectItem:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:shouldSelectTableColumn:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:sortDescriptorsDidChange:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:validateDrop:proposedItem:proposedChildIndex:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineView:viewForTableColumn:item:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:willDisplayCell:forTableColumn:item:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:willDisplayOutlineCell:forTableColumn:item:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineView:writeItems:toPasteboard:" = {
	    "(NSOutlineViewDataSource)" = NSOutlineView;
	};
	"-outlineViewColumnDidMove:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineViewColumnDidResize:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineViewItemDidCollapse:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineViewItemDidExpand:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineViewItemWillCollapse:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineViewItemWillExpand:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineViewSelectionDidChange:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-outlineViewSelectionIsChanging:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-owner" = {
	    NSWindowController = NSWindowController;
	};
	"-pageDown:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-pageFooter" = {
	    NSView = NSView;
	};
	"-pageHeader" = {
	    NSView = NSView;
	};
	"-pageOrder" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-pageScroll" = {
	    NSScrollView = NSScrollView;
	};
	"-pageSizeForPaper:" = {
	    NSPrinter = NSPrinter;
	};
	"-pageUp:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-panel:compareFilename:with:caseSensitive:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	    "NSObject(NSSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:didChangeToDirectoryURL:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:directoryDidChange:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	    "NSObject(NSSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:isValidFilename:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	    "NSObject(NSSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:shouldEnableURL:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:shouldShowFilename:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	    "NSObject(NSSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:userEnteredFilename:confirmed:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	    "NSObject(NSSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:validateURL:error:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	};
	"-panel:willExpand:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	    "NSObject(NSSavePanelDelegate)" = NSSavePanel;
	};
	"-panelConvertFont:" = {
	    NSFontPanel = NSFontPanel;
	};
	"-panelSelectionDidChange:" = {
	    "NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	    "NSObject(NSSavePanelDelegate)" = NSSavePanel;
	};
	"-paperName" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-paperSize" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-paragraphSpacing" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-paragraphSpacingBefore" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-paragraphs" = {
	    "NSTextStorage(Scripting)" = NSTextStorage;
	};
	"-parentForItem:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-parentRowForRow:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-parentWindow" = {
	    NSDrawer = NSDrawer;
	    NSWindow = NSWindow;
	};
	"-parsePPDAtPath:" = {
	    "NSPrinter(PPDParsing)" = NSPrinter;
	};
	"-paste:" = {
	    NSMovieView = NSMovieView;
	    NSText = NSText;
	};
	"-pasteAsPlainText:" = {
	    NSTextView = NSTextView;
	};
	"-pasteAsRichText:" = {
	    NSTextView = NSTextView;
	};
	"-pasteFont:" = {
	    NSText = NSText;
	};
	"-pasteFromPasteboard:at:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-pasteRuler:" = {
	    NSText = NSText;
	};
	"-pasteboard:item:provideDataForType:" = {
	    "(NSPasteboardItemDataProvider)" = NSPasteboardItem;
	};
	"-pasteboard:provideDataForType:" = {
	    "NSObject(NSPasteboardOwner)" = NSPasteboard;
	};
	"-pasteboard:provideDataForType:andVersion:" = {
	    "NSObject(NSPasteboardOwner)" = NSPasteboard;
	};
	"-pasteboardChangedOwner:" = {
	    "NSObject(NSPasteboardOwner)" = NSPasteboard;
	};
	"-pasteboardFinishedWithDataProvider:" = {
	    "NSObject(NSPasteboardItemDataProvider)" = NSPasteboardItem;
	};
	"-pasteboardPropertyListForType:" = {
	    "(NSPasteboardWriting)" = NSPasteboard;
	};
	"-path" = {
	    NSBrowser = NSBrowser;
	};
	"-pathForHelpResource:" = {
	    "NSBundle(NSHelpManager)" = NSHelpManager;
	};
	"-pathForImageResource:" = {
	    "NSBundle(NSImageAdditions)" = NSImage;
	};
	"-pathForSoundResource:" = {
	    "NSBundle(NSSoundAdditions)" = NSSound;
	};
	"-pathSeparator" = {
	    NSBrowser = NSBrowser;
	};
	"-pathToColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-patternImage" = {
	    NSColor = NSColor;
	};
	"-patternPhase" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-pause" = {
	    NSSound = NSSound;
	};
	"-pauseSpeakingAtBoundary:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-performActionForItemAtIndex:" = {
	    NSMenu = NSMenu;
	};
	"-performActionWithHighlightingForItemAtIndex:" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-performBatchUpdates:completionHandler:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-performClick:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-performClickWithFrame:inView:" = {
	    NSCell = NSCell;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-performClose:" = {
	    NSWindow = NSWindow;
	};
	"-performFileOperation:source:destination:files:tag:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-performFindPanelAction:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-performKeyEquivalent:" = {
	    NSButton = NSButton;
	    NSMatrix = NSMatrix;
	    NSMenu = NSMenu;
	    NSResponder = NSResponder;
	    NSView = NSView;
	};
	"-performMiniaturize:" = {
	    NSWindow = NSWindow;
	};
	"-performMnemonic:" = {
	    NSResponder = NSResponder;
	    NSView = NSView;
	};
	"-performZoom:" = {
	    NSWindow = NSWindow;
	};
	"-phase" = {
	    NSEvent = NSEvent;
	};
	"-phonemesFromText:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-pickedAllPages:" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-pickedBreakAllLinks:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"-pickedBreakLink:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"-pickedButton:" = {
	    NSPageLayout = NSPageLayout;
	    NSPrintPanel = NSPrintPanel;
	};
	"-pickedLayoutList:" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-pickedOpenSource:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"-pickedOrientation:" = {
	    NSPageLayout = NSPageLayout;
	};
	"-pickedPaperSize:" = {
	    NSPageLayout = NSPageLayout;
	};
	"-pickedUnits:" = {
	    NSPageLayout = NSPageLayout;
	};
	"-pickedUpdateDestination:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"-pickedUpdateMode:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"-pixelFormat" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-pixelsHigh" = {
	    NSImageRep = NSImageRep;
	};
	"-pixelsWide" = {
	    NSImageRep = NSImageRep;
	};
	"-placeholderAttributedString" = {
	    NSFormCell = NSFormCell;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-placeholderString" = {
	    NSFormCell = NSFormCell;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-play" = {
	    NSSound = NSSound;
	};
	"-playbackDeviceIdentifier" = {
	    NSSound = NSSound;
	};
	"-playsEveryFrame" = {
	    NSMovieView = NSMovieView;
	};
	"-playsSelectionOnly" = {
	    NSMovieView = NSMovieView;
	};
	"-pointInMatrixSpace:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-pointSize" = {
	    NSFont = NSFont;
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-pointingDeviceID" = {
	    NSEvent = NSEvent;
	};
	"-pointingDeviceSerialNumber" = {
	    NSEvent = NSEvent;
	};
	"-pointingDeviceType" = {
	    NSEvent = NSEvent;
	};
	"-pop" = {
	    NSCursor = NSCursor;
	};
	"-popUpMenuPositionItem:atLocation:inView:" = {
	    NSMenu = NSMenu;
	};
	"-popUpMenuPositioningItem:atLocation:inView:" = {
	    NSMenu = NSMenu;
	};
	"-positionOfGlyph:forCharacter:struckOverRect:" = {
	    NSFont = NSFont;
	};
	"-positionOfGlyph:precededByGlyph:isNominal:" = {
	    NSFont = NSFont;
	};
	"-positionOfGlyph:struckOverGlyph:metricsExist:" = {
	    NSFont = NSFont;
	};
	"-positionOfGlyph:struckOverRect:metricsExist:" = {
	    NSFont = NSFont;
	};
	"-positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:" = {
	    NSFont = NSFont;
	};
	"-positionsForCompositeSequence:numberOfGlyphs:pointArray:" = {
	    NSFont = NSFont;
	};
	"-postEvent:atStart:" = {
	    NSApplication = NSApplication;
	    NSWindow = NSWindow;
	};
	"-postsBoundsChangedNotifications" = {
	    NSView = NSView;
	};
	"-postsFrameChangedNotifications" = {
	    NSView = NSView;
	};
	"-postscriptName" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-predicate" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-predicateForRow:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-predicateWithSubpredicates:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-preferredEdge" = {
	    NSDrawer = NSDrawer;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-preferredFilenameExtensionForType:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-preferredLayoutAttributesFittingAttributes:" = {
	    "(NSCollectionViewElement)" = NSCollectionView;
	};
	"-preferredPasteboardTypeFromArray:restrictedToTypesFromArray:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-prefersAllColumnUserResizing" = {
	    NSBrowser = NSBrowser;
	};
	"-prefersColorMatch" = {
	    NSImage = NSImage;
	};
	"-prefetchDataSource" = {
	    NSCollectionView = NSCollectionView;
	};
	"-prepareContent" = {
	    NSObjectController = NSObjectController;
	};
	"-prepareForReuse" = {
	    "(NSCollectionViewElement)" = NSCollectionView;
	};
	"-prepareGState" = {
	    NSEPSImageRep = NSEPSImageRep;
	};
	"-prepareOpenGL" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-preparePageLayout:" = {
	    NSDocument = NSDocument;
	};
	"-prepareSavePanel:" = {
	    NSDocument = NSDocument;
	};
	"-preparedCellAtColumn:row:" = {
	    NSTableView = NSTableView;
	};
	"-presentError:" = {
	    NSDocument = NSDocument;
	    NSDocumentController = NSDocumentController;
	    NSResponder = NSResponder;
	};
	"-presentError:modalForWindow:delegate:didPresentSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	    NSDocumentController = NSDocumentController;
	    NSResponder = NSResponder;
	};
	"-presentationOptions" = {
	    NSApplication = NSApplication;
	};
	"-preservesContentDuringLiveResize" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-preservesSelection" = {
	    NSArrayController = NSArrayController;
	};
	"-pressure" = {
	    NSEvent = NSEvent;
	};
	"-preventWindowOrdering" = {
	    NSApplication = NSApplication;
	};
	"-previousKeyView" = {
	    NSView = NSView;
	};
	"-previousText" = {
	    NSMatrix = NSMatrix;
	    NSTextField = NSTextField;
	};
	"-previousValidKeyView" = {
	    NSView = NSView;
	};
	"-print:" = {
	    NSHelpPanel = NSHelpPanel;
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-printDocument:" = {
	    NSDocument = NSDocument;
	};
	"-printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-printInfo" = {
	    NSDocument = NSDocument;
	    NSPageLayout = NSPageLayout;
	    NSPrintOperation = NSPrintOperation;
	    NSPrintPanel = NSPrintPanel;
	};
	"-printJobTitle" = {
	    NSView = NSView;
	};
	"-printOperationWithSettings:error:" = {
	    NSDocument = NSDocument;
	};
	"-printPanel" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-printShowingPrintPanel:" = {
	    NSDocument = NSDocument;
	};
	"-printer" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-printerFont" = {
	    NSFont = NSFont;
	};
	"-printerProlog" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	};
	"-processEditing" = {
	    NSTextStorage = NSTextStorage;
	};
	"-prompt" = {
	    NSSavePanel = NSSavePanel;
	};
	"-propertyListForType:" = {
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-prototype" = {
	    NSMatrix = NSMatrix;
	};
	"-provideNewButtonImage" = {
	    NSColorPicker = NSColorPicker;
	};
	"-pullsDown" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-push" = {
	    NSCursor = NSCursor;
	};
	"-putCell:atRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-raiseBaseline:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-rangeForUserCharacterAttributeChange" = {
	    NSTextView = NSTextView;
	};
	"-rangeForUserCompletion" = {
	    NSTextView = NSTextView;
	};
	"-rangeForUserParagraphAttributeChange" = {
	    NSTextView = NSTextView;
	};
	"-rangeForUserTextChange" = {
	    NSTextView = NSTextView;
	};
	"-rangeOfTextBlock:atIndex:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-rangeOfTextList:atIndex:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-rangeOfTextTable:atIndex:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-rangesForUserCharacterAttributeChange" = {
	    NSTextView = NSTextView;
	};
	"-rangesForUserParagraphAttributeChange" = {
	    NSTextView = NSTextView;
	};
	"-rangesForUserTextChange" = {
	    NSTextView = NSTextView;
	};
	"-rate" = {
	    NSMovieView = NSMovieView;
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-readFileContentsType:toFile:" = {
	    NSPasteboard = NSPasteboard;
	};
	"-readFileWrapper" = {
	    NSPasteboard = NSPasteboard;
	};
	"-readFromData:ofType:error:" = {
	    NSDocument = NSDocument;
	};
	"-readFromData:options:documentAttributes:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-readFromData:options:documentAttributes:error:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-readFromFile:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-readFromFileWrapper:ofType:error:" = {
	    NSDocument = NSDocument;
	};
	"-readFromURL:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-readFromURL:ofType:error:" = {
	    NSDocument = NSDocument;
	};
	"-readFromURL:options:documentAttributes:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-readFromURL:options:documentAttributes:error:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-readPrintInfo" = {
	    NSPageLayout = NSPageLayout;
	};
	"-readRTFDFromFile:" = {
	    NSText = NSText;
	};
	"-readSelectionFromPasteboard:" = {
	    "NSObject(NSServicesRequests)" = NSApplication;
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-readSelectionFromPasteboard:type:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-readablePasteboardTypes" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-rearrangeObjects" = {
	    NSArrayController = NSArrayController;
	};
	"-recache" = {
	    NSImage = NSImage;
	};
	"-recalculateKeyViewLoop" = {
	    NSWindow = NSWindow;
	};
	"-recentDocumentURLs" = {
	    NSDocumentController = NSDocumentController;
	};
	"-rect" = {
	    NSCachedImageRep = NSCachedImageRep;
	};
	"-rectForKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-rectForPage:" = {
	    NSView = NSView;
	};
	"-rectForPart:" = {
	    NSScroller = NSScroller;
	};
	"-rectInMatrixSpace:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-rectOfColumn:" = {
	    NSTableView = NSTableView;
	};
	"-rectOfItemAtIndex:" = {
	    NSMenuView = NSMenuView;
	};
	"-rectOfRow:" = {
	    NSTableView = NSTableView;
	};
	"-rectOfTickMarkAtIndex:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-rectPreservedDuringLiveResize" = {
	    NSView = NSView;
	};
	"-redComponent" = {
	    NSColor = NSColor;
	};
	"-reflectScrolledClipView:" = {
	    NSScrollView = NSScrollView;
	    NSView = NSView;
	};
	"-refusesFirstResponder" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-registerClass:forItemWithIdentifier:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-registerClass:forSupplementaryViewOfKind:withIdentifier:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-registerForDraggedTypes:" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-registerNib:forIdentifier:" = {
	    NSTableView = NSTableView;
	};
	"-registerNib:forItemWithIdentifier:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-registerNib:forSupplementaryViewOfKind:withIdentifier:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-registerServicesMenuSendTypes:returnTypes:" = {
	    NSApplication = NSApplication;
	};
	"-registeredDraggedTypes" = {
	    NSView = NSView;
	};
	"-registeredNibsByIdentifier" = {
	    NSTableView = NSTableView;
	};
	"-relativeCurveToPoint:controlPoint1:controlPoint2:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-relativeLineToPoint:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-relativeMoveToPoint:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-releaseGState" = {
	    NSView = NSView;
	};
	"-releaseGlobally" = {
	    NSPasteboard = NSPasteboard;
	};
	"-reloadColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-reloadCriteria" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-reloadData" = {
	    NSCollectionView = NSCollectionView;
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSTableView = NSTableView;
	};
	"-reloadDataForRowIndexes:columnIndexes:" = {
	    NSTableView = NSTableView;
	};
	"-reloadDefaultFontFamilies" = {
	    NSFontPanel = NSFontPanel;
	};
	"-reloadItem:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-reloadItem:reloadChildren:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-reloadItemsAtIndexPaths:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-reloadPredicate" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-reloadSections:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-remove:" = {
	    NSObjectController = NSObjectController;
	};
	"-removeAccessoryController:" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-removeAllItems" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-removeAllPoints" = {
	    NSBezierPath = NSBezierPath;
	};
	"-removeAllToolTips" = {
	    NSView = NSView;
	};
	"-removeChildWindow:" = {
	    NSWindow = NSWindow;
	};
	"-removeCollection:" = {
	    NSFontManager = NSFontManager;
	};
	"-removeColorWithKey:" = {
	    NSColorList = NSColorList;
	};
	"-removeColumn:" = {
	    NSMatrix = NSMatrix;
	};
	"-removeContextHelpForObject:" = {
	    NSHelpManager = NSHelpManager;
	};
	"-removeCursorRect:cursor:" = {
	    NSView = NSView;
	};
	"-removeDocument:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-removeEntryAtIndex:" = {
	    NSForm = NSForm;
	};
	"-removeFile" = {
	    NSColorList = NSColorList;
	};
	"-removeFontDescriptor:fromCollection:" = {
	    NSFontManager = NSFontManager;
	};
	"-removeFontTrait:" = {
	    NSFontManager = NSFontManager;
	};
	"-removeFromSuperview" = {
	    NSView = NSView;
	};
	"-removeFromSuperviewWithoutNeedingDisplay" = {
	    NSView = NSView;
	};
	"-removeItem:" = {
	    NSMenu = NSMenu;
	};
	"-removeItemAtIndex:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-removeItemWithObjectValue:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-removeItemWithTitle:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-removeLayoutManager:" = {
	    NSTextStorage = NSTextStorage;
	};
	"-removeObject:" = {
	    NSArrayController = NSArrayController;
	    NSObjectController = NSObjectController;
	};
	"-removeObjectAtArrangedObjectIndex:" = {
	    NSArrayController = NSArrayController;
	};
	"-removeObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-removeObjectsAtArrangedObjectIndexes:" = {
	    NSArrayController = NSArrayController;
	};
	"-removeRepresentation:" = {
	    NSImage = NSImage;
	};
	"-removeRow:" = {
	    NSMatrix = NSMatrix;
	};
	"-removeRowAtIndex:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-removeRowsAtIndexes:includeSubrows:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-removeRowsAtIndexes:withAnimation:" = {
	    NSTableView = NSTableView;
	};
	"-removeSelectedObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-removeSelectionIndexes:" = {
	    NSArrayController = NSArrayController;
	};
	"-removeSubview:" = {
	    NSView = NSView;
	};
	"-removeTabStop:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-removeTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-removeTableColumn:" = {
	    NSTableView = NSTableView;
	};
	"-removeToolTip:" = {
	    NSView = NSView;
	};
	"-removeTrackingRect:" = {
	    NSView = NSView;
	};
	"-removeWindowController:" = {
	    NSDocument = NSDocument;
	};
	"-removeWindowsItem:" = {
	    NSApplication = NSApplication;
	};
	"-renderingMode" = {
	    NSFont = NSFont;
	};
	"-renewGState" = {
	    NSView = NSView;
	};
	"-renewRows:columns:" = {
	    NSMatrix = NSMatrix;
	};
	"-reopenDocumentForURL:withContentsOfURL:display:completionHandler:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-reopenDocumentForURL:withContentsOfURL:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-replaceCharactersInRange:withAttributedString:" = {
	    NSText = NSText;
	    NSTextView = NSTextView;
	};
	"-replaceCharactersInRange:withRTF:" = {
	    NSText = NSText;
	};
	"-replaceCharactersInRange:withRTFD:" = {
	    NSText = NSText;
	};
	"-replaceCharactersInRange:withString:" = {
	    NSText = NSText;
	    NSTextView = NSTextView;
	};
	"-replaceLayoutManager:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-replaceRange:withRTF:" = {
	    NSText = NSText;
	};
	"-replaceRange:withRTFD:" = {
	    NSText = NSText;
	};
	"-replaceRange:withString:" = {
	    NSText = NSText;
	};
	"-replaceSubview:with:" = {
	    NSView = NSView;
	};
	"-replaceTextContainer:" = {
	    NSTextView = NSTextView;
	};
	"-replyToApplicationShouldTerminate:" = {
	    NSApplication = NSApplication;
	};
	"-replyToOpenOrPrint:" = {
	    NSApplication = NSApplication;
	};
	"-reportException:" = {
	    NSApplication = NSApplication;
	};
	"-representationUsingType:properties:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-representations" = {
	    NSImage = NSImage;
	};
	"-representedFilename" = {
	    NSWindow = NSWindow;
	};
	"-representedObject" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSRulerMarker = NSRulerMarker;
	};
	"-requestUserAttention:" = {
	    NSApplication = NSApplication;
	};
	"-requiredFileType" = {
	    NSSavePanel = NSSavePanel;
	};
	"-reset" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"-resetCursorRect:inView:" = {
	    NSCell = NSCell;
	};
	"-resetCursorRects" = {
	    NSMatrix = NSMatrix;
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-resetUsedFonts" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-reshape" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-resignFirstResponder" = {
	    NSResponder = NSResponder;
	};
	"-resignKeyWindow" = {
	    NSWindow = NSWindow;
	};
	"-resignMainWindow" = {
	    NSWindow = NSWindow;
	};
	"-resizeFlags" = {
	    NSWindow = NSWindow;
	};
	"-resizeIncrements" = {
	    NSWindow = NSWindow;
	};
	"-resizeSubviewsWithOldSize:" = {
	    NSView = NSView;
	};
	"-resizeWithMagnification:" = {
	    NSMovieView = NSMovieView;
	};
	"-resizeWithOldSuperviewSize:" = {
	    NSView = NSView;
	};
	"-resizedColumn" = {
	    NSTableHeaderView = NSTableHeaderView;
	};
	"-resizingMask" = {
	    NSTableColumn = NSTableColumn;
	};
	"-resolvesAliases" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-restoreCachedImage" = {
	    NSWindow = NSWindow;
	};
	"-restoreGraphicsState" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-resume" = {
	    NSSound = NSSound;
	};
	"-reusesColumns" = {
	    NSBrowser = NSBrowser;
	};
	"-revert:" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-revertDocumentToSaved:" = {
	    NSDocument = NSDocument;
	};
	"-revertToContentsOfURL:ofType:error:" = {
	    NSDocument = NSDocument;
	};
	"-revertToInitialValues:" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-revertToSavedFromFile:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-revertToSavedFromURL:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-reviewUnsavedDocumentsWithAlertTitle:cancellable:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-rightExpressionAttributeType" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-rightExpressions" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-rightMargin" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-rightMouseDown:" = {
	    NSResponder = NSResponder;
	};
	"-rightMouseDragged:" = {
	    NSResponder = NSResponder;
	};
	"-rightMouseUp:" = {
	    NSResponder = NSResponder;
	};
	"-rootItemForBrowser:" = {
	    "NSObject(NSBrowserDelegate)" = NSBrowser;
	};
	"-rotateByAngle:" = {
	    NSView = NSView;
	};
	"-rotation" = {
	    NSEvent = NSEvent;
	};
	"-rotationAngle" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-rowAtPoint:" = {
	    NSTableView = NSTableView;
	};
	"-rowClass" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-rowForDisplayValue:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-rowForItem:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-rowForView:" = {
	    NSTableView = NSTableView;
	};
	"-rowHeight" = {
	    NSRuleEditor = NSRuleEditor;
	    NSTableView = NSTableView;
	};
	"-rowTemplates" = {
	    NSPredicateEditor = NSPredicateEditor;
	};
	"-rowTypeForRow:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-rowTypeKeyPath" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-rowViewAtRow:makeIfNecessary:" = {
	    NSTableView = NSTableView;
	};
	"-rowsInRect:" = {
	    NSTableView = NSTableView;
	};
	"-ruleEditor:child:forCriterion:withRowType:" = {
	    "(NSRuleEditorDelegate)" = NSRuleEditor;
	};
	"-ruleEditor:displayValueForCriterion:inRow:" = {
	    "(NSRuleEditorDelegate)" = NSRuleEditor;
	};
	"-ruleEditor:numberOfChildrenForCriterion:withRowType:" = {
	    "(NSRuleEditorDelegate)" = NSRuleEditor;
	};
	"-ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:" = {
	    "(NSRuleEditorDelegate)" = NSRuleEditor;
	};
	"-ruleEditorRowsDidChange:" = {
	    "(NSRuleEditorDelegate)" = NSRuleEditor;
	};
	"-ruler" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-rulerAttributesInRange:" = {
	    "NSAttributedString(AppKit)" = NSAttributedString;
	};
	"-rulersVisible" = {
	    NSScrollView = NSScrollView;
	};
	"-run" = {
	    NSApplication = NSApplication;
	};
	"-runModal" = {
	    NSAlert = NSAlert;
	    NSPageLayout = NSPageLayout;
	    NSPrintPanel = NSPrintPanel;
	    NSSavePanel = NSSavePanel;
	};
	"-runModalForDirectory:file:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-runModalForDirectory:file:relativeToWindow:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-runModalForDirectory:file:types:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-runModalForDirectory:file:types:relativeToWindow:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-runModalForTypes:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-runModalForWindow:" = {
	    NSApplication = NSApplication;
	};
	"-runModalForWindow:relativeToWindow:" = {
	    NSApplication = NSApplication;
	};
	"-runModalOpenPanel:forTypes:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-runModalPageLayoutWithPrintInfo:" = {
	    NSDocument = NSDocument;
	};
	"-runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-runModalPrintOperation:delegate:didRunSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-runModalSavePanel:withAccessoryView:" = {
	    NSDocument = NSDocument;
	};
	"-runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-runModalSession:" = {
	    NSApplication = NSApplication;
	};
	"-runModalWithPrintInfo:" = {
	    NSPageLayout = NSPageLayout;
	    NSPrintPanel = NSPrintPanel;
	};
	"-runOperation" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-runOperationModalForWindow:delegate:didRunSelector:contextInfo:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-runPageLayout:" = {
	    "NSApplication(NSPageLayout)" = NSPageLayout;
	    NSDocument = NSDocument;
	};
	"-runToolbarCustomizationPalette:" = {
	    "NSWindow(Toolbar)" = NSWindow;
	};
	"-samplesPerPixel" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-saturationComponent" = {
	    NSColor = NSColor;
	};
	"-save:" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-saveAllDocuments:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-saveDocument:" = {
	    NSDocument = NSDocument;
	};
	"-saveDocumentAs:" = {
	    NSDocument = NSDocument;
	};
	"-saveDocumentTo:" = {
	    NSDocument = NSDocument;
	};
	"-saveDocumentWithDelegate:didSaveSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-saveFrameUsingName:" = {
	    NSWindow = NSWindow;
	};
	"-saveGraphicsState" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-saveLinkIn:" = {
	    NSDataLink = NSDataLink;
	};
	"-saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-saveToURL:ofType:forSaveOperation:error:" = {
	    NSDocument = NSDocument;
	};
	"-scaleTo::" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-scaleUnitSquareToSize:" = {
	    NSView = NSView;
	};
	"-scalesWhenResized" = {
	    NSImage = NSImage;
	};
	"-screen" = {
	    NSWindow = NSWindow;
	};
	"-screenFont" = {
	    NSFont = NSFont;
	};
	"-screenFontWithRenderingMode:" = {
	    NSFont = NSFont;
	};
	"-screenNumber" = {
	    NSScreen = NSScreen;
	};
	"-scrollCellToVisibleAtRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-scrollClipView:toPoint:" = {
	    NSView = NSView;
	};
	"-scrollColumnToVisible:" = {
	    NSBrowser = NSBrowser;
	    NSTableView = NSTableView;
	};
	"-scrollColumnsLeftBy:" = {
	    NSBrowser = NSBrowser;
	};
	"-scrollColumnsRightBy:" = {
	    NSBrowser = NSBrowser;
	};
	"-scrollItemAtIndexToTop:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-scrollItemAtIndexToVisible:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-scrollLineDown:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-scrollLineUp:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-scrollPageDown:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-scrollPageUp:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-scrollPoint:" = {
	    NSView = NSView;
	};
	"-scrollRangeToVisible:" = {
	    NSText = NSText;
	};
	"-scrollRect:by:" = {
	    NSView = NSView;
	};
	"-scrollRectToVisible:" = {
	    NSView = NSView;
	};
	"-scrollRowToVisible:" = {
	    NSTableView = NSTableView;
	};
	"-scrollRowToVisible:inColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-scrollToBeginningOfDocument:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-scrollToEndOfDocument:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-scrollToItemsAtIndexPaths:scrollPosition:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-scrollToPoint:" = {
	    NSClipView = NSClipView;
	};
	"-scrollViaScroller:" = {
	    NSBrowser = NSBrowser;
	};
	"-scrollWheel:" = {
	    NSResponder = NSResponder;
	};
	"-scrollerInsets" = {
	    NSScrollView = NSScrollView;
	};
	"-scrollerKnobStyle" = {
	    NSScrollView = NSScrollView;
	};
	"-scrollerStyle" = {
	    NSScrollView = NSScrollView;
	    NSScroller = NSScroller;
	};
	"-scrollsDynamically" = {
	    NSScrollView = NSScrollView;
	};
	"-selectAll:" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSMatrix = NSMatrix;
	    NSMovieView = NSMovieView;
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	    NSTableView = NSTableView;
	    NSText = NSText;
	};
	"-selectCell:" = {
	    NSControl = NSControl;
	};
	"-selectCellAtRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-selectCellWithTag:" = {
	    NSMatrix = NSMatrix;
	};
	"-selectColumn:byExtendingSelection:" = {
	    NSTableView = NSTableView;
	};
	"-selectColumnIndexes:byExtendingSelection:" = {
	    NSTableView = NSTableView;
	};
	"-selectFile:inFileViewerRootedAtPath:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-selectFirstTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-selectItem:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-selectItemAtIndex:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-selectItemWithObjectValue:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-selectItemWithTag:" = {
	    NSPopUpButton = NSPopUpButton;
	};
	"-selectItemWithTitle:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-selectItemsAtIndexPaths:scrollPosition:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-selectKeyViewFollowingView:" = {
	    NSWindow = NSWindow;
	};
	"-selectKeyViewPrecedingView:" = {
	    NSWindow = NSWindow;
	};
	"-selectLastTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-selectLine:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-selectNext:" = {
	    NSArrayController = NSArrayController;
	};
	"-selectNextKeyView:" = {
	    NSWindow = NSWindow;
	};
	"-selectNextTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-selectParagraph:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-selectPrevious:" = {
	    NSArrayController = NSArrayController;
	};
	"-selectPreviousKeyView:" = {
	    NSWindow = NSWindow;
	};
	"-selectPreviousTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-selectRow:byExtendingSelection:" = {
	    NSTableView = NSTableView;
	};
	"-selectRow:inColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-selectRowIndexes:byExtendingSelection:" = {
	    NSRuleEditor = NSRuleEditor;
	    NSTableView = NSTableView;
	};
	"-selectTabViewItem:" = {
	    NSTabView = NSTabView;
	};
	"-selectTabViewItemAtIndex:" = {
	    NSTabView = NSTabView;
	};
	"-selectTabViewItemWithIdentifier:" = {
	    NSTabView = NSTabView;
	};
	"-selectText:" = {
	    NSMatrix = NSMatrix;
	    NSSavePanel = NSSavePanel;
	    NSTextField = NSTextField;
	};
	"-selectTextAtIndex:" = {
	    NSForm = NSForm;
	};
	"-selectTextAtRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-selectToMark:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-selectWithFrame:inView:editor:delegate:start:length:" = {
	    NSCell = NSCell;
	};
	"-selectWord:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-selectedCell" = {
	    NSBrowser = NSBrowser;
	    NSControl = NSControl;
	    NSMatrix = NSMatrix;
	};
	"-selectedCellInColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-selectedCells" = {
	    NSBrowser = NSBrowser;
	    NSMatrix = NSMatrix;
	};
	"-selectedColumn" = {
	    NSBrowser = NSBrowser;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-selectedColumnEnumerator" = {
	    NSTableView = NSTableView;
	};
	"-selectedColumnIndexes" = {
	    NSTableView = NSTableView;
	};
	"-selectedFont" = {
	    NSFontManager = NSFontManager;
	};
	"-selectedItem" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-selectedObjects" = {
	    NSArrayController = NSArrayController;
	    NSObjectController = NSObjectController;
	};
	"-selectedRange" = {
	    NSText = NSText;
	};
	"-selectedRanges" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-selectedRow" = {
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-selectedRowEnumerator" = {
	    NSTableView = NSTableView;
	};
	"-selectedRowInColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-selectedRowIndexes" = {
	    NSRuleEditor = NSRuleEditor;
	    NSTableView = NSTableView;
	};
	"-selectedTabViewItem" = {
	    NSTabView = NSTabView;
	};
	"-selectedTag" = {
	    NSControl = NSControl;
	};
	"-selectedTextAttributes" = {
	    NSTextView = NSTextView;
	};
	"-selection" = {
	    NSObjectController = NSObjectController;
	};
	"-selectionAffinity" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-selectionGranularity" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-selectionHighlightStyle" = {
	    NSTableView = NSTableView;
	};
	"-selectionIndex" = {
	    NSArrayController = NSArrayController;
	};
	"-selectionIndexPath" = {
	    NSBrowser = NSBrowser;
	};
	"-selectionIndexPaths" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	};
	"-selectionIndexes" = {
	    NSArrayController = NSArrayController;
	    NSCollectionView = NSCollectionView;
	};
	"-selectionRangeForProposedRange:granularity:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-selectionShouldChangeInOutlineView:" = {
	    "(NSOutlineViewDelegate)" = NSOutlineView;
	};
	"-selectionShouldChangeInTableView:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-selectsInsertedObjects" = {
	    NSArrayController = NSArrayController;
	};
	"-sendAction" = {
	    NSBrowser = NSBrowser;
	    NSFontManager = NSFontManager;
	    NSMatrix = NSMatrix;
	};
	"-sendAction:to:" = {
	    NSControl = NSControl;
	};
	"-sendAction:to:forAllCells:" = {
	    NSMatrix = NSMatrix;
	};
	"-sendAction:to:from:" = {
	    NSApplication = NSApplication;
	};
	"-sendActionOn:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-sendDoubleAction" = {
	    NSMatrix = NSMatrix;
	};
	"-sendEvent:" = {
	    NSApplication = NSApplication;
	    NSWindow = NSWindow;
	};
	"-sendsActionOnAlphaNumericalKeys" = {
	    "NSBrowser(GNUstepExtensions)" = NSBrowser;
	};
	"-sendsActionOnArrowKeys" = {
	    NSBrowser = NSBrowser;
	};
	"-sendsActionOnEndEditing" = {
	    NSCell = NSCell;
	};
	"-separatesColumns" = {
	    NSBrowser = NSBrowser;
	};
	"-servicesMenu" = {
	    NSApplication = NSApplication;
	};
	"-servicesProvider" = {
	    NSApplication = NSApplication;
	};
	"-set" = {
	    "NSAffineTransform(GUIAdditions)" = NSAffineTransform;
	    NSBrowserCell = NSBrowserCell;
	    NSColor = NSColor;
	    NSCursor = NSCursor;
	    NSFont = NSFont;
	};
	"-setAcceptsAlphaNumericalKeys:" = {
	    "NSBrowser(GNUstepExtensions)" = NSBrowser;
	};
	"-setAcceptsArrowKeys:" = {
	    NSBrowser = NSBrowser;
	};
	"-setAcceptsGlyphInfo:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setAcceptsMouseMovedEvents:" = {
	    NSWindow = NSWindow;
	};
	"-setAccessoryView:" = {
	    NSColorPanel = NSColorPanel;
	    NSDataLinkPanel = NSDataLinkPanel;
	    NSFontPanel = NSFontPanel;
	    NSPageLayout = NSPageLayout;
	    NSPrintOperation = NSPrintOperation;
	    NSPrintPanel = NSPrintPanel;
	    NSSavePanel = NSSavePanel;
	    NSSpellChecker = NSSpellChecker;
	};
	"-setAction:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSColorPanel = NSColorPanel;
	    NSControl = NSControl;
	    NSFontManager = NSFontManager;
	    NSMatrix = NSMatrix;
	};
	"-setAlertStyle:" = {
	    NSAlert = NSAlert;
	};
	"-setAlignment:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSMutableParagraphStyle = NSParagraphStyle;
	    NSText = NSText;
	};
	"-setAlignment:range:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	    NSTextView = NSTextView;
	};
	"-setAllowedFileTypes:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setAllowsBranchSelection:" = {
	    NSBrowser = NSBrowser;
	};
	"-setAllowsColumnReordering:" = {
	    NSTableView = NSTableView;
	};
	"-setAllowsColumnResizing:" = {
	    NSTableView = NSTableView;
	};
	"-setAllowsColumnSelection:" = {
	    NSTableView = NSTableView;
	};
	"-setAllowsCutCopyPaste:" = {
	    NSImageView = NSImageView;
	};
	"-setAllowsDocumentBackgroundColorChange:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setAllowsEditingTextAttributes:" = {
	    NSCell = NSCell;
	    NSTextField = NSTextField;
	};
	"-setAllowsEmptySelection:" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-setAllowsMagnification:" = {
	    NSScrollView = NSScrollView;
	};
	"-setAllowsMixedState:" = {
	    NSButton = NSButton;
	    NSCell = NSCell;
	};
	"-setAllowsMultipleSelection:" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSOpenPanel = NSOpenPanel;
	    NSTableView = NSTableView;
	};
	"-setAllowsOtherFileTypes:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setAllowsTickMarkValuesOnly:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setAllowsToolTipsWhenApplicationIsInactive:" = {
	    NSWindow = NSWindow;
	};
	"-setAllowsTruncatedLabels:" = {
	    NSTabView = NSTabView;
	};
	"-setAllowsTypeSelect:" = {
	    NSBrowser = NSBrowser;
	};
	"-setAllowsUndo:" = {
	    NSCell = NSCell;
	    NSTextView = NSTextView;
	};
	"-setAlpha:" = {
	    NSImageRep = NSImageRep;
	};
	"-setAlphaValue:" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-setAltIncrementValue:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setAlternate:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-setAlternateImage:" = {
	    NSBrowserCell = NSBrowserCell;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setAlternateMnemonicLocation:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-setAlternateTitle:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setAlternateTitleWithMnemonic:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-setAltersStateOfSelectedItem:" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-setAlwaysUsesMultipleValuesMarker:" = {
	    NSArrayController = NSArrayController;
	};
	"-setAnimates:" = {
	    NSImageView = NSImageView;
	};
	"-setAnimationDelay:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-setAppleMenu:" = {
	    NSApplication = NSApplication;
	};
	"-setApplicationIconImage:" = {
	    NSApplication = NSApplication;
	};
	"-setAppliesImmediately:" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-setArrowPosition:" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-setArrowsPosition:" = {
	    NSScroller = NSScroller;
	};
	"-setAspectRatio:" = {
	    NSWindow = NSWindow;
	};
	"-setAssociatedPoints:atIndex:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setAttachment:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-setAttachmentCell:" = {
	    NSTextAttachment = NSTextAttachment;
	};
	"-setAttributedAlternateTitle:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setAttributedStringValue:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setAttributedTitle:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSFormCell = NSFormCell;
	};
	"-setAutodisplay:" = {
	    NSWindow = NSWindow;
	};
	"-setAutoenablesItems:" = {
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-setAutohidesScroller:" = {
	    NSBrowser = NSBrowser;
	};
	"-setAutohidesScrollers:" = {
	    NSScrollView = NSScrollView;
	};
	"-setAutomaticallyAdjustsContentInsets:" = {
	    NSScrollView = NSScrollView;
	};
	"-setAutomaticallyPreparesContent:" = {
	    NSObjectController = NSObjectController;
	};
	"-setAutomaticallyRearrangesObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-setAutorecalculatesKeyViewLoop:" = {
	    NSWindow = NSWindow;
	};
	"-setAutorepeat:" = {
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-setAutoresizesAllColumnsToFit:" = {
	    NSTableView = NSTableView;
	};
	"-setAutoresizesOutlineColumn:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-setAutoresizesSubviews:" = {
	    NSView = NSView;
	};
	"-setAutoresizingMask:" = {
	    NSView = NSView;
	};
	"-setAutosaveExpandedItems:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-setAutosaveName:" = {
	    NSSplitView = NSSplitView;
	    NSTableView = NSTableView;
	};
	"-setAutosaveTableColumns:" = {
	    NSTableView = NSTableView;
	};
	"-setAutosavedContentsFileURL:" = {
	    NSDocument = NSDocument;
	};
	"-setAutosavingDelay:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-setAutoscroll:" = {
	    NSMatrix = NSMatrix;
	};
	"-setAutosizesCells:" = {
	    NSMatrix = NSMatrix;
	};
	"-setAvoidsEmptySelection:" = {
	    NSArrayController = NSArrayController;
	};
	"-setBackgroundColor:" = {
	    NSBrowser = NSBrowser;
	    NSButtonCell = NSButtonCell;
	    NSClipView = NSClipView;
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSImage = NSImage;
	    NSMatrix = NSMatrix;
	    NSScrollView = NSScrollView;
	    "NSSplitView(GNUstepExtra)" = NSSplitView;
	    NSTableView = NSTableView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	    NSWindow = NSWindow;
	};
	"-setBackgroundColors:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setBackgroundStyle:" = {
	    NSCell = NSCell;
	};
	"-setBackgroundView:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setBackgroundViewScrollsWithContent:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setBackingType:" = {
	    NSWindow = NSWindow;
	};
	"-setBaseWritingDirection:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setBaseWritingDirection:range:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-setBecomesKeyOnlyIfNeeded:" = {
	    NSPanel = NSPanel;
	};
	"-setBestApp:inRole:forExtension:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-setBestApp:inRole:forScheme:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-setBestIcon:forExtension:" = {
	    "NSWorkspace(GNUstep)" = NSWorkspace;
	};
	"-setBezelStyle:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-setBezeled:" = {
	    NSCell = NSCell;
	    NSDatePicker = NSDatePicker;
	    NSForm = NSForm;
	    NSProgressIndicator = NSProgressIndicator;
	    NSTextField = NSTextField;
	};
	"-setBitsPerSample:" = {
	    NSImageRep = NSImageRep;
	};
	"-setBorderColor:" = {
	    NSBox = NSBox;
	};
	"-setBorderType:" = {
	    NSBox = NSBox;
	    NSScrollView = NSScrollView;
	};
	"-setBorderWidth:" = {
	    NSBox = NSBox;
	};
	"-setBordered:" = {
	    NSButton = NSButton;
	    NSCell = NSCell;
	    NSColorWell = NSColorWell;
	    NSDatePicker = NSDatePicker;
	    NSForm = NSForm;
	    NSTextField = NSTextField;
	};
	"-setBottomMargin:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setBounds:" = {
	    NSView = NSView;
	};
	"-setBoundsOrigin:" = {
	    NSView = NSView;
	};
	"-setBoundsRotation:" = {
	    NSView = NSView;
	};
	"-setBoundsSize:" = {
	    NSView = NSView;
	};
	"-setBoxType:" = {
	    NSBox = NSBox;
	};
	"-setButtonBordered:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-setButtonType:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setCacheDepthMatchesImageDepth:" = {
	    NSImage = NSImage;
	};
	"-setCacheMode:" = {
	    NSImage = NSImage;
	};
	"-setCachedSeparately:" = {
	    NSImage = NSImage;
	};
	"-setCachesBezierPath:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setCalendar:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setCanChooseDirectories:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-setCanChooseFiles:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-setCanCreateDirectories:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setCanHide:" = {
	    NSWindow = NSWindow;
	};
	"-setCanRemoveAllRows:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setCanSelectHiddenExtension:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setCanSpawnSeparateThread:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-setCell:" = {
	    NSControl = NSControl;
	};
	"-setCellAttribute:to:" = {
	    NSCell = NSCell;
	};
	"-setCellBackgroundColor:" = {
	    NSMatrix = NSMatrix;
	};
	"-setCellClass:" = {
	    NSBrowser = NSBrowser;
	    NSMatrix = NSMatrix;
	};
	"-setCellPrototype:" = {
	    NSBrowser = NSBrowser;
	};
	"-setCellSize:" = {
	    NSMatrix = NSMatrix;
	};
	"-setChangeCount:" = {
	    "NSPasteboard(GNUstepExtensions)" = NSPasteboard;
	};
	"-setChangesState:" = {
	    "NSMenuItem(GNUstepExtra)" = NSMenuItem;
	};
	"-setChannelMapping:" = {
	    NSSound = NSSound;
	};
	"-setClearsFilterPredicateOnInsertion:" = {
	    NSArrayController = NSArrayController;
	};
	"-setClip" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setCollectionBehavior:" = {
	    NSWindow = NSWindow;
	};
	"-setCollectionViewLayout:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setColor:" = {
	    NSColorPanel = NSColorPanel;
	    NSColorWell = NSColorWell;
	    NSTabViewItem = NSTabViewItem;
	};
	"-setColor:atX:y:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-setColor:forKey:" = {
	    NSColorList = NSColorList;
	};
	"-setColor:ofRange:" = {
	    NSText = NSText;
	};
	"-setColorSpaceName:" = {
	    NSImageRep = NSImageRep;
	};
	"-setColumnAutoresizingStyle:" = {
	    NSTableView = NSTableView;
	};
	"-setColumnResizingType:" = {
	    NSBrowser = NSBrowser;
	};
	"-setColumnsAutosaveName:" = {
	    NSBrowser = NSBrowser;
	};
	"-setCompletes:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-setCompletionDelay:" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"-setCompositingOperation:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-setCompression:factor:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-setConstrainedFrameSize:" = {
	    NSTextView = NSTextView;
	};
	"-setContainerSize:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-setContent:" = {
	    NSCollectionView = NSCollectionView;
	    NSObjectController = NSObjectController;
	};
	"-setContentAspectRatio:" = {
	    NSWindow = NSWindow;
	};
	"-setContentCompressionResistancePriority:" = {
	    NSView = NSView;
	};
	"-setContentCompressionResistancePriority:forOrientation:" = {
	    "NSView(NSConstraintBasedLayoutCoreMethods)" = NSView;
	};
	"-setContentHuggingPriority:forOrientation:" = {
	    "NSView(NSConstraintBasedLayoutCoreMethods)" = NSView;
	};
	"-setContentInsets:" = {
	    NSScrollView = NSScrollView;
	};
	"-setContentMaxSize:" = {
	    NSWindow = NSWindow;
	};
	"-setContentMinSize:" = {
	    NSWindow = NSWindow;
	};
	"-setContentResizeIncrements:" = {
	    NSWindow = NSWindow;
	};
	"-setContentSize:" = {
	    NSDrawer = NSDrawer;
	    NSWindow = NSWindow;
	};
	"-setContentView:" = {
	    NSBox = NSBox;
	    NSDrawer = NSDrawer;
	    NSScrollView = NSScrollView;
	    NSWindow = NSWindow;
	};
	"-setContentViewMargins:" = {
	    NSBox = NSBox;
	};
	"-setContextHelp:forObject:" = {
	    NSHelpManager = NSHelpManager;
	};
	"-setContextHelp:withObject:" = {
	    NSHelpManager = NSHelpManager;
	};
	"-setContextMenuRepresentation:" = {
	    NSMenu = NSMenu;
	};
	"-setContinuous:" = {
	    NSCell = NSCell;
	    NSColorPanel = NSColorPanel;
	    NSControl = NSControl;
	};
	"-setContinuousSpellCheckingEnabled:" = {
	    NSTextView = NSTextView;
	};
	"-setControlSize:" = {
	    NSCell = NSCell;
	    NSProgressIndicator = NSProgressIndicator;
	    NSScroller = NSScroller;
	    NSTabView = NSTabView;
	};
	"-setControlTint:" = {
	    NSCell = NSCell;
	    NSProgressIndicator = NSProgressIndicator;
	    NSScroller = NSScroller;
	    NSTabView = NSTabView;
	};
	"-setControlView:" = {
	    NSCell = NSCell;
	};
	"-setCopiesOnScroll:" = {
	    NSClipView = NSClipView;
	};
	"-setCornerRadius:" = {
	    NSBox = NSBox;
	};
	"-setCornerView:" = {
	    NSTableView = NSTableView;
	};
	"-setCriteria:andDisplayValues:forRowAtIndex:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setCriteriaKeyPath:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setCurrentTime:" = {
	    NSSound = NSSound;
	};
	"-setCurrentVirtualScreen:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-setData:forType:" = {
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-setDataCell:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setDataProvider:forTypes:" = {
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-setDataRetained:" = {
	    NSImage = NSImage;
	};
	"-setDataSource:" = {
	    NSCollectionView = NSCollectionView;
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSTableView = NSTableView;
	};
	"-setDatePickerElements:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setDatePickerMode:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setDatePickerStyle:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setDateValue:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setDefaultButtonCell:" = {
	    NSWindow = NSWindow;
	};
	"-setDefaultButtonTitle:" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-setDefaultParagraphStyle:" = {
	    NSTextView = NSTextView;
	};
	"-setDefaultTabInterval:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setDelegate:" = {
	    NSAlert = NSAlert;
	    NSApplication = NSApplication;
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSDrawer = NSDrawer;
	    NSFontManager = NSFontManager;
	    NSImage = NSImage;
	    NSMatrix = NSMatrix;
	    NSMenu = NSMenu;
	    NSRuleEditor = NSRuleEditor;
	    NSSound = NSSound;
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	    NSSplitView = NSSplitView;
	    NSTabView = NSTabView;
	    NSTableView = NSTableView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextStorage = NSTextStorage;
	    NSWindow = NSWindow;
	};
	"-setDelegateVerifiesLinks:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-setDepthLimit:" = {
	    NSWindow = NSWindow;
	};
	"-setDimpleImage:resetDividerThickness:" = {
	    "NSSplitView(GNUstepExtra)" = NSSplitView;
	};
	"-setDirectory:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setDirectoryURL:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setDisplayValuesKeyPath:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setDisplayedWhenStopped:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-setDisplaysWhenScreenProfileChanges:" = {
	    NSWindow = NSWindow;
	};
	"-setDividerColor:" = {
	    "NSSplitView(GNUstepExtra)" = NSSplitView;
	};
	"-setDividerStyle:" = {
	    NSSplitView = NSSplitView;
	};
	"-setDocument:" = {
	    NSWindowController = NSWindowController;
	};
	"-setDocumentCursor:" = {
	    NSClipView = NSClipView;
	    NSScrollView = NSScrollView;
	};
	"-setDocumentEdited:" = {
	    NSWindow = NSWindow;
	    NSWindowController = NSWindowController;
	};
	"-setDocumentView:" = {
	    NSClipView = NSClipView;
	    NSScrollView = NSScrollView;
	};
	"-setDoubleAction:" = {
	    NSBrowser = NSBrowser;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-setDoubleValue:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-setDraggedBarWidth:" = {
	    "NSSplitView(GNUstepExtra)" = NSSplitView;
	};
	"-setDraggingSourceOperationMask:forLocal:" = {
	    NSCollectionView = NSCollectionView;
	    NSTableView = NSTableView;
	};
	"-setDrawsBackground:" = {
	    NSClipView = NSClipView;
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSMatrix = NSMatrix;
	    NSScrollView = NSScrollView;
	    NSTabView = NSTabView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-setDrawsCellBackground:" = {
	    NSMatrix = NSMatrix;
	};
	"-setDrawsGrid:" = {
	    NSTableView = NSTableView;
	};
	"-setDropItem:dropChildIndex:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-setDropRow:dropOperation:" = {
	    NSTableView = NSTableView;
	};
	"-setDynamicDepthLimit:" = {
	    NSWindow = NSWindow;
	};
	"-setEchosBullets:" = {
	    NSSecureTextField = NSSecureTextField;
	    NSSecureTextFieldCell = NSSecureTextField;
	};
	"-setEditable:" = {
	    NSCell = NSCell;
	    NSImageView = NSImageView;
	    NSMovieView = NSMovieView;
	    NSObjectController = NSObjectController;
	    NSRuleEditor = NSRuleEditor;
	    NSTableColumn = NSTableColumn;
	    NSText = NSText;
	    NSTextField = NSTextField;
	};
	"-setEnabled:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSFontManager = NSFontManager;
	    NSFontPanel = NSFontPanel;
	};
	"-setEntityName:" = {
	    NSObjectController = NSObjectController;
	};
	"-setEntryType:" = {
	    NSCell = NSCell;
	};
	"-setEntryWidth:" = {
	    NSForm = NSForm;
	};
	"-setErrorAction:" = {
	    NSMatrix = NSMatrix;
	    NSTextField = NSTextField;
	};
	"-setExcludedFromWindowsMenu:" = {
	    NSWindow = NSWindow;
	};
	"-setExtensionHidden:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setFetchPredicate:" = {
	    NSObjectController = NSObjectController;
	};
	"-setFieldEditor:" = {
	    NSText = NSText;
	};
	"-setFileModificationDate:" = {
	    NSDocument = NSDocument;
	};
	"-setFileName:" = {
	    NSDocument = NSDocument;
	};
	"-setFileType:" = {
	    NSDocument = NSDocument;
	};
	"-setFileURL:" = {
	    NSDocument = NSDocument;
	};
	"-setFileWrapper:" = {
	    NSTextAttachment = NSTextAttachment;
	};
	"-setFill" = {
	    NSColor = NSColor;
	};
	"-setFillColor:" = {
	    NSBox = NSBox;
	};
	"-setFilterPredicate:" = {
	    NSArrayController = NSArrayController;
	};
	"-setFirstLineHeadIndent:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setFlatness:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setFlipped:" = {
	    NSImage = NSImage;
	};
	"-setFloatValue:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setFloatValue:knobProportion:" = {
	    NSScroller = NSScroller;
	};
	"-setFloatingPanel:" = {
	    NSPanel = NSPanel;
	};
	"-setFloatingPointFormat:left:right:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setFocusRingType:" = {
	    NSCell = NSCell;
	    NSView = NSView;
	};
	"-setFocusStack:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-setFont:" = {
	    NSButtonCell = NSButtonCell;
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSMenuView = NSMenuView;
	    NSTabView = NSTabView;
	    NSText = NSText;
	    "NSTextStorage(Scripting)" = NSTextStorage;
	};
	"-setFont:ofRange:" = {
	    NSText = NSText;
	};
	"-setFont:range:" = {
	    NSText = NSText;
	};
	"-setFontMenu:" = {
	    NSFontManager = NSFontManager;
	};
	"-setFormatter:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setFormattingDictionary:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setFormattingStringsFilename:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setFrame:" = {
	    NSView = NSView;
	};
	"-setFrame:display:" = {
	    NSWindow = NSWindow;
	};
	"-setFrame:display:animate:" = {
	    NSWindow = NSWindow;
	};
	"-setFrameAutosaveName:" = {
	    NSWindow = NSWindow;
	};
	"-setFrameCenterRotation:" = {
	    NSView = NSView;
	};
	"-setFrameFromContentFrame:" = {
	    NSBox = NSBox;
	};
	"-setFrameFromString:" = {
	    NSWindow = NSWindow;
	};
	"-setFrameOrigin:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-setFrameRotation:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	    NSView = NSView;
	};
	"-setFrameSize:" = {
	    NSView = NSView;
	};
	"-setFrameTopLeftPoint:" = {
	    NSWindow = NSWindow;
	};
	"-setFrameUsingName:" = {
	    NSWindow = NSWindow;
	};
	"-setFrameUsingName:force:" = {
	    NSWindow = NSWindow;
	};
	"-setFullScreen" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-setGradientType:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-setGridColor:" = {
	    NSTableView = NSTableView;
	};
	"-setGridStyleMask:" = {
	    NSTableView = NSTableView;
	};
	"-setHasHorizontalRuler:" = {
	    NSScrollView = NSScrollView;
	};
	"-setHasHorizontalScroller:" = {
	    NSBrowser = NSBrowser;
	    NSScrollView = NSScrollView;
	};
	"-setHasShadow:" = {
	    NSWindow = NSWindow;
	};
	"-setHasUndoManager:" = {
	    NSDocument = NSDocument;
	};
	"-setHasVerticalRuler:" = {
	    NSScrollView = NSScrollView;
	};
	"-setHasVerticalScroller:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSScrollView = NSScrollView;
	};
	"-setHeadIndent:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setHeaderCell:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setHeaderLevel:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setHeaderToolTip:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setHeaderView:" = {
	    NSTableView = NSTableView;
	};
	"-setHeightTracksTextView:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-setHelpAnchor:" = {
	    NSAlert = NSAlert;
	    NSPrintPanel = NSPrintPanel;
	};
	"-setHidden:" = {
	    NSTableColumn = NSTableColumn;
	    NSView = NSView;
	};
	"-setHidesOnDeactivate:" = {
	    NSWindow = NSWindow;
	};
	"-setHighlighted:" = {
	    NSCell = NSCell;
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-setHighlightedItemIndex:" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-setHighlightedTableColumn:" = {
	    NSTableView = NSTableView;
	};
	"-setHighlightsBy:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setHistory:" = {
	    "NSPasteboard(GNUstepExtensions)" = NSPasteboard;
	};
	"-setHorizontal:" = {
	    NSMenuView = NSMenuView;
	};
	"-setHorizontalEdgePadding:" = {
	    NSMenuView = NSMenuView;
	};
	"-setHorizontalLineScroll:" = {
	    NSScrollView = NSScrollView;
	};
	"-setHorizontalPageScroll:" = {
	    NSScrollView = NSScrollView;
	};
	"-setHorizontalPagination:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setHorizontalRulerView:" = {
	    NSScrollView = NSScrollView;
	};
	"-setHorizontalScrollElasticity:" = {
	    NSScrollView = NSScrollView;
	};
	"-setHorizontalScroller:" = {
	    NSScrollView = NSScrollView;
	};
	"-setHorizontallyCentered:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setHorizontallyResizable:" = {
	    NSText = NSText;
	};
	"-setHotSpot:" = {
	    NSCursor = NSCursor;
	};
	"-setHyphenationFactor:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setIcon:" = {
	    NSAlert = NSAlert;
	    "NSFileWrapper(NSExtensions)" = NSFileWrapperExtensions;
	};
	"-setIcon:forFile:options:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-setIdentifier:" = {
	    NSTabViewItem = NSTabViewItem;
	    NSTableColumn = NSTableColumn;
	};
	"-setIgnoredWords:inSpellDocumentWithTag:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-setIgnoresMouseEvents:" = {
	    NSWindow = NSWindow;
	};
	"-setIgnoresMultiClick:" = {
	    NSControl = NSControl;
	};
	"-setImage:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSCell = NSCell;
	    NSCursor = NSCursor;
	    NSImageView = NSImageView;
	    NSRulerMarker = NSRulerMarker;
	    NSSlider = NSSlider;
	};
	"-setImageAlignment:" = {
	    NSImageCell = NSImageCell;
	    NSImageView = NSImageView;
	};
	"-setImageDimsWhenDisabled:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-setImageFrameStyle:" = {
	    NSImageCell = NSImageCell;
	    NSImageView = NSImageView;
	};
	"-setImageInterpolation:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-setImageOrigin:" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-setImagePosition:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setImageScaling:" = {
	    NSButtonCell = NSButtonCell;
	    NSImageCell = NSImageCell;
	    NSImageView = NSImageView;
	};
	"-setImageView:" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-setImportsGraphics:" = {
	    NSCell = NSCell;
	    NSText = NSText;
	    NSTextField = NSTextField;
	};
	"-setInContext:" = {
	    NSFont = NSFont;
	};
	"-setIncrement:" = {
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-setIndentationLevel:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-setIndentationMarkerFollowsCell:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-setIndentationPerLevel:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-setIndeterminate:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-setIndicatorImage:inTableColumn:" = {
	    NSTableView = NSTableView;
	};
	"-setInformativeText:" = {
	    NSAlert = NSAlert;
	};
	"-setInitialFirstResponder:" = {
	    NSTabViewItem = NSTabViewItem;
	    NSWindow = NSWindow;
	};
	"-setInitialValues:" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-setInitiatesDrag:" = {
	    "NSImageView(GNUstep)" = NSImageView;
	};
	"-setInsertionPointColor:" = {
	    NSTextView = NSTextView;
	};
	"-setIntValue:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setIntegerValue:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setInteractsWithUser:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-setIntercellSpacing:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	    NSMatrix = NSMatrix;
	    NSTableView = NSTableView;
	};
	"-setInterfaceStyle:" = {
	    NSResponder = NSResponder;
	};
	"-setInterlineSpacing:" = {
	    NSForm = NSForm;
	};
	"-setIsPaneSplitter:" = {
	    NSSplitView = NSSplitView;
	};
	"-setIsVisible:" = {
	    NSWindow = NSWindow;
	};
	"-setItemHeight:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-setItemPrototype:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setJobDisposition:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setJobStyleHint:" = {
	    NSPrintOperation = NSPrintOperation;
	    NSPrintPanel = NSPrintPanel;
	};
	"-setKeyCell:" = {
	    NSMatrix = NSMatrix;
	};
	"-setKeyEquivalent:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setKeyEquivalentFont:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-setKeyEquivalentFont:size:" = {
	    NSButtonCell = NSButtonCell;
	};
	"-setKeyEquivalentModifierMask:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setKeyboardFocusRingNeedsDisplayInRect:" = {
	    NSView = NSView;
	};
	"-setKnobProportion:" = {
	    NSScroller = NSScroller;
	};
	"-setKnobStyle:" = {
	    NSScroller = NSScroller;
	};
	"-setKnobThickness:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setLabel:" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-setLanguage:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-setLastColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-setLastComponentOfFileName:" = {
	    NSDocument = NSDocument;
	};
	"-setLayerContentsPlacement:" = {
	    NSView = NSView;
	};
	"-setLayerContentsRedrawPolicy:" = {
	    NSView = NSView;
	};
	"-setLayoutManager:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-setLeadingOffset:" = {
	    NSDrawer = NSDrawer;
	};
	"-setLeaf:" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"-setLeftMargin:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setLevel:" = {
	    NSWindow = NSWindow;
	};
	"-setLineBreakMode:" = {
	    NSCell = NSCell;
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setLineCapStyle:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setLineDash:count:phase:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setLineFragmentPadding:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-setLineHeightMultiple:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setLineJoinStyle:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setLineScroll:" = {
	    NSScrollView = NSScrollView;
	};
	"-setLineSpacing:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setLineWidth:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setLink:manager:isMultiple:" = {
	    NSDataLinkPanel = NSDataLinkPanel;
	};
	"-setLinkOutlinesVisible:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-setLinkTextAttributes:" = {
	    NSTextView = NSTextView;
	};
	"-setLoaded:" = {
	    NSBrowserCell = NSBrowserCell;
	};
	"-setLocale:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setLoopMode:" = {
	    NSMovieView = NSMovieView;
	};
	"-setLoops:" = {
	    NSSound = NSSound;
	};
	"-setMain:" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-setMainMenu:" = {
	    NSApplication = NSApplication;
	};
	"-setManagedObjectContext:" = {
	    NSObjectController = NSObjectController;
	};
	"-setMark:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-setMarkedTextAttributes:" = {
	    NSTextView = NSTextView;
	};
	"-setMarkerLocation:" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-setMatchesOnMultipleResolution:" = {
	    NSImage = NSImage;
	};
	"-setMatrix:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-setMatrixClass:" = {
	    NSBrowser = NSBrowser;
	};
	"-setMaxContentSize:" = {
	    NSDrawer = NSDrawer;
	};
	"-setMaxDate:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setMaxItemSize:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setMaxNumberOfColumns:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setMaxNumberOfRows:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setMaxSize:" = {
	    NSText = NSText;
	    NSWindow = NSWindow;
	};
	"-setMaxValue:" = {
	    NSProgressIndicator = NSProgressIndicator;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-setMaxVisibleColumns:" = {
	    NSBrowser = NSBrowser;
	};
	"-setMaxWidth:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setMaximumLineHeight:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setMenu:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    "(NSMenuView)" = NSMenu;
	    NSCell = NSCell;
	    NSMenuView = NSMenuView;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	    NSResponder = NSResponder;
	};
	"-setMenuChangedMessagesEnabled:" = {
	    NSMenu = NSMenu;
	};
	"-setMenuItem:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-setMenuItemCell:forItemAtIndex:" = {
	    NSMenuView = NSMenuView;
	};
	"-setMenuRepresentation:" = {
	    NSMenu = NSMenu;
	};
	"-setMenuView:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-setMessage:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setMessageText:" = {
	    NSAlert = NSAlert;
	};
	"-setMinColumnWidth:" = {
	    NSBrowser = NSBrowser;
	};
	"-setMinContentSize:" = {
	    NSDrawer = NSDrawer;
	};
	"-setMinDate:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setMinItemSize:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setMinSize:" = {
	    NSText = NSText;
	    NSWindow = NSWindow;
	};
	"-setMinValue:" = {
	    NSProgressIndicator = NSProgressIndicator;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-setMinWidth:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setMinimumLineHeight:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setMiniwindowImage:" = {
	    NSWindow = NSWindow;
	};
	"-setMiniwindowTitle:" = {
	    NSWindow = NSWindow;
	};
	"-setMiterLimit:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setMixedStateImage:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-setMnemonicLocation:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	};
	"-setMode:" = {
	    NSColorPanel = NSColorPanel;
	    NSColorPicker = NSColorPicker;
	    NSMatrix = NSMatrix;
	};
	"-setMovable:" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-setMovableByWindowBackground:" = {
	    NSWindow = NSWindow;
	};
	"-setMovie:" = {
	    NSMovieView = NSMovieView;
	};
	"-setMuted:" = {
	    NSMovieView = NSMovieView;
	};
	"-setName:" = {
	    NSImage = NSImage;
	    NSSound = NSSound;
	};
	"-setNameFieldLabel:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setNameFieldStringValue:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setNeedsDisplay" = {
	    NSControl = NSControl;
	};
	"-setNeedsDisplay:" = {
	    NSMenuItemCell = NSMenuItemCell;
	    NSView = NSView;
	};
	"-setNeedsDisplayForItemAtIndex:" = {
	    NSMenuView = NSMenuView;
	};
	"-setNeedsDisplayInRect:" = {
	    NSView = NSView;
	};
	"-setNeedsDisplayInRect:avoidAdditionalLayout:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setNeedsLayout:" = {
	    NSView = NSView;
	};
	"-setNeedsSizing:" = {
	    NSMenuItemCell = NSMenuItemCell;
	    NSMenuView = NSMenuView;
	};
	"-setNeedsUpdateConstraints:" = {
	    NSView = NSView;
	};
	"-setNestingMode:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setNextKeyView:" = {
	    NSView = NSView;
	};
	"-setNextResponder:" = {
	    NSResponder = NSResponder;
	};
	"-setNextState" = {
	    NSButton = NSButton;
	    NSCell = NSCell;
	};
	"-setNextText:" = {
	    NSMatrix = NSMatrix;
	    NSTextField = NSTextField;
	};
	"-setNumberOfTickMarks:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setNumberOfVisibleItems:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-setObject:forProperty:error:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-setObjectClass:" = {
	    NSObjectController = NSObjectController;
	};
	"-setObjectValue:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setOffScreen:width:height:rowbytes:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-setOffStateImage:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-setOnMouseEntered:" = {
	    NSCursor = NSCursor;
	};
	"-setOnMouseExited:" = {
	    NSCursor = NSCursor;
	};
	"-setOnStateImage:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-setOneShot:" = {
	    NSWindow = NSWindow;
	};
	"-setOpaque:" = {
	    NSImageRep = NSImageRep;
	    NSWindow = NSWindow;
	};
	"-setOpenGLContext:" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-setOptions:" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-setOrientation:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setOutlineTableColumn:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-setPageOrder:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-setPageScroll:" = {
	    NSScrollView = NSScrollView;
	};
	"-setPanelFont:isMultiple:" = {
	    NSFontPanel = NSFontPanel;
	};
	"-setPaperName:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setPaperSize:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setParagraphSpacing:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setParagraphSpacingBefore:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setParagraphStyle:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setParentWindow:" = {
	    NSDrawer = NSDrawer;
	    NSWindow = NSWindow;
	};
	"-setPath:" = {
	    NSBrowser = NSBrowser;
	};
	"-setPathSeparator:" = {
	    NSBrowser = NSBrowser;
	};
	"-setPatternPhase:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-setPeriodicDelay:interval:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setPixel:atX:y:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-setPixelFormat:" = {
	    NSOpenGLView = NSOpenGLView;
	};
	"-setPixelsHigh:" = {
	    NSImageRep = NSImageRep;
	};
	"-setPixelsWide:" = {
	    NSImageRep = NSImageRep;
	};
	"-setPlaceholderAttributedString:" = {
	    NSFormCell = NSFormCell;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-setPlaceholderString:" = {
	    NSFormCell = NSFormCell;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-setPlaybackDeviceIdentifier:" = {
	    NSSound = NSSound;
	};
	"-setPlaysEveryFrame:" = {
	    NSMovieView = NSMovieView;
	};
	"-setPlaysSelectionOnly:" = {
	    NSMovieView = NSMovieView;
	};
	"-setPosition:ofDividerAtIndex:" = {
	    NSSplitView = NSSplitView;
	};
	"-setPostsBoundsChangedNotifications:" = {
	    NSView = NSView;
	};
	"-setPostsFrameChangedNotifications:" = {
	    NSView = NSView;
	};
	"-setPredicate:" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-setPreferredEdge:" = {
	    NSDrawer = NSDrawer;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-setPrefersAllColumnUserResizing:" = {
	    NSBrowser = NSBrowser;
	};
	"-setPrefersColorMatch:" = {
	    NSImage = NSImage;
	};
	"-setPrefetchDataSource:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-setPresentationOptions:" = {
	    NSApplication = NSApplication;
	};
	"-setPreservesContentDuringLiveResize:" = {
	    NSWindow = NSWindow;
	};
	"-setPreservesSelection:" = {
	    NSArrayController = NSArrayController;
	};
	"-setPreviousKeyView:" = {
	    NSView = NSView;
	};
	"-setPreviousText:" = {
	    NSMatrix = NSMatrix;
	    NSTextField = NSTextField;
	};
	"-setPrintInfo:" = {
	    NSDocument = NSDocument;
	    NSPrintOperation = NSPrintOperation;
	};
	"-setPrintPanel:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-setPrinter:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setPrompt:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setProperty:withValue:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-setPropertyList:forType:" = {
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-setPrototype:" = {
	    NSMatrix = NSMatrix;
	};
	"-setPullsDown:" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-setRate:" = {
	    NSMovieView = NSMovieView;
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-setRefusesFirstResponder:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setReleasedWhenClosed:" = {
	    NSWindow = NSWindow;
	};
	"-setRemovable:" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-setRepresentedFilename:" = {
	    NSWindow = NSWindow;
	};
	"-setRepresentedObject:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSRulerMarker = NSRulerMarker;
	};
	"-setRequiredFileType:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setResizable:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setResizeIncrements:" = {
	    NSWindow = NSWindow;
	};
	"-setResizingMask:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setResolvesAliases:" = {
	    NSOpenPanel = NSOpenPanel;
	};
	"-setReusesColumns:" = {
	    NSBrowser = NSBrowser;
	};
	"-setRichText:" = {
	    NSText = NSText;
	};
	"-setRightMargin:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setRowClass:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setRowHeight:" = {
	    NSRuleEditor = NSRuleEditor;
	    NSTableView = NSTableView;
	};
	"-setRowTemplates:" = {
	    NSPredicateEditor = NSPredicateEditor;
	};
	"-setRowTypeKeyPath:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setRulerVisible:" = {
	    NSTextView = NSTextView;
	};
	"-setRulersVisible:" = {
	    NSScrollView = NSScrollView;
	};
	"-setScalesWhenResized:" = {
	    NSImage = NSImage;
	};
	"-setScrollable:" = {
	    NSCell = NSCell;
	    NSMatrix = NSMatrix;
	};
	"-setScrollerInsets:" = {
	    NSScrollView = NSScrollView;
	};
	"-setScrollerKnobStyle:" = {
	    NSScrollView = NSScrollView;
	};
	"-setScrollerStyle:" = {
	    NSScrollView = NSScrollView;
	    NSScroller = NSScroller;
	};
	"-setScrollsDynamically:" = {
	    NSScrollView = NSScrollView;
	};
	"-setSelectable:" = {
	    NSCell = NSCell;
	    NSCollectionView = NSCollectionView;
	    NSText = NSText;
	    NSTextField = NSTextField;
	};
	"-setSelected:" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-setSelectedAttributes:isMultiple:" = {
	    NSFontManager = NSFontManager;
	};
	"-setSelectedFont:isMultiple:" = {
	    NSFontManager = NSFontManager;
	};
	"-setSelectedObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-setSelectedRange:" = {
	    NSText = NSText;
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setSelectedRange:affinity:stillSelecting:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setSelectedRanges:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setSelectedRanges:affinity:stillSelecting:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setSelectedTextAttributes:" = {
	    NSTextView = NSTextView;
	};
	"-setSelectionByRect:" = {
	    NSMatrix = NSMatrix;
	};
	"-setSelectionFrom:to:anchor:highlight:" = {
	    NSMatrix = NSMatrix;
	};
	"-setSelectionGranularity:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setSelectionHighlightStyle:" = {
	    NSTableView = NSTableView;
	};
	"-setSelectionIndex:" = {
	    NSArrayController = NSArrayController;
	};
	"-setSelectionIndexPath:" = {
	    NSBrowser = NSBrowser;
	};
	"-setSelectionIndexPaths:" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	};
	"-setSelectionIndexes:" = {
	    NSArrayController = NSArrayController;
	    NSCollectionView = NSCollectionView;
	};
	"-setSelectsInsertedObjects:" = {
	    NSArrayController = NSArrayController;
	};
	"-setSendsActionOnAlphaNumericalKeys:" = {
	    "NSBrowser(GNUstepExtensions)" = NSBrowser;
	};
	"-setSendsActionOnArrowKeys:" = {
	    NSBrowser = NSBrowser;
	};
	"-setSendsActionOnEndEditing:" = {
	    NSCell = NSCell;
	};
	"-setSeparatesColumns:" = {
	    NSBrowser = NSBrowser;
	};
	"-setServicesMenu:" = {
	    NSApplication = NSApplication;
	};
	"-setServicesProvider:" = {
	    NSApplication = NSApplication;
	};
	"-setShadow:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	    "NSView(CoreAnimationSupport)" = NSView;
	};
	"-setShouldAntialias:" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-setShouldCascadeWindows:" = {
	    NSWindowController = NSWindowController;
	};
	"-setShouldCloseDocument:" = {
	    NSWindowController = NSWindowController;
	};
	"-setShouldCreateUI:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-setShowPanels:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-setShowsAlpha:" = {
	    NSColorPanel = NSColorPanel;
	};
	"-setShowsBorderOnlyWhileMouseInside:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setShowsFirstResponder:" = {
	    NSCell = NSCell;
	};
	"-setShowsHelp:" = {
	    NSAlert = NSAlert;
	};
	"-setShowsHiddenFiles:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setShowsPrintPanel:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-setShowsProgressPanel:" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-setShowsResizeIndicator:" = {
	    NSWindow = NSWindow;
	};
	"-setShowsStateBy:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setShowsToolbarButton:" = {
	    NSWindow = NSWindow;
	};
	"-setSize:" = {
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"-setSliderType:" = {
	    NSSliderCell = NSSliderCell;
	};
	"-setSmartInsertDeleteEnabled:" = {
	    NSTextView = NSTextView;
	};
	"-setSortDescriptorPrototype:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setSortDescriptors:" = {
	    NSArrayController = NSArrayController;
	    NSTableView = NSTableView;
	};
	"-setSound:" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setState:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSCell = NSCell;
	};
	"-setState:atRow:column:" = {
	    NSMatrix = NSMatrix;
	};
	"-setString:" = {
	    NSText = NSText;
	};
	"-setString:forType:" = {
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-setStringValue:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setStroke" = {
	    NSColor = NSColor;
	};
	"-setStyle:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-setSubmenu:" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-setSubmenu:forItem:" = {
	    NSMenu = NSMenu;
	};
	"-setSubrowsKeyPath:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-setSubviews:" = {
	    NSView = NSView;
	};
	"-setSupermenu:" = {
	    NSMenu = NSMenu;
	};
	"-setTabKeyTraversesCells:" = {
	    NSMatrix = NSMatrix;
	};
	"-setTabStops:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setTabViewType:" = {
	    NSTabView = NSTabView;
	};
	"-setTableView:" = {
	    NSTableColumn = NSTableColumn;
	    NSTableHeaderView = NSTableHeaderView;
	};
	"-setTag:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-setTailIndent:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setTakesTitleFromPreviousColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-setTarget:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSColorPanel = NSColorPanel;
	    NSControl = NSControl;
	};
	"-setTearOffMenuRepresentation:" = {
	    NSMenu = NSMenu;
	};
	"-setText:" = {
	    NSText = NSText;
	};
	"-setText:range:" = {
	    NSText = NSText;
	};
	"-setTextAlignment:" = {
	    NSForm = NSForm;
	};
	"-setTextBaseWritingDirection:" = {
	    NSForm = NSForm;
	};
	"-setTextBlocks:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setTextColor:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-setTextColor:range:" = {
	    NSText = NSText;
	};
	"-setTextContainer:" = {
	    NSTextView = NSTextView;
	};
	"-setTextContainerInset:" = {
	    NSTextView = NSTextView;
	};
	"-setTextField:" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-setTextFont:" = {
	    NSForm = NSForm;
	};
	"-setTextLists:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setTextView:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-setTickMarkPosition:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setTighteningFactorForTruncation:" = {
	    NSMutableParagraphStyle = NSParagraphStyle;
	};
	"-setTimeInterval:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setTimeZone:" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-setTitle:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSBox = NSBox;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSCell = NSCell;
	    NSFormCell = NSFormCell;
	    NSMenu = NSMenu;
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	    NSSavePanel = NSSavePanel;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	    NSTableColumn = NSTableColumn;
	    NSWindow = NSWindow;
	};
	"-setTitle:ofColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-setTitleAlignment:" = {
	    NSForm = NSForm;
	    NSFormCell = NSFormCell;
	};
	"-setTitleBaseWritingDirection:" = {
	    NSForm = NSForm;
	    NSFormCell = NSFormCell;
	};
	"-setTitleCell:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setTitleColor:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setTitleFont:" = {
	    NSBox = NSBox;
	    NSForm = NSForm;
	    NSFormCell = NSFormCell;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-setTitlePosition:" = {
	    NSBox = NSBox;
	};
	"-setTitleWidth:" = {
	    NSFormCell = NSFormCell;
	};
	"-setTitleWithMnemonic:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSBox = NSBox;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSCell = NSCell;
	    NSFormCell = NSFormCell;
	    NSTextField = NSTextField;
	};
	"-setTitleWithRepresentedFilename:" = {
	    NSWindow = NSWindow;
	};
	"-setTitled:" = {
	    NSBrowser = NSBrowser;
	};
	"-setTokenStyle:" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"-setTokenizingCharacterSet:" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"-setToolTip:" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSTabViewItem = NSTabViewItem;
	    NSView = NSView;
	};
	"-setToolTip:forCell:" = {
	    NSMatrix = NSMatrix;
	};
	"-setToolbar:" = {
	    "NSWindow(Toolbar)" = NSWindow;
	};
	"-setTopMargin:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setTornOff:" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-setTrailingOffset:" = {
	    NSDrawer = NSDrawer;
	};
	"-setTranslatesAutoresizingMaskIntoConstraints:" = {
	    NSView = NSView;
	};
	"-setTransparent:" = {
	    NSBox = NSBox;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-setTreatsFilePackagesAsDirectories:" = {
	    NSSavePanel = NSSavePanel;
	};
	"-setType:" = {
	    NSCell = NSCell;
	};
	"-setTypingAttributes:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-setUndoManager:" = {
	    NSDocument = NSDocument;
	};
	"-setUpFieldEditorAttributes:" = {
	    NSCell = NSCell;
	};
	"-setUpGState" = {
	    NSView = NSView;
	};
	"-setUpPrintOperationDefaultValues" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setUpdateMode:" = {
	    NSDataLink = NSDataLink;
	};
	"-setUserInterfaceLayoutDirection:" = {
	    NSCell = NSCell;
	    NSView = NSView;
	};
	"-setUsesAlternatingRowBackgroundColors:" = {
	    NSTableView = NSTableView;
	};
	"-setUsesDataSource:" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-setUsesEPSOnResolutionMismatch:" = {
	    NSImage = NSImage;
	};
	"-setUsesFeebackWindow:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-setUsesFindPanel:" = {
	    NSTextView = NSTextView;
	};
	"-setUsesFontPanel:" = {
	    NSText = NSText;
	};
	"-setUsesItemFromMenu:" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-setUsesRuler:" = {
	    NSTextView = NSTextView;
	};
	"-setUsesSingleLineMode:" = {
	    NSCell = NSCell;
	};
	"-setUsesThreadedAnimation:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-setValidateSize:" = {
	    NSMatrix = NSMatrix;
	};
	"-setValueWraps:" = {
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-setValues:forParameter:" = {
	    NSOpenGLContext = NSOpenGL;
	};
	"-setVertical:" = {
	    "NSProgressIndicator(GNUstepExtensions)" = NSProgressIndicator;
	    NSSplitView = NSSplitView;
	};
	"-setVerticalLineScroll:" = {
	    NSScrollView = NSScrollView;
	};
	"-setVerticalMotionCanBeginDrag:" = {
	    NSTableView = NSTableView;
	};
	"-setVerticalPageScroll:" = {
	    NSScrollView = NSScrollView;
	};
	"-setVerticalPagination:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setVerticalRulerView:" = {
	    NSScrollView = NSScrollView;
	};
	"-setVerticalScrollElasticity:" = {
	    NSScrollView = NSScrollView;
	};
	"-setVerticalScroller:" = {
	    NSScrollView = NSScrollView;
	};
	"-setVerticallyCentered:" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-setVerticallyResizable:" = {
	    NSText = NSText;
	};
	"-setView:" = {
	    NSOpenGLContext = NSOpenGL;
	    NSTabViewItem = NSTabViewItem;
	};
	"-setViewController:" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-setViewsNeedDisplay:" = {
	    NSWindow = NSWindow;
	};
	"-setVoice:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-setVolume:" = {
	    NSMovieView = NSMovieView;
	    NSSound = NSSound;
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-setWidth:" = {
	    NSTableColumn = NSTableColumn;
	};
	"-setWidth:ofColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-setWidthTracksTextView:" = {
	    NSTextContainer = NSTextContainer;
	};
	"-setWindingRule:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-setWindow:" = {
	    NSDocument = NSDocument;
	    NSWindowController = NSWindowController;
	};
	"-setWindowController:" = {
	    NSWindow = NSWindow;
	};
	"-setWindowFrameAutosaveName:" = {
	    NSWindowController = NSWindowController;
	};
	"-setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:" = {
	    NSMenuView = NSMenuView;
	};
	"-setWindowsMenu:" = {
	    NSApplication = NSApplication;
	};
	"-setWindowsNeedUpdate:" = {
	    NSApplication = NSApplication;
	};
	"-setWordFieldStringValue:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-setWorksWhenModal:" = {
	    NSPanel = NSPanel;
	};
	"-setWraps:" = {
	    NSCell = NSCell;
	};
	"-shadow" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	    "NSView(CoreAnimationSupport)" = NSView;
	};
	"-shadowWithLevel:" = {
	    NSColor = NSColor;
	};
	"-sheetParent" = {
	    NSWindow = NSWindow;
	};
	"-shiftOnScreen" = {
	    "NSMenu(GNUstepExtra)" = NSMenu;
	};
	"-shouldAntialias" = {
	    NSGraphicsContext = NSGraphicsContext;
	};
	"-shouldBeTreatedAsInkEvent:" = {
	    NSResponder = NSResponder;
	};
	"-shouldCascadeWindows" = {
	    NSWindowController = NSWindowController;
	};
	"-shouldChangePrintInfo:" = {
	    NSDocument = NSDocument;
	};
	"-shouldChangeTextInRange:replacementString:" = {
	    NSTextView = NSTextView;
	};
	"-shouldChangeTextInRanges:replacementStrings:" = {
	    NSTextView = NSTextView;
	};
	"-shouldCloseDocument" = {
	    NSWindowController = NSWindowController;
	};
	"-shouldCloseWindowController:" = {
	    NSDocument = NSDocument;
	};
	"-shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:" = {
	    NSDocument = NSDocument;
	};
	"-shouldCollapseAutoExpandedItemsForDeposited:" = {
	    NSOutlineView = NSOutlineView;
	};
	"-shouldCreateUI" = {
	    NSDocumentController = NSDocumentController;
	};
	"-shouldDelayWindowOrderingForEvent:" = {
	    NSView = NSView;
	};
	"-shouldDrawColor" = {
	    NSView = NSView;
	};
	"-shouldDrawInsertionPoint" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-shouldRunSavePanelWithAccessoryView" = {
	    NSDocument = NSDocument;
	};
	"-showContextHelp:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-showContextHelpForObject:locationHint:" = {
	    NSHelpManager = NSHelpManager;
	};
	"-showController:adjustingSize:" = {
	    NSMovieView = NSMovieView;
	};
	"-showFile:atMarker:" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"-showGuessPanel:" = {
	    NSText = NSText;
	};
	"-showHelp:" = {
	    "NSApplication(NSHelpManager)" = NSHelpManager;
	};
	"-showHelpAttachedTo:" = {
	    NSHelpPanel = NSHelpPanel;
	};
	"-showPage" = {
	    "NSGraphicsContext(Printing)" = NSGraphicsContext;
	};
	"-showPanels" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-showSelection:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-showWindow:" = {
	    NSWindowController = NSWindowController;
	};
	"-showWindows" = {
	    NSDocument = NSDocument;
	};
	"-showsAlpha" = {
	    NSColorPanel = NSColorPanel;
	};
	"-showsBorderOnlyWhileMouseInside" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-showsFirstResponder" = {
	    NSCell = NSCell;
	};
	"-showsHelp" = {
	    NSAlert = NSAlert;
	};
	"-showsHiddenFiles" = {
	    NSSavePanel = NSSavePanel;
	};
	"-showsPrintPanel" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-showsProgressPanel" = {
	    NSPrintOperation = NSPrintOperation;
	};
	"-showsResizeIndicator" = {
	    NSWindow = NSWindow;
	};
	"-showsStateBy" = {
	    NSButtonCell = NSButtonCell;
	};
	"-showsToolbarButton" = {
	    NSWindow = NSWindow;
	};
	"-size" = {
	    "NSAttributedString(NSStringDrawing)" = NSStringDrawing;
	    NSImage = NSImage;
	    NSImageRep = NSImageRep;
	};
	"-sizeForKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-sizeForMagnification:" = {
	    NSMovieView = NSMovieView;
	};
	"-sizeInMatrixSpace:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-sizeLastColumnToFit" = {
	    NSTableView = NSTableView;
	};
	"-sizeOfLabel:" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-sizeThatFits:" = {
	    NSControl = NSControl;
	};
	"-sizeToCells" = {
	    NSMatrix = NSMatrix;
	};
	"-sizeToFit" = {
	    "(NSMenuView)" = NSMenu;
	    NSBox = NSBox;
	    NSControl = NSControl;
	    NSMenu = NSMenu;
	    NSMenuView = NSMenuView;
	    NSProgressIndicator = NSProgressIndicator;
	    NSTableColumn = NSTableColumn;
	    NSText = NSText;
	};
	"-sizeWithAttributes:" = {
	    "NSString(NSStringDrawing)" = NSStringDrawing;
	};
	"-slideImage:from:to:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-sliderType" = {
	    NSSliderCell = NSSliderCell;
	};
	"-smartDeleteRangeForProposedRange:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-smartInsertAfterStringForString:replacingRange:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-smartInsertBeforeStringForString:replacingRange:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-smartInsertDeleteEnabled" = {
	    NSTextView = NSTextView;
	};
	"-smartInsertForString:replacingRange:beforeString:afterString:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-sortDescriptorPrototype" = {
	    NSTableColumn = NSTableColumn;
	};
	"-sortDescriptors" = {
	    NSArrayController = NSArrayController;
	    NSTableView = NSTableView;
	};
	"-sortIndicatorRectForBounds:" = {
	    NSTableHeaderCell = NSTableHeaderCell;
	};
	"-sortSubviewsUsingFunction:context:" = {
	    NSView = NSView;
	};
	"-sortUsingFunction:context:" = {
	    NSMatrix = NSMatrix;
	};
	"-sortUsingSelector:" = {
	    NSMatrix = NSMatrix;
	};
	"-sound" = {
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	};
	"-sound:didFinishPlaying:" = {
	    "NSObject(NSSoundDelegate)" = NSSound;
	};
	"-sourceApplicationName" = {
	    NSDataLink = NSDataLink;
	};
	"-sourceFilename" = {
	    NSDataLink = NSDataLink;
	};
	"-sourceLinkEnumerator" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-sourceSelection" = {
	    NSDataLink = NSDataLink;
	};
	"-speechSynthesizer:didEncounterErrorAtIndex:ofString:message:" = {
	    "NSObject(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	};
	"-speechSynthesizer:didEncounterSyncMessage:" = {
	    "NSObject(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	};
	"-speechSynthesizer:didFinishSpeaking:" = {
	    "NSObject(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	};
	"-speechSynthesizer:willSpeakPhoneme:" = {
	    "NSObject(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	};
	"-speechSynthesizer:willSpeakWord:ofString:" = {
	    "NSObject(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	};
	"-spellCheckerDocumentTag" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-spellingPanel" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-splitView:additionalEffectiveRectOfDividerAtIndex:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:canCollapseSubview:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:constrainMaxCoordinate:ofSubviewAt:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:constrainMinCoordinate:maxCoordinate:ofSubviewAt:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:constrainMinCoordinate:ofSubviewAt:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:constrainSplitPosition:ofSubviewAt:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:resizeSubviewsWithOldSize:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:shouldAdjustSizeOfSubview:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitView:shouldHideDividerAtIndex:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitViewDidResizeSubviews:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-splitViewWillResizeSubviews:" = {
	    "NSObject(NSSplitViewDelegate)" = NSSplitView;
	};
	"-standardWindowButton:" = {
	    NSWindow = NSWindow;
	};
	"-start:" = {
	    NSMovieView = NSMovieView;
	};
	"-startAnimation:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-startSpeaking:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-startSpeakingString:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-startSpeakingString:toURL:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-startTrackingAt:inView:" = {
	    NSCell = NSCell;
	};
	"-state" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSButton = NSButton;
	    NSCell = NSCell;
	    NSDrawer = NSDrawer;
	};
	"-stateImageOffset" = {
	    NSMenuView = NSMenuView;
	};
	"-stateImageRectForBounds:" = {
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-stateImageWidth" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuItemCell = NSMenuItemCell;
	    NSMenuView = NSMenuView;
	};
	"-statusForTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-stepBack:" = {
	    NSMovieView = NSMovieView;
	};
	"-stepForward:" = {
	    NSMovieView = NSMovieView;
	};
	"-stop" = {
	    NSSound = NSSound;
	};
	"-stop:" = {
	    NSApplication = NSApplication;
	    NSMovieView = NSMovieView;
	};
	"-stopAnimation:" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-stopModal" = {
	    NSApplication = NSApplication;
	};
	"-stopModalWithCode:" = {
	    NSApplication = NSApplication;
	};
	"-stopSpeaking" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-stopSpeaking:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-stopSpeakingAtBoundary:" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-stopTracking:at:inView:mouseIsUp:" = {
	    NSCell = NSCell;
	};
	"-string" = {
	    NSText = NSText;
	    NSTextStorage = NSTextStorage;
	};
	"-stringForKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-stringForType:" = {
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-stringListForKey:inTable:" = {
	    NSPrinter = NSPrinter;
	};
	"-stringValue" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-stringWithSavedFrame" = {
	    NSWindow = NSWindow;
	};
	"-stroke" = {
	    NSBezierPath = NSBezierPath;
	};
	"-style" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-styleMask" = {
	    NSWindow = NSWindow;
	};
	"-submenu" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-submenuAction:" = {
	    NSMenu = NSMenu;
	};
	"-subrowIndexesForRow:" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-subrowsKeyPath" = {
	    NSRuleEditor = NSRuleEditor;
	};
	"-subscript:" = {
	    NSText = NSText;
	};
	"-subscriptRange:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-subtype" = {
	    NSEvent = NSEvent;
	};
	"-subviews" = {
	    NSView = NSView;
	};
	"-supermenu" = {
	    NSMenu = NSMenu;
	};
	"-superscript:" = {
	    NSText = NSText;
	};
	"-superscriptRange:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-superview" = {
	    NSView = NSView;
	};
	"-supplementaryViewForElementKind:atIndexPath:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-supportedWindowDepths" = {
	    NSScreen = NSScreen;
	};
	"-supportsDrawGState" = {
	    "NSGraphicsContext(Ops)" = NSGraphicsContext;
	};
	"-swapWithMark:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-symbolicTraits" = {
	    NSFontDescriptor = NSFontDescriptor;
	};
	"-synchronizeTitleAndSelectedItem" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-synchronizeWindowTitleWithDocumentName" = {
	    NSWindowController = NSWindowController;
	};
	"-systemTabletID" = {
	    NSEvent = NSEvent;
	};
	"-tabKeyTraversesCells" = {
	    NSMatrix = NSMatrix;
	};
	"-tabState" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-tabStopType" = {
	    NSTextTab = NSParagraphStyle;
	};
	"-tabStops" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-tabView" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-tabView:didSelectTabViewItem:" = {
	    "(NSTabViewDelegate)" = NSTabView;
	};
	"-tabView:shouldSelectTabViewItem:" = {
	    "(NSTabViewDelegate)" = NSTabView;
	};
	"-tabView:willSelectTabViewItem:" = {
	    "(NSTabViewDelegate)" = NSTabView;
	};
	"-tabViewDidChangeNumberOfTabViewItems:" = {
	    "(NSTabViewDelegate)" = NSTabView;
	};
	"-tabViewItemAtIndex:" = {
	    NSTabView = NSTabView;
	};
	"-tabViewItemAtPoint:" = {
	    NSTabView = NSTabView;
	};
	"-tabViewItems" = {
	    NSTabView = NSTabView;
	};
	"-tabViewType" = {
	    NSTabView = NSTabView;
	};
	"-tableColumnWithIdentifier:" = {
	    NSTableView = NSTableView;
	};
	"-tableColumns" = {
	    NSTableView = NSTableView;
	};
	"-tableView" = {
	    NSTableColumn = NSTableColumn;
	    NSTableHeaderView = NSTableHeaderView;
	};
	"-tableView:acceptDrop:row:dropOperation:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableView:dataCellForTableColumn:row:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:didAddRowView:forRow:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:didClickTableColumn:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:didDragTableColumn:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:didRemoveRowView:forRow:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:heightOfRow:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:mouseDownInHeaderOfTableColumn:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableView:objectValueForTableColumn:row:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableView:rowViewForRow:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:setObjectValue:forTableColumn:row:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableView:shouldEditTableColumn:row:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:shouldSelectRow:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:shouldSelectTableColumn:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:sortDescriptorsDidChange:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:validateDrop:proposedRow:proposedDropOperation:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableView:viewForTableColumn:row:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:willDisplayCell:forTableColumn:row:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableView:writeRows:toPasteboard:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableView:writeRowsWithIndexes:toPasteboard:" = {
	    "NSObject(NSTableDataSource)" = NSTableView;
	};
	"-tableViewColumnDidMove:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableViewColumnDidResize:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableViewSelectionDidChange:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tableViewSelectionIsChanging:" = {
	    "NSObject(NSTableViewDelegate)" = NSTableView;
	};
	"-tabletID" = {
	    NSEvent = NSEvent;
	};
	"-tabletPoint:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-tabletProximity:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-tag" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSControl = NSControl;
	    NSView = NSView;
	};
	"-tailIndent" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-takeColorFrom:" = {
	    NSColorWell = NSColorWell;
	};
	"-takeDoubleValueFrom:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-takeFloatValueFrom:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-takeIntValueFrom:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-takeIntegerValueFrom:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-takeMatrixFromTransform:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-takeObjectValueFrom:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-takeSelectedTabViewItemFromSender:" = {
	    NSTabView = NSTabView;
	};
	"-takeStringValueFrom:" = {
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-takesTitleFromPreviousColumn" = {
	    NSBrowser = NSBrowser;
	};
	"-tangentialPressure" = {
	    NSEvent = NSEvent;
	};
	"-target" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSCell = NSCell;
	    NSControl = NSControl;
	};
	"-targetForAction:" = {
	    NSApplication = NSApplication;
	};
	"-targetForAction:to:from:" = {
	    NSApplication = NSApplication;
	};
	"-tearOffMenuRepresentation" = {
	    NSMenu = NSMenu;
	};
	"-templateViews" = {
	    NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	};
	"-terminate:" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	    NSApplication = NSApplication;
	};
	"-testPart:" = {
	    NSScroller = NSScroller;
	};
	"-text" = {
	    NSText = NSText;
	};
	"-textBlocks" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-textColor" = {
	    "NSCell(PrivateMethods)" = NSCell;
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	    NSText = NSText;
	    NSTextField = NSTextField;
	    NSTextFieldCell = NSTextFieldCell;
	};
	"-textContainer" = {
	    NSTextView = NSTextView;
	};
	"-textContainerInset" = {
	    NSTextView = NSTextView;
	};
	"-textContainerOrigin" = {
	    NSTextView = NSTextView;
	};
	"-textDidBeginEditing:" = {
	    NSMatrix = NSMatrix;
	    "NSObject(NSTextDelegate)" = NSText;
	    NSTableView = NSTableView;
	    NSTextField = NSTextField;
	};
	"-textDidChange:" = {
	    NSMatrix = NSMatrix;
	    "NSObject(NSTextDelegate)" = NSText;
	    NSTableView = NSTableView;
	    NSTextField = NSTextField;
	};
	"-textDidEndEditing:" = {
	    NSMatrix = NSMatrix;
	    "NSObject(NSTextDelegate)" = NSText;
	    NSTableView = NSTableView;
	    NSTextField = NSTextField;
	};
	"-textField" = {
	    NSCollectionViewItem = NSCollectionViewItem;
	};
	"-textLength" = {
	    "NSText(GNUstepExtensions)" = NSText;
	};
	"-textLists" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-textShouldBeginEditing:" = {
	    NSMatrix = NSMatrix;
	    "NSObject(NSTextDelegate)" = NSText;
	    NSTableView = NSTableView;
	    NSTextField = NSTextField;
	};
	"-textShouldEndEditing:" = {
	    NSMatrix = NSMatrix;
	    "NSObject(NSTextDelegate)" = NSText;
	    NSTableView = NSTableView;
	    NSTextField = NSTextField;
	};
	"-textStorage" = {
	    NSTextView = NSTextView;
	};
	"-textStorageDidProcessEditing:" = {
	    "NSObject(NSTextStorageDelegate)" = NSTextStorage;
	};
	"-textStorageWillProcessEditing:" = {
	    "NSObject(NSTextStorageDelegate)" = NSTextStorage;
	};
	"-textTransform" = {
	    NSFont = NSFont;
	};
	"-textView" = {
	    NSTextContainer = NSTextContainer;
	};
	"-textView:clickedOnCell:inRect:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:clickedOnCell:inRect:atIndex:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:clickedOnLink:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:clickedOnLink:atIndex:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:completions:forPartialWordRange:indexOfSelectedItem:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:doCommandBySelector:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:doubleClickedOnCell:inRect:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:doubleClickedOnCell:inRect:atIndex:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:draggedCell:inRect:event:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:draggedCell:inRect:event:atIndex:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:shouldChangeTextInRange:replacementString:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:shouldChangeTextInRanges:replacementStrings:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:shouldChangeTypingAttributes:toAttributes:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:willChangeSelectionFromCharacterRange:toCharacterRange:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textView:willDisplayToolTip:forCharacterAtIndex:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textViewDidChangeSelection:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-textViewDidChangeTypingAttributes:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-thicknessRequiredInRuler" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-tickMarkPosition" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-tickMarkValueAtIndex:" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-tightenKerning:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-tighteningFactorForTruncation" = {
	    NSParagraphStyle = NSParagraphStyle;
	};
	"-tile" = {
	    NSBrowser = NSBrowser;
	    NSCollectionView = NSCollectionView;
	    NSScrollView = NSScrollView;
	    NSTableView = NSTableView;
	};
	"-tilt" = {
	    NSEvent = NSEvent;
	};
	"-timeInterval" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-timeZone" = {
	    NSDatePicker = NSDatePicker;
	    NSDatePickerCell = NSDatePickerCell;
	};
	"-timestamp" = {
	    NSEvent = NSEvent;
	};
	"-title" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSBox = NSBox;
	    NSButton = NSButton;
	    NSButtonCell = NSButtonCell;
	    NSCell = NSCell;
	    NSFormCell = NSFormCell;
	    NSMenu = NSMenu;
	    NSSavePanel = NSSavePanel;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	    NSTableColumn = NSTableColumn;
	    NSWindow = NSWindow;
	};
	"-titleAlignment" = {
	    NSFormCell = NSFormCell;
	};
	"-titleBaseWritingDirection" = {
	    NSFormCell = NSFormCell;
	};
	"-titleCell" = {
	    NSBox = NSBox;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-titleColor" = {
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-titleFont" = {
	    NSBox = NSBox;
	    NSFormCell = NSFormCell;
	    NSSlider = NSSlider;
	    NSSliderCell = NSSliderCell;
	};
	"-titleFrameOfColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-titleHeight" = {
	    NSBrowser = NSBrowser;
	};
	"-titleOfColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-titleOfSelectedItem" = {
	    NSPopUpButton = NSPopUpButton;
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-titlePosition" = {
	    NSBox = NSBox;
	};
	"-titleRect" = {
	    NSBox = NSBox;
	};
	"-titleRectForBounds:" = {
	    NSCell = NSCell;
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-titleWidth" = {
	    NSFormCell = NSFormCell;
	    NSMenuItemCell = NSMenuItemCell;
	};
	"-titleWidth:" = {
	    NSFormCell = NSFormCell;
	};
	"-toggle:" = {
	    NSDrawer = NSDrawer;
	};
	"-toggleBaseWritingDirection:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-toggleContinuousSpellChecking:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-toggleRuler:" = {
	    NSText = NSText;
	};
	"-toggleSectionCollapse:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-toggleSmartInsertDelete:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-toggleToolbarShown:" = {
	    "NSWindow(Toolbar)" = NSWindow;
	};
	"-toggleTraditionalCharacterShape:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-tokenStyle" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"-tokenizingCharacterSet" = {
	    NSTokenField = NSTokenField;
	    NSTokenFieldCell = NSTokenFieldCell;
	};
	"-toolTip" = {
	    "(NSMenuItem)" = NSMenuItem;
	    NSTabViewItem = NSTabViewItem;
	    NSView = NSView;
	};
	"-toolTipForCell:" = {
	    NSMatrix = NSMatrix;
	};
	"-toolbar" = {
	    "NSWindow(Toolbar)" = NSWindow;
	};
	"-topMargin" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-trackKnob:" = {
	    NSScroller = NSScroller;
	};
	"-trackMouse:adding:" = {
	    NSRulerMarker = NSRulerMarker;
	};
	"-trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-trackMouse:inRect:ofView:untilMouseUp:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	    NSCell = NSCell;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-trackRect" = {
	    NSSliderCell = NSSliderCell;
	};
	"-trackScrollButtons:" = {
	    NSScroller = NSScroller;
	};
	"-trackWithEvent:" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenuView = NSMenuView;
	};
	"-trackingNumber" = {
	    NSEvent = NSEvent;
	};
	"-trailingOffset" = {
	    NSDrawer = NSDrawer;
	};
	"-traitsOfFont:" = {
	    NSFontManager = NSFontManager;
	};
	"-transformBezierPath:" = {
	    "NSAffineTransform(GUIAdditions)" = NSAffineTransform;
	};
	"-transformUsingAffineTransform:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-translateOriginToPoint:" = {
	    NSView = NSView;
	};
	"-translateToPoint:" = {
	    "NSAffineTransform(GNUstep)" = NSAffineTransform;
	};
	"-translatesAutoresizingMaskIntoConstraints" = {
	    NSView = NSView;
	};
	"-transpose:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-transposeWords:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-treatsFilePackagesAsDirectories" = {
	    NSSavePanel = NSSavePanel;
	};
	"-tryToPerform:with:" = {
	    NSApplication = NSApplication;
	    NSResponder = NSResponder;
	    NSWindow = NSWindow;
	};
	"-turnOffKerning:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-turnOffLigatures:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-type" = {
	    NSCell = NSCell;
	    NSColor = NSColor;
	    NSEvent = NSEvent;
	    NSPrinter = NSPrinter;
	};
	"-type:conformsToType:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-typeForContentsOfURL:error:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-typeFromFileExtension:" = {
	    NSDocumentController = NSDocumentController;
	};
	"-typeOfFile:error:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-types" = {
	    NSDataLink = NSDataLink;
	    NSPasteboard = NSPasteboard;
	    NSPasteboardItem = NSPasteboardItem;
	};
	"-typingAttributes" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-unbind:" = {
	    "NSObject(NSKeyValueBindingCreation)" = NSKeyValueBinding;
	};
	"-underline:" = {
	    NSText = NSText;
	};
	"-underlinePosition" = {
	    NSFont = NSFont;
	};
	"-underlineThickness" = {
	    NSFont = NSFont;
	};
	"-undo:" = {
	    NSMovieView = NSMovieView;
	};
	"-undoManager" = {
	    NSDocument = NSDocument;
	    NSResponder = NSResponder;
	};
	"-undoManagerForTextView:" = {
	    "NSObject(NSTextViewDelegate)" = NSTextView;
	};
	"-unhide:" = {
	    NSApplication = NSApplication;
	};
	"-unhideAllApplications:" = {
	    NSApplication = NSApplication;
	};
	"-unhideWithoutActivation" = {
	    NSApplication = NSApplication;
	};
	"-uniqueID" = {
	    NSEvent = NSEvent;
	};
	"-unlockFocus" = {
	    NSImage = NSImage;
	    NSView = NSView;
	};
	"-unlockFocusView:needsFlush:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-unmountAndEjectDeviceAtPath:" = {
	    NSWorkspace = NSWorkspace;
	};
	"-unregisterDraggedTypes" = {
	    NSView = NSView;
	    NSWindow = NSWindow;
	};
	"-unscript:" = {
	    NSText = NSText;
	};
	"-unscriptRange:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	};
	"-update" = {
	    "(NSMenuView)" = NSMenu;
	    NSMenu = NSMenu;
	    NSMenuView = NSMenuView;
	    NSOpenGLContext = NSOpenGL;
	    NSOpenGLView = NSOpenGLView;
	    NSWindow = NSWindow;
	};
	"-updateAttachmentsFromPath:" = {
	    "NSMutableAttributedString(AppKit)" = NSAttributedString;
	    "NSMutableAttributedString(NSTextAttachment)" = NSTextAttachment;
	};
	"-updateCell:" = {
	    NSControl = NSControl;
	};
	"-updateCellInside:" = {
	    NSControl = NSControl;
	};
	"-updateChangeCount:" = {
	    NSDocument = NSDocument;
	};
	"-updateConstraints" = {
	    "NSView(NSConstraintBasedLayoutCoreMethods)" = NSView;
	};
	"-updateConstraintsForSubtreeIfNeeded" = {
	    "NSView(NSConstraintBasedLayoutCoreMethods)" = NSView;
	};
	"-updateDestination" = {
	    NSDataLink = NSDataLink;
	};
	"-updateDragTypeRegistration" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-updateFontPanel" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-updateFromPrintInfo" = {
	    NSPrintPanel = NSPrintPanel;
	};
	"-updateInsertionPointStateAndRestartTimer:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-updateMode" = {
	    NSDataLink = NSDataLink;
	};
	"-updateRuler" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-updateScroller" = {
	    NSBrowser = NSBrowser;
	};
	"-updateSpellingPanelWithMisspelledWord:" = {
	    NSSpellChecker = NSSpellChecker;
	};
	"-updateWindows" = {
	    NSApplication = NSApplication;
	};
	"-updateWindowsItem:" = {
	    NSApplication = NSApplication;
	};
	"-uppercaseWord:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-usableParts" = {
	    NSScroller = NSScroller;
	};
	"-useAllLigatures:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-useFont:" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-useOptimizedDrawing:" = {
	    NSWindow = NSWindow;
	};
	"-useStandardKerning:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-useStandardLigatures:" = {
	    "NSTextView(UserActions)" = NSTextView;
	};
	"-usedFonts" = {
	    "NSGraphicsContext(GNUstep)" = NSGraphicsContext;
	};
	"-userData" = {
	    NSEvent = NSEvent;
	};
	"-userDefaultsChanged" = {
	    NSWorkspace = NSWorkspace;
	};
	"-userInterfaceLayoutDirection" = {
	    NSCell = NSCell;
	    NSView = NSView;
	};
	"-userKeyEquivalent" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-userKeyEquivalentModifierMask" = {
	    "(NSMenuItem)" = NSMenuItem;
	};
	"-userSpaceScaleFactor" = {
	    NSScreen = NSScreen;
	    NSWindow = NSWindow;
	};
	"-usesAlternatingRowBackgroundColors" = {
	    NSTableView = NSTableView;
	};
	"-usesDataSource" = {
	    NSComboBox = NSComboBox;
	    NSComboBoxCell = NSComboBoxCell;
	};
	"-usesEPSOnResolutionMismatch" = {
	    NSImage = NSImage;
	};
	"-usesFeebackWindow" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-usesFindPanel" = {
	    NSTextView = NSTextView;
	};
	"-usesFontPanel" = {
	    NSText = NSText;
	};
	"-usesItemFromMenu" = {
	    NSPopUpButtonCell = NSPopUpButtonCell;
	};
	"-usesRuler" = {
	    NSTextView = NSTextView;
	};
	"-usesSingleLineMode" = {
	    NSCell = NSCell;
	};
	"-usesThreadedAnimation" = {
	    NSProgressIndicator = NSProgressIndicator;
	};
	"-validModesForFontPanel:" = {
	    "NSObject(NSFontPanelValidation)" = NSFontPanel;
	};
	"-validRequestorForSendType:returnType:" = {
	    NSApplication = NSApplication;
	    NSResponder = NSResponder;
	    "NSTextView(leftovers)" = NSTextView;
	    NSWindow = NSWindow;
	};
	"-validateEditing" = {
	    NSControl = NSControl;
	};
	"-validateMenuItem:" = {
	    "(NSMenuValidation)" = NSMenu;
	    NSDocument = NSDocument;
	    NSDocumentController = NSDocumentController;
	    "NSObject(NSMenuActionResponder)" = NSMenu;
	    NSObjectController = NSObjectController;
	};
	"-validateUserInterfaceItem:" = {
	    NSDocument = NSDocument;
	    NSDocumentController = NSDocumentController;
	};
	"-validateVisibleColumns" = {
	    NSBrowser = NSBrowser;
	    NSSavePanel = NSSavePanel;
	};
	"-valueClassForBinding:" = {
	    "NSObject(NSKeyValueBindingCreation)" = NSKeyValueBinding;
	};
	"-valueForProperty:" = {
	    NSBitmapImageRep = NSBitmapImageRep;
	};
	"-valueWraps" = {
	    NSStepper = NSStepper;
	    NSStepperCell = NSStepperCell;
	};
	"-values" = {
	    NSUserDefaultsController = NSUserDefaultsController;
	};
	"-vendorDefined" = {
	    NSEvent = NSEvent;
	};
	"-vendorID" = {
	    NSEvent = NSEvent;
	};
	"-vendorPointingDeviceType" = {
	    NSEvent = NSEvent;
	};
	"-verticalLineScroll" = {
	    NSScrollView = NSScrollView;
	};
	"-verticalMotionCanBeginDrag" = {
	    NSTableView = NSTableView;
	};
	"-verticalPageScroll" = {
	    NSScrollView = NSScrollView;
	};
	"-verticalPagination" = {
	    NSPrintInfo = NSPrintInfo;
	};
	"-verticalRulerView" = {
	    NSScrollView = NSScrollView;
	};
	"-verticalScrollElasticity" = {
	    NSScrollView = NSScrollView;
	};
	"-verticalScroller" = {
	    NSScrollView = NSScrollView;
	};
	"-view" = {
	    NSOpenGLContext = NSOpenGL;
	    NSPrintOperation = NSPrintOperation;
	    NSTabViewItem = NSTabViewItem;
	};
	"-viewAtColumn:row:makeIfNecessary:" = {
	    NSTableView = NSTableView;
	};
	"-viewController" = {
	    NSTabViewItem = NSTabViewItem;
	};
	"-viewDidEndLiveResize" = {
	    NSView = NSView;
	};
	"-viewDidMoveToSuperview" = {
	    NSView = NSView;
	};
	"-viewDidMoveToWindow" = {
	    NSView = NSView;
	};
	"-viewSizeChanged:" = {
	    NSColorPicker = NSColorPicker;
	};
	"-viewWillMoveToSuperview:" = {
	    NSView = NSView;
	};
	"-viewWillMoveToWindow:" = {
	    NSView = NSView;
	};
	"-viewWillStartLiveResize" = {
	    NSView = NSView;
	};
	"-viewWithTag:" = {
	    NSView = NSView;
	};
	"-viewsNeedDisplay" = {
	    NSWindow = NSWindow;
	};
	"-visibleFrame" = {
	    NSScreen = NSScreen;
	};
	"-visibleItems" = {
	    NSCollectionView = NSCollectionView;
	};
	"-visibleRect" = {
	    NSView = NSView;
	};
	"-visibleSupplementaryViewsOfKind:" = {
	    NSCollectionView = NSCollectionView;
	};
	"-voice" = {
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-volume" = {
	    NSMovieView = NSMovieView;
	    NSSound = NSSound;
	    NSSpeechSynthesizer = NSSpeechSynthesizer;
	};
	"-wantsDefaultClipping" = {
	    NSView = NSView;
	};
	"-wantsToDelayTextChangeNotifications" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-wantsToHandleMouseEvents" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-wantsToInterpretAllKeystrokes" = {
	    "(NSInputServiceProvider)" = NSInputServer;
	};
	"-wantsToTrackMouse" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:" = {
	    "(NSTextAttachmentCell)" = NSTextAttachment;
	};
	"-weightOfFont:" = {
	    NSFontManager = NSFontManager;
	};
	"-whiteComponent" = {
	    NSColor = NSColor;
	};
	"-width" = {
	    NSTableColumn = NSTableColumn;
	};
	"-widthAdjustLimit" = {
	    NSView = NSView;
	};
	"-widthOfColumn:" = {
	    NSBrowser = NSBrowser;
	};
	"-widthOfString:" = {
	    NSFont = NSFont;
	};
	"-widthTracksTextView" = {
	    NSTextContainer = NSTextContainer;
	};
	"-willPresentError:" = {
	    NSDocument = NSDocument;
	    NSDocumentController = NSDocumentController;
	    NSResponder = NSResponder;
	};
	"-willRemoveSubview:" = {
	    NSView = NSView;
	};
	"-willTransitionFromLayout:toLayout:" = {
	    "(NSCollectionViewElement)" = NSCollectionView;
	};
	"-windingCountAtPoint:" = {
	    NSBezierPath = NSBezierPath;
	};
	"-windingRule" = {
	    NSBezierPath = NSBezierPath;
	};
	"-window" = {
	    NSAlert = NSAlert;
	    NSCachedImageRep = NSCachedImageRep;
	    NSEvent = NSEvent;
	    "NSMenu(GNUstepExtra)" = NSMenu;
	    NSView = NSView;
	    NSWindowController = NSWindowController;
	};
	"-window:willPositionSheet:usingRect:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowController" = {
	    NSWindow = NSWindow;
	};
	"-windowControllerDidLoadNib:" = {
	    NSDocument = NSDocument;
	};
	"-windowControllerWillLoadNib:" = {
	    NSDocument = NSDocument;
	};
	"-windowControllers" = {
	    NSDocument = NSDocument;
	};
	"-windowDidBecomeKey:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidBecomeMain:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidChangeScreen:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidChangeScreenProfile:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidDeminiaturize:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidEndSheet:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidExpose:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidLoad" = {
	    NSWindowController = NSWindowController;
	};
	"-windowDidMiniaturize:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidMove:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidResignKey:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidResignMain:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidResize:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowDidUpdate:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowForSelection:" = {
	    "NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	};
	"-windowForSheet" = {
	    NSDocument = NSDocument;
	};
	"-windowFrameAutosaveName" = {
	    NSWindowController = NSWindowController;
	};
	"-windowHandle" = {
	    NSWindow = NSWindow;
	};
	"-windowNibName" = {
	    NSDocument = NSDocument;
	    NSWindowController = NSWindowController;
	};
	"-windowNibPath" = {
	    NSWindowController = NSWindowController;
	};
	"-windowNumber" = {
	    NSEvent = NSEvent;
	    NSWindow = NSWindow;
	};
	"-windowRef" = {
	    NSWindow = NSWindow;
	};
	"-windowShouldClose:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowShouldZoom:toFrame:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowTitleForDocumentDisplayName:" = {
	    NSWindowController = NSWindowController;
	};
	"-windowWillBeginSheet:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWillClose:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWillLoad" = {
	    NSWindowController = NSWindowController;
	};
	"-windowWillMiniaturize:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWillMove:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWillResize:toSize:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWillReturnFieldEditor:toObject:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWillReturnUndoManager:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWillUseStandardFrame:defaultFrame:" = {
	    "NSObject(NSWindowDelegate)" = NSWindow;
	};
	"-windowWithWindowNumber:" = {
	    NSApplication = NSApplication;
	};
	"-windows" = {
	    NSApplication = NSApplication;
	};
	"-windowsMenu" = {
	    NSApplication = NSApplication;
	};
	"-words" = {
	    "NSTextStorage(Scripting)" = NSTextStorage;
	};
	"-worksWhenModal" = {
	    NSFontPanel = NSFontPanel;
	    NSPanel = NSPanel;
	    NSWindow = NSWindow;
	};
	"-wraps" = {
	    NSCell = NSCell;
	};
	"-writablePasteboardTypes" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-writableTypesForPasteboard:" = {
	    "(NSPasteboardWriting)" = NSPasteboard;
	};
	"-writableTypesForSaveOperation:" = {
	    NSDocument = NSDocument;
	};
	"-writeEPSInsideRect:toPasteboard:" = {
	    NSView = NSView;
	};
	"-writeFileContents:" = {
	    NSPasteboard = NSPasteboard;
	};
	"-writeFileWrapper:" = {
	    NSPasteboard = NSPasteboard;
	};
	"-writeLinksToPasteboard:" = {
	    NSDataLinkManager = NSDataLinkManager;
	};
	"-writePDFInsideRect:toPasteboard:" = {
	    NSView = NSView;
	};
	"-writePrintInfo" = {
	    NSPageLayout = NSPageLayout;
	};
	"-writeRTFDToFile:atomically:" = {
	    NSText = NSText;
	};
	"-writeSafelyToURL:ofType:forSaveOperation:error:" = {
	    NSDocument = NSDocument;
	};
	"-writeSelectionToPasteboard:type:" = {
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-writeSelectionToPasteboard:types:" = {
	    "NSObject(NSServicesRequests)" = NSApplication;
	    "NSTextView(leftovers)" = NSTextView;
	};
	"-writeToFile:" = {
	    NSColorList = NSColorList;
	    NSDataLink = NSDataLink;
	};
	"-writeToFile:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-writeToFile:ofType:originalFile:saveOperation:" = {
	    NSDocument = NSDocument;
	};
	"-writeToPasteboard:" = {
	    NSColor = NSColor;
	    NSDataLink = NSDataLink;
	    NSSelection = NSSelection;
	    NSSound = NSSound;
	    "NSURL(NSPasteboard)" = NSPasteboard;
	};
	"-writeToURL:ofType:" = {
	    NSDocument = NSDocument;
	};
	"-writeToURL:ofType:error:" = {
	    NSDocument = NSDocument;
	};
	"-writeToURL:ofType:forSaveOperation:originalContentsURL:error:" = {
	    NSDocument = NSDocument;
	};
	"-writeWithBackupToFile:ofType:saveOperation:" = {
	    NSDocument = NSDocument;
	};
	"-writingOptionsForType:pasteboard:" = {
	    "NSObject(NSPasteboardWriting)" = NSPasteboard;
	};
	"-xHeight" = {
	    NSFont = NSFont;
	};
	"-yank:" = {
	    "NSResponder(OptionalActionMethods)" = NSResponder;
	};
	"-yellowComponent" = {
	    NSColor = NSColor;
	};
	"-zoom:" = {
	    NSWindow = NSWindow;
	};
    };
    output = {
	"../Headers/AppKit/AppKit.h" = (
	    "../Documentation/Gui/AppKit.gsdoc"
	);
	"../Headers/AppKit/AppKitDefines.h" = (
	    "../Documentation/Gui/AppKitDefines.gsdoc"
	);
	"../Headers/AppKit/AppKitErrors.h" = (
	    "../Documentation/Gui/AppKitErrors.gsdoc"
	);
	"../Headers/AppKit/AppKitExceptions.h" = (
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/DPSOperators.h" = (
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSAccessibility.h" = (
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSAccessibilityConstants.h" = (
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSAccessibilityCustomAction.h" = (
	    "../Documentation/Gui/NSAccessibilityCustomAction.gsdoc"
	);
	"../Headers/AppKit/NSAccessibilityCustomRotor.h" = (
	    "../Documentation/Gui/NSAccessibilityCustomRotor.gsdoc"
	);
	"../Headers/AppKit/NSAccessibilityElement.h" = (
	    "../Documentation/Gui/NSAccessibilityElement.gsdoc"
	);
	"../Headers/AppKit/NSAccessibilityProtocols.h" = (
	    "../Documentation/Gui/NSAccessibilityProtocols.gsdoc"
	);
	"../Headers/AppKit/NSActionCell.h" = (
	    "../Documentation/Gui/NSActionCell.gsdoc"
	);
	"../Headers/AppKit/NSAffineTransform.h" = (
	    "../Documentation/Gui/NSAffineTransform.gsdoc"
	);
	"../Headers/AppKit/NSAlert.h" = (
	    "../Documentation/Gui/NSAlert.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSAnimation.h" = (
	    "../Documentation/Gui/NSAnimation.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSAnimationContext.h" = (
	    "../Documentation/Gui/NSAnimationContext.gsdoc"
	);
	"../Headers/AppKit/NSAppearance.h" = (
	    "../Documentation/Gui/NSAppearance.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSApplication.h" = (
	    "../Documentation/Gui/NSApplication.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSArrayController.h" = (
	    "../Documentation/Gui/NSArrayController.gsdoc"
	);
	"../Headers/AppKit/NSAttributedString.h" = (
	    "../Documentation/Gui/NSAttributedString.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSBezierPath.h" = (
	    "../Documentation/Gui/NSBezierPath.gsdoc"
	);
	"../Headers/AppKit/NSBitmapImageRep.h" = (
	    "../Documentation/Gui/NSBitmapImageRep.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSBox.h" = (
	    "../Documentation/Gui/NSBox.gsdoc"
	);
	"../Headers/AppKit/NSBrowser.h" = (
	    "../Documentation/Gui/NSBrowser.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSBrowserCell.h" = (
	    "../Documentation/Gui/NSBrowserCell.gsdoc"
	);
	"../Headers/AppKit/NSButton.h" = (
	    "../Documentation/Gui/NSButton.gsdoc"
	);
	"../Headers/AppKit/NSButtonCell.h" = (
	    "../Documentation/Gui/NSButtonCell.gsdoc"
	);
	"../Headers/AppKit/NSButtonTouchBarItem.h" = (
	    "../Documentation/Gui/NSButtonTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSCIImageRep.h" = (
	    "../Documentation/Gui/NSCIImageRep.gsdoc"
	);
	"../Headers/AppKit/NSCachedImageRep.h" = (
	    "../Documentation/Gui/NSCachedImageRep.gsdoc"
	);
	"../Headers/AppKit/NSCandidateListTouchBarItem.h" = (
	    "../Documentation/Gui/NSCandidateListTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSCell.h" = (
	    "../Documentation/Gui/NSCell.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSClickGestureRecognizer.h" = (
	    "../Documentation/Gui/NSClickGestureRecognizer.gsdoc"
	);
	"../Headers/AppKit/NSClipView.h" = (
	    "../Documentation/Gui/NSClipView.gsdoc"
	);
	"../Headers/AppKit/NSCollectionView.h" = (
	    "../Documentation/Gui/NSCollectionView.gsdoc"
	);
	"../Headers/AppKit/NSCollectionViewCompositionalLayout.h" = (
	    "../Documentation/Gui/NSCollectionViewCompositionalLayout.gsdoc"
	);
	"../Headers/AppKit/NSCollectionViewFlowLayout.h" = (
	    "../Documentation/Gui/NSCollectionViewFlowLayout.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSCollectionViewGridLayout.h" = (
	    "../Documentation/Gui/NSCollectionViewGridLayout.gsdoc"
	);
	"../Headers/AppKit/NSCollectionViewItem.h" = (
	    "../Documentation/Gui/NSCollectionViewItem.gsdoc"
	);
	"../Headers/AppKit/NSCollectionViewLayout.h" = (
	    "../Documentation/Gui/NSCollectionViewLayout.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSCollectionViewTransitionLayout.h" = (
	    "../Documentation/Gui/NSCollectionViewTransitionLayout.gsdoc"
	);
	"../Headers/AppKit/NSColor.h" = (
	    "../Documentation/Gui/NSColor.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSColorList.h" = (
	    "../Documentation/Gui/NSColorList.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSColorPanel.h" = (
	    "../Documentation/Gui/NSColorPanel.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSColorPicker.h" = (
	    "../Documentation/Gui/NSColorPicker.gsdoc"
	);
	"../Headers/AppKit/NSColorPickerTouchBarItem.h" = (
	    "../Documentation/Gui/NSColorPickerTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSColorPicking.h" = (
	    "../Documentation/Gui/NSColorPicking.gsdoc"
	);
	"../Headers/AppKit/NSColorSampler.h" = (
	    "../Documentation/Gui/NSColorSampler.gsdoc"
	);
	"../Headers/AppKit/NSColorSpace.h" = (
	    "../Documentation/Gui/NSColorSpace.gsdoc"
	);
	"../Headers/AppKit/NSColorWell.h" = (
	    "../Documentation/Gui/NSColorWell.gsdoc"
	);
	"../Headers/AppKit/NSComboBox.h" = (
	    "../Documentation/Gui/NSComboBox.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSComboBoxCell.h" = (
	    "../Documentation/Gui/NSComboBoxCell.gsdoc"
	);
	"../Headers/AppKit/NSControl.h" = (
	    "../Documentation/Gui/NSControl.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSController.h" = (
	    "../Documentation/Gui/NSController.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSCursor.h" = (
	    "../Documentation/Gui/NSCursor.gsdoc"
	);
	"../Headers/AppKit/NSCustomImageRep.h" = (
	    "../Documentation/Gui/NSCustomImageRep.gsdoc"
	);
	"../Headers/AppKit/NSCustomTouchBarItem.h" = (
	    "../Documentation/Gui/NSCustomTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSDataAsset.h" = (
	    "../Documentation/Gui/NSDataAsset.gsdoc"
	);
	"../Headers/AppKit/NSDataLink.h" = (
	    "../Documentation/Gui/NSDataLink.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSDataLinkManager.h" = (
	    "../Documentation/Gui/NSDataLinkManager.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSDataLinkPanel.h" = (
	    "../Documentation/Gui/NSDataLinkPanel.gsdoc"
	);
	"../Headers/AppKit/NSDatePicker.h" = (
	    "../Documentation/Gui/NSDatePicker.gsdoc"
	);
	"../Headers/AppKit/NSDatePickerCell.h" = (
	    "../Documentation/Gui/NSDatePickerCell.gsdoc"
	);
	"../Headers/AppKit/NSDockTile.h" = (
	    "../Documentation/Gui/NSDockTile.gsdoc"
	);
	"../Headers/AppKit/NSDocument.h" = (
	    "../Documentation/Gui/NSDocument.gsdoc"
	);
	"../Headers/AppKit/NSDocumentController.h" = (
	    "../Documentation/Gui/NSDocumentController.gsdoc"
	);
	"../Headers/AppKit/NSDragging.h" = (
	    "../Documentation/Gui/NSDragging.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSDrawer.h" = (
	    "../Documentation/Gui/NSDrawer.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSEPSImageRep.h" = (
	    "../Documentation/Gui/NSEPSImageRep.gsdoc"
	);
	"../Headers/AppKit/NSErrors.h" = (
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSEvent.h" = (
	    "../Documentation/Gui/NSEvent.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSFileWrapper.h" = (
	    "../Documentation/Gui/NSFileWrapper.gsdoc"
	);
	"../Headers/AppKit/NSFileWrapperExtensions.h" = (
	    "../Documentation/Gui/NSFileWrapperExtensions.gsdoc"
	);
	"../Headers/AppKit/NSFont.h" = (
	    "../Documentation/Gui/NSFont.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSFontAssetRequest.h" = (
	    "../Documentation/Gui/NSFontAssetRequest.gsdoc"
	);
	"../Headers/AppKit/NSFontCollection.h" = (
	    "../Documentation/Gui/NSFontCollection.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSFontDescriptor.h" = (
	    "../Documentation/Gui/NSFontDescriptor.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSFontManager.h" = (
	    "../Documentation/Gui/NSFontManager.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSFontPanel.h" = (
	    "../Documentation/Gui/NSFontPanel.gsdoc"
	);
	"../Headers/AppKit/NSForm.h" = (
	    "../Documentation/Gui/NSForm.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSFormCell.h" = (
	    "../Documentation/Gui/NSFormCell.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSGestureRecognizer.h" = (
	    "../Documentation/Gui/NSGestureRecognizer.gsdoc"
	);
	"../Headers/AppKit/NSGlyphGenerator.h" = (
	    "../Documentation/Gui/NSGlyphGenerator.gsdoc"
	);
	"../Headers/AppKit/NSGlyphInfo.h" = (
	    "../Documentation/Gui/NSGlyphInfo.gsdoc"
	);
	"../Headers/AppKit/NSGradient.h" = (
	    "../Documentation/Gui/NSGradient.gsdoc"
	);
	"../Headers/AppKit/NSGraphics.h" = (
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSGraphicsContext.h" = (
	    "../Documentation/Gui/NSGraphicsContext.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSGridView.h" = (
	    "../Documentation/Gui/NSGridView.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSGroupTouchBarItem.h" = (
	    "../Documentation/Gui/NSGroupTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSHelpManager.h" = (
	    "../Documentation/Gui/NSHelpManager.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSHelpPanel.h" = (
	    "../Documentation/Gui/NSHelpPanel.gsdoc"
	);
	"../Headers/AppKit/NSImage.h" = (
	    "../Documentation/Gui/NSImage.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSImageCell.h" = (
	    "../Documentation/Gui/NSImageCell.gsdoc"
	);
	"../Headers/AppKit/NSImageRep.h" = (
	    "../Documentation/Gui/NSImageRep.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSImageView.h" = (
	    "../Documentation/Gui/NSImageView.gsdoc"
	);
	"../Headers/AppKit/NSInputManager.h" = (
	    "../Documentation/Gui/NSInputManager.gsdoc"
	);
	"../Headers/AppKit/NSInputServer.h" = (
	    "../Documentation/Gui/NSInputServer.gsdoc"
	);
	"../Headers/AppKit/NSInterfaceStyle.h" = (
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSKeyValueBinding.h" = (
	    "../Documentation/Gui/NSKeyValueBinding.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSLayoutAnchor.h" = (
	    "../Documentation/Gui/NSLayoutAnchor.gsdoc"
	);
	"../Headers/AppKit/NSLayoutConstraint.h" = (
	    "../Documentation/Gui/NSLayoutConstraint.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSLayoutGuide.h" = (
	    "../Documentation/Gui/NSLayoutGuide.gsdoc"
	);
	"../Headers/AppKit/NSLayoutManager.h" = (
	    "../Documentation/Gui/NSLayoutManager.gsdoc"
	);
	"../Headers/AppKit/NSLevelIndicator.h" = (
	    "../Documentation/Gui/NSLevelIndicator.gsdoc"
	);
	"../Headers/AppKit/NSLevelIndicatorCell.h" = (
	    "../Documentation/Gui/NSLevelIndicatorCell.gsdoc"
	);
	"../Headers/AppKit/NSMagnificationGestureRecognizer.h" = (
	    "../Documentation/Gui/NSMagnificationGestureRecognizer.gsdoc"
	);
	"../Headers/AppKit/NSMatrix.h" = (
	    "../Documentation/Gui/NSMatrix.gsdoc"
	);
	"../Headers/AppKit/NSMediaLibraryBrowserController.h" = (
	    "../Documentation/Gui/NSMediaLibraryBrowserController.gsdoc"
	);
	"../Headers/AppKit/NSMenu.h" = (
	    "../Documentation/Gui/NSMenu.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSMenuItem.h" = (
	    "../Documentation/Gui/NSMenuItem.gsdoc"
	);
	"../Headers/AppKit/NSMenuItemCell.h" = (
	    "../Documentation/Gui/NSMenuItemCell.gsdoc"
	);
	"../Headers/AppKit/NSMenuView.h" = (
	    "../Documentation/Gui/NSMenuView.gsdoc"
	);
	"../Headers/AppKit/NSMovie.h" = (
	    "../Documentation/Gui/NSMovie.gsdoc"
	);
	"../Headers/AppKit/NSMovieView.h" = (
	    "../Documentation/Gui/NSMovieView.gsdoc"
	);
	"../Headers/AppKit/NSNib.h" = (
	    "../Documentation/Gui/NSNib.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSNibConnector.h" = (
	    "../Documentation/Gui/NSNibConnector.gsdoc"
	);
	"../Headers/AppKit/NSNibControlConnector.h" = (
	    "../Documentation/Gui/NSNibControlConnector.gsdoc"
	);
	"../Headers/AppKit/NSNibDeclarations.h" = (
	    "../Documentation/Gui/NSNibDeclarations.gsdoc"
	);
	"../Headers/AppKit/NSNibLoading.h" = (
	    "../Documentation/Gui/NSNibLoading.gsdoc"
	);
	"../Headers/AppKit/NSNibOutletConnector.h" = (
	    "../Documentation/Gui/NSNibOutletConnector.gsdoc"
	);
	"../Headers/AppKit/NSObjectController.h" = (
	    "../Documentation/Gui/NSObjectController.gsdoc"
	);
	"../Headers/AppKit/NSOpenGL.h" = (
	    "../Documentation/Gui/NSOpenGL.gsdoc"
	);
	"../Headers/AppKit/NSOpenGLView.h" = (
	    "../Documentation/Gui/NSOpenGLView.gsdoc"
	);
	"../Headers/AppKit/NSOpenPanel.h" = (
	    "../Documentation/Gui/NSOpenPanel.gsdoc"
	);
	"../Headers/AppKit/NSOutlineView.h" = (
	    "../Documentation/Gui/NSOutlineView.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPDFImageRep.h" = (
	    "../Documentation/Gui/NSPDFImageRep.gsdoc"
	);
	"../Headers/AppKit/NSPDFInfo.h" = (
	    "../Documentation/Gui/NSPDFInfo.gsdoc"
	);
	"../Headers/AppKit/NSPDFPanel.h" = (
	    "../Documentation/Gui/NSPDFPanel.gsdoc"
	);
	"../Headers/AppKit/NSPICTImageRep.h" = (
	    "../Documentation/Gui/NSPICTImageRep.gsdoc"
	);
	"../Headers/AppKit/NSPageController.h" = (
	    "../Documentation/Gui/NSPageController.gsdoc"
	);
	"../Headers/AppKit/NSPageLayout.h" = (
	    "../Documentation/Gui/NSPageLayout.gsdoc"
	);
	"../Headers/AppKit/NSPanGestureRecognizer.h" = (
	    "../Documentation/Gui/NSPanGestureRecognizer.gsdoc"
	);
	"../Headers/AppKit/NSPanel.h" = (
	    "../Documentation/Gui/NSPanel.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSParagraphStyle.h" = (
	    "../Documentation/Gui/NSParagraphStyle.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPasteboard.h" = (
	    "../Documentation/Gui/NSPasteboard.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPasteboardItem.h" = (
	    "../Documentation/Gui/NSPasteboardItem.gsdoc"
	);
	"../Headers/AppKit/NSPathCell.h" = (
	    "../Documentation/Gui/NSPathCell.gsdoc"
	);
	"../Headers/AppKit/NSPathComponentCell.h" = (
	    "../Documentation/Gui/NSPathComponentCell.gsdoc"
	);
	"../Headers/AppKit/NSPathControl.h" = (
	    "../Documentation/Gui/NSPathControl.gsdoc"
	);
	"../Headers/AppKit/NSPathControlItem.h" = (
	    "../Documentation/Gui/NSPathControlItem.gsdoc"
	);
	"../Headers/AppKit/NSPersistentDocument.h" = (
	    "../Documentation/Gui/NSPersistentDocument.gsdoc"
	);
	"../Headers/AppKit/NSPickerTouchBarItem.h" = (
	    "../Documentation/Gui/NSPickerTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSPopUpButton.h" = (
	    "../Documentation/Gui/NSPopUpButton.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPopUpButtonCell.h" = (
	    "../Documentation/Gui/NSPopUpButtonCell.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPopover.h" = (
	    "../Documentation/Gui/NSPopover.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPopoverTouchBarItem.h" = (
	    "../Documentation/Gui/NSPopoverTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSPredicateEditor.h" = (
	    "../Documentation/Gui/NSPredicateEditor.gsdoc"
	);
	"../Headers/AppKit/NSPredicateEditorRowTemplate.h" = (
	    "../Documentation/Gui/NSPredicateEditorRowTemplate.gsdoc"
	);
	"../Headers/AppKit/NSPressGestureRecognizer.h" = (
	    "../Documentation/Gui/NSPressGestureRecognizer.gsdoc"
	);
	"../Headers/AppKit/NSPrintInfo.h" = (
	    "../Documentation/Gui/NSPrintInfo.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPrintOperation.h" = (
	    "../Documentation/Gui/NSPrintOperation.gsdoc"
	);
	"../Headers/AppKit/NSPrintPanel.h" = (
	    "../Documentation/Gui/NSPrintPanel.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSPrinter.h" = (
	    "../Documentation/Gui/NSPrinter.gsdoc"
	);
	"../Headers/AppKit/NSProgressIndicator.h" = (
	    "../Documentation/Gui/NSProgressIndicator.gsdoc"
	);
	"../Headers/AppKit/NSResponder.h" = (
	    "../Documentation/Gui/NSResponder.gsdoc"
	);
	"../Headers/AppKit/NSRotationGestureRecognizer.h" = (
	    "../Documentation/Gui/NSRotationGestureRecognizer.gsdoc"
	);
	"../Headers/AppKit/NSRuleEditor.h" = (
	    "../Documentation/Gui/NSRuleEditor.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSRulerMarker.h" = (
	    "../Documentation/Gui/NSRulerMarker.gsdoc"
	);
	"../Headers/AppKit/NSRulerView.h" = (
	    "../Documentation/Gui/NSRulerView.gsdoc"
	);
	"../Headers/AppKit/NSRunningApplication.h" = (
	    "../Documentation/Gui/NSRunningApplication.gsdoc"
	);
	"../Headers/AppKit/NSSavePanel.h" = (
	    "../Documentation/Gui/NSSavePanel.gsdoc"
	);
	"../Headers/AppKit/NSScreen.h" = (
	    "../Documentation/Gui/NSScreen.gsdoc"
	);
	"../Headers/AppKit/NSScrollView.h" = (
	    "../Documentation/Gui/NSScrollView.gsdoc"
	);
	"../Headers/AppKit/NSScroller.h" = (
	    "../Documentation/Gui/NSScroller.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSScrubber.h" = (
	    "../Documentation/Gui/NSScrubber.gsdoc"
	);
	"../Headers/AppKit/NSScrubberItemView.h" = (
	    "../Documentation/Gui/NSScrubberItemView.gsdoc"
	);
	"../Headers/AppKit/NSScrubberLayout.h" = (
	    "../Documentation/Gui/NSScrubberLayout.gsdoc"
	);
	"../Headers/AppKit/NSSearchField.h" = (
	    "../Documentation/Gui/NSSearchField.gsdoc"
	);
	"../Headers/AppKit/NSSearchFieldCell.h" = (
	    "../Documentation/Gui/NSSearchFieldCell.gsdoc"
	);
	"../Headers/AppKit/NSSecureTextField.h" = (
	    "../Documentation/Gui/NSSecureTextField.gsdoc"
	);
	"../Headers/AppKit/NSSegmentedCell.h" = (
	    "../Documentation/Gui/NSSegmentedCell.gsdoc"
	);
	"../Headers/AppKit/NSSegmentedControl.h" = (
	    "../Documentation/Gui/NSSegmentedControl.gsdoc"
	);
	"../Headers/AppKit/NSSeguePerforming.h" = (
	    "../Documentation/Gui/NSSeguePerforming.gsdoc"
	);
	"../Headers/AppKit/NSSelection.h" = (
	    "../Documentation/Gui/NSSelection.gsdoc"
	);
	"../Headers/AppKit/NSShadow.h" = (
	    "../Documentation/Gui/NSShadow.gsdoc"
	);
	"../Headers/AppKit/NSSharingService.h" = (
	    "../Documentation/Gui/NSSharingService.gsdoc"
	);
	"../Headers/AppKit/NSSharingServicePickerToolbarItem.h" = (
	    "../Documentation/Gui/NSSharingServicePickerToolbarItem.gsdoc"
	);
	"../Headers/AppKit/NSSharingServicePickerTouchBarItem.h" = (
	    "../Documentation/Gui/NSSharingServicePickerTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSSlider.h" = (
	    "../Documentation/Gui/NSSlider.gsdoc"
	);
	"../Headers/AppKit/NSSliderAccessory.h" = (
	    "../Documentation/Gui/NSSliderAccessory.gsdoc"
	);
	"../Headers/AppKit/NSSliderCell.h" = (
	    "../Documentation/Gui/NSSliderCell.gsdoc"
	);
	"../Headers/AppKit/NSSliderTouchBarItem.h" = (
	    "../Documentation/Gui/NSSliderTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSSound.h" = (
	    "../Documentation/Gui/NSSound.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSSpeechRecognizer.h" = (
	    "../Documentation/Gui/NSSpeechRecognizer.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSSpeechSynthesizer.h" = (
	    "../Documentation/Gui/NSSpeechSynthesizer.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSSpellChecker.h" = (
	    "../Documentation/Gui/NSSpellChecker.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSSpellProtocol.h" = (
	    "../Documentation/Gui/NSSpellProtocol.gsdoc"
	);
	"../Headers/AppKit/NSSpellServer.h" = (
	    "../Documentation/Gui/NSSpellServer.gsdoc"
	);
	"../Headers/AppKit/NSSplitView.h" = (
	    "../Documentation/Gui/NSSplitView.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSSplitViewController.h" = (
	    "../Documentation/Gui/NSSplitViewController.gsdoc"
	);
	"../Headers/AppKit/NSSplitViewItem.h" = (
	    "../Documentation/Gui/NSSplitViewItem.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSStackView.h" = (
	    "../Documentation/Gui/NSStackView.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSStatusBar.h" = (
	    "../Documentation/Gui/NSStatusBar.gsdoc"
	);
	"../Headers/AppKit/NSStatusBarButton.h" = (
	    "../Documentation/Gui/NSStatusBarButton.gsdoc"
	);
	"../Headers/AppKit/NSStatusItem.h" = (
	    "../Documentation/Gui/NSStatusItem.gsdoc"
	);
	"../Headers/AppKit/NSStepper.h" = (
	    "../Documentation/Gui/NSStepper.gsdoc"
	);
	"../Headers/AppKit/NSStepperCell.h" = (
	    "../Documentation/Gui/NSStepperCell.gsdoc"
	);
	"../Headers/AppKit/NSStepperTouchBarItem.h" = (
	    "../Documentation/Gui/NSStepperTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSStoryboard.h" = (
	    "../Documentation/Gui/NSStoryboard.gsdoc"
	);
	"../Headers/AppKit/NSStoryboardSegue.h" = (
	    "../Documentation/Gui/NSStoryboardSegue.gsdoc"
	);
	"../Headers/AppKit/NSStringDrawing.h" = (
	    "../Documentation/Gui/NSStringDrawing.gsdoc"
	);
	"../Headers/AppKit/NSSwitch.h" = (
	    "../Documentation/Gui/NSSwitch.gsdoc"
	);
	"../Headers/AppKit/NSTabView.h" = (
	    "../Documentation/Gui/NSTabView.gsdoc"
	);
	"../Headers/AppKit/NSTabViewController.h" = (
	    "../Documentation/Gui/NSTabViewController.gsdoc"
	);
	"../Headers/AppKit/NSTabViewItem.h" = (
	    "../Documentation/Gui/NSTabViewItem.gsdoc"
	);
	"../Headers/AppKit/NSTableColumn.h" = (
	    "../Documentation/Gui/NSTableColumn.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSTableHeaderCell.h" = (
	    "../Documentation/Gui/NSTableHeaderCell.gsdoc"
	);
	"../Headers/AppKit/NSTableHeaderView.h" = (
	    "../Documentation/Gui/NSTableHeaderView.gsdoc"
	);
	"../Headers/AppKit/NSTableView.h" = (
	    "../Documentation/Gui/NSTableView.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSText.h" = (
	    "../Documentation/Gui/NSText.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSTextAlternatives.h" = (
	    "../Documentation/Gui/NSTextAlternatives.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSTextAttachment.h" = (
	    "../Documentation/Gui/NSTextAttachment.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSTextCheckingClient.h" = (
	    "../Documentation/Gui/NSTextCheckingClient.gsdoc"
	);
	"../Headers/AppKit/NSTextCheckingController.h" = (
	    "../Documentation/Gui/NSTextCheckingController.gsdoc"
	);
	"../Headers/AppKit/NSTextContainer.h" = (
	    "../Documentation/Gui/NSTextContainer.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc"
	);
	"../Headers/AppKit/NSTextField.h" = (
	    "../Documentation/Gui/NSTextField.gsdoc"
	);
	"../Headers/AppKit/NSTextFieldCell.h" = (
	    "../Documentation/Gui/NSTextFieldCell.gsdoc"
	);
	"../Headers/AppKit/NSTextFinder.h" = (
	    "../Documentation/Gui/NSTextFinder.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSTextInputClient.h" = (
	    "../Documentation/Gui/NSTextInputClient.gsdoc"
	);
	"../Headers/AppKit/NSTextInputContext.h" = (
	    "../Documentation/Gui/NSTextInputContext.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSTextList.h" = (
	    "../Documentation/Gui/NSTextList.gsdoc"
	);
	"../Headers/AppKit/NSTextStorage.h" = (
	    "../Documentation/Gui/NSTextStorage.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSTextTable.h" = (
	    "../Documentation/Gui/NSTextTable.gsdoc"
	);
	"../Headers/AppKit/NSTextView.h" = (
	    "../Documentation/Gui/NSTextView.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSTitlebarAccessoryViewController.h" = (
	    "../Documentation/Gui/NSTitlebarAccessoryViewController.gsdoc"
	);
	"../Headers/AppKit/NSTokenField.h" = (
	    "../Documentation/Gui/NSTokenField.gsdoc"
	);
	"../Headers/AppKit/NSTokenFieldCell.h" = (
	    "../Documentation/Gui/NSTokenFieldCell.gsdoc"
	);
	"../Headers/AppKit/NSToolbar.h" = (
	    "../Documentation/Gui/NSToolbar.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSToolbarItem.h" = (
	    "../Documentation/Gui/NSToolbarItem.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSToolbarItemGroup.h" = (
	    "../Documentation/Gui/NSToolbarItemGroup.gsdoc"
	);
	"../Headers/AppKit/NSTouch.h" = (
	    "../Documentation/Gui/NSTouch.gsdoc"
	);
	"../Headers/AppKit/NSTouchBar.h" = (
	    "../Documentation/Gui/NSTouchBar.gsdoc"
	);
	"../Headers/AppKit/NSTouchBarItem.h" = (
	    "../Documentation/Gui/NSTouchBarItem.gsdoc"
	);
	"../Headers/AppKit/NSTrackingArea.h" = (
	    "../Documentation/Gui/NSTrackingArea.gsdoc"
	);
	"../Headers/AppKit/NSTreeController.h" = (
	    "../Documentation/Gui/NSTreeController.gsdoc"
	);
	"../Headers/AppKit/NSTreeNode.h" = (
	    "../Documentation/Gui/NSTreeNode.gsdoc"
	);
	"../Headers/AppKit/NSUserDefaultsController.h" = (
	    "../Documentation/Gui/NSUserDefaultsController.gsdoc"
	);
	"../Headers/AppKit/NSUserInterfaceCompression.h" = (
	    "../Documentation/Gui/NSUserInterfaceCompression.gsdoc"
	);
	"../Headers/AppKit/NSUserInterfaceItemIdentification.h" = (
	    "../Documentation/Gui/NSUserInterfaceItemIdentification.gsdoc"
	);
	"../Headers/AppKit/NSUserInterfaceItemSearching.h" = (
	    "../Documentation/Gui/NSUserInterfaceItemSearching.gsdoc"
	);
	"../Headers/AppKit/NSUserInterfaceLayout.h" = (
	    "../Documentation/Gui/NSUserInterfaceLayout.gsdoc"
	);
	"../Headers/AppKit/NSUserInterfaceValidation.h" = (
	    "../Documentation/Gui/NSUserInterfaceValidation.gsdoc"
	);
	"../Headers/AppKit/NSView.h" = (
	    "../Documentation/Gui/NSView.gsdoc",
	    "../Documentation/Gui/Functions.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSViewController.h" = (
	    "../Documentation/Gui/NSViewController.gsdoc"
	);
	"../Headers/AppKit/NSVisualEffectView.h" = (
	    "../Documentation/Gui/NSVisualEffectView.gsdoc"
	);
	"../Headers/AppKit/NSWindow.h" = (
	    "../Documentation/Gui/NSWindow.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/NSWindowController.h" = (
	    "../Documentation/Gui/NSWindowController.gsdoc"
	);
	"../Headers/AppKit/NSWindowRestoration.h" = (
	    "../Documentation/Gui/NSWindowRestoration.gsdoc"
	);
	"../Headers/AppKit/NSWorkspace.h" = (
	    "../Documentation/Gui/NSWorkspace.gsdoc",
	    "../Documentation/Gui/TypesAndConstants.gsdoc"
	);
	"../Headers/AppKit/PSOperators.h" = (
	    "../Documentation/Gui/Functions.gsdoc"
	);
    };
    protocol = {
	"(GSImageDelegateProtocol)" = NSImage;
	"(NSAlertDelegate)" = NSAlert;
	"(NSApplicationDelegate)" = NSApplication;
	"(NSBrowserDelegate)" = NSBrowser;
	"(NSCollectionViewDataSource)" = NSCollectionView;
	"(NSCollectionViewDelegate)" = NSCollectionView;
	"(NSCollectionViewElement)" = NSCollectionView;
	"(NSCollectionViewPrefetching)" = NSCollectionView;
	"(NSComboBoxCellDataSource)" = NSComboBoxCell;
	"(NSComboBoxDataSource)" = NSComboBox;
	"(NSComboBoxDelegate)" = NSComboBox;
	"(NSControlTextEditingDelegate)" = NSControl;
	"(NSInputServerMouseTracker)" = NSInputServer;
	"(NSInputServiceProvider)" = NSInputServer;
	"(NSMatrixDelegate)" = NSMatrix;
	"(NSMenuDelegate)" = NSMenu;
	"(NSMenuItem)" = NSMenuItem;
	"(NSMenuValidation)" = NSMenu;
	"(NSMenuView)" = NSMenu;
	"(NSOpenSavePanelDelegate)" = NSSavePanel;
	"(NSOutlineViewDataSource)" = NSOutlineView;
	"(NSOutlineViewDelegate)" = NSOutlineView;
	"(NSPasteboardItemDataProvider)" = NSPasteboardItem;
	"(NSPasteboardReading)" = NSPasteboard;
	"(NSPasteboardWriting)" = NSPasteboard;
	"(NSPrintPanelAccessorizing)" = NSPrintPanel;
	"(NSRuleEditorDelegate)" = NSRuleEditor;
	"(NSSharingServiceDelegate)" = NSSharingService;
	"(NSSharingServicePickerDelegate)" = NSSharingService;
	"(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	"(NSSplitViewDelegate)" = NSSplitView;
	"(NSTabViewDelegate)" = NSTabView;
	"(NSTableViewDataSource)" = NSTableView;
	"(NSTableViewDelegate)" = NSTableView;
	"(NSTextAttachmentCell)" = NSTextAttachment;
	"(NSTextFieldDelegate)" = NSTextField;
	"(NSTextViewDelegate)" = NSTextView;
	"(NSWindowDelegate)" = NSWindow;
	"NSObject(NSAlertDelegate)" = NSAlert;
	"NSObject(NSApplicationDelegate)" = NSApplication;
	"NSObject(NSBrowserDelegate)" = NSBrowser;
	"NSObject(NSComboBoxCellDataSource)" = NSComboBoxCell;
	"NSObject(NSControlDelegate)" = NSControl;
	"NSObject(NSControlTextEditingDelegate)" = NSControl;
	"NSObject(NSDataLinkManagerDelegate)" = NSDataLinkManager;
	"NSObject(NSDataPickerCellDelegate)" = NSDatePickerCell;
	"NSObject(NSEditor)" = NSKeyValueBinding;
	"NSObject(NSEditorRegistration)" = NSKeyValueBinding;
	"NSObject(NSFontManagerDelegate)" = NSFontManager;
	"NSObject(NSFontPanelValidation)" = NSFontPanel;
	"NSObject(NSMenuActionResponder)" = NSMenu;
	"NSObject(NSMenuDelegate)" = NSMenu;
	"NSObject(NSOpenSavePanelDelegate)" = NSSavePanel;
	"NSObject(NSPasteboardItemDataProvider)" = NSPasteboardItem;
	"NSObject(NSPasteboardOwner)" = NSPasteboard;
	"NSObject(NSPasteboardReading)" = NSPasteboard;
	"NSObject(NSPasteboardWriting)" = NSPasteboard;
	"NSObject(NSPlaceholder)" = NSKeyValueBinding;
	"NSObject(NSSavePanelDelegate)" = NSSavePanel;
	"NSObject(NSServicesRequests)" = NSApplication;
	"NSObject(NSSoundDelegate)" = NSSound;
	"NSObject(NSSpeechSynthesizerDelegate)" = NSSpeechSynthesizer;
	"NSObject(NSSplitViewDelegate)" = NSSplitView;
	"NSObject(NSTableDataSource)" = NSTableView;
	"NSObject(NSTableViewDelegate)" = NSTableView;
	"NSObject(NSTextDelegate)" = NSText;
	"NSObject(NSTextStorageDelegate)" = NSTextStorage;
	"NSObject(NSTextViewDelegate)" = NSTextView;
	"NSObject(NSWindowDelegate)" = NSWindow;
	"NSObject(NSWindowDelegateAdditions)" = NSWindow;
    };
    source = {
	"../Headers/AppKit/AppKit.h" = (
	    "../Headers/AppKit/AppKit.h"
	);
	"../Headers/AppKit/AppKitDefines.h" = (
	    "../Headers/AppKit/AppKitDefines.h"
	);
	"../Headers/AppKit/AppKitErrors.h" = (
	    "../Headers/AppKit/AppKitErrors.h"
	);
	"../Headers/AppKit/AppKitExceptions.h" = (
	    "../Headers/AppKit/AppKitExceptions.h"
	);
	"../Headers/AppKit/DPSOperators.h" = (
	    "../Headers/AppKit/DPSOperators.h"
	);
	"../Headers/AppKit/NSAccessibility.h" = (
	    "NSAccessibility.m"
	);
	"../Headers/AppKit/NSAccessibilityConstants.h" = (
	    "../Headers/AppKit/NSAccessibilityConstants.h"
	);
	"../Headers/AppKit/NSAccessibilityCustomAction.h" = (
	    "NSAccessibilityCustomAction.m"
	);
	"../Headers/AppKit/NSAccessibilityCustomRotor.h" = (
	    "NSAccessibilityCustomRotor.m"
	);
	"../Headers/AppKit/NSAccessibilityElement.h" = (
	    "NSAccessibilityElement.m"
	);
	"../Headers/AppKit/NSAccessibilityProtocols.h" = (
	    "../Headers/AppKit/NSAccessibilityProtocols.h"
	);
	"../Headers/AppKit/NSActionCell.h" = (
	    "NSActionCell.m"
	);
	"../Headers/AppKit/NSAffineTransform.h" = (
	    "NSAffineTransform.m"
	);
	"../Headers/AppKit/NSAlert.h" = (
	    "NSAlert.m"
	);
	"../Headers/AppKit/NSAnimation.h" = (
	    "NSAnimation.m"
	);
	"../Headers/AppKit/NSAnimationContext.h" = (
	    "NSAnimationContext.m"
	);
	"../Headers/AppKit/NSAppearance.h" = (
	    "NSAppearance.m"
	);
	"../Headers/AppKit/NSApplication.h" = (
	    "NSApplication.m",
	    "GSServicesManager.m"
	);
	"../Headers/AppKit/NSArrayController.h" = (
	    "NSArrayController.m"
	);
	"../Headers/AppKit/NSAttributedString.h" = (
	    "NSAttributedString.m"
	);
	"../Headers/AppKit/NSBezierPath.h" = (
	    "NSBezierPath.m"
	);
	"../Headers/AppKit/NSBitmapImageRep.h" = (
	    "NSBitmapImageRep.m"
	);
	"../Headers/AppKit/NSBox.h" = (
	    "NSBox.m"
	);
	"../Headers/AppKit/NSBrowser.h" = (
	    "NSBrowser.m"
	);
	"../Headers/AppKit/NSBrowserCell.h" = (
	    "NSBrowserCell.m"
	);
	"../Headers/AppKit/NSButton.h" = (
	    "NSButton.m"
	);
	"../Headers/AppKit/NSButtonCell.h" = (
	    "NSButtonCell.m"
	);
	"../Headers/AppKit/NSButtonTouchBarItem.h" = (
	    "NSButtonTouchBarItem.m"
	);
	"../Headers/AppKit/NSCIImageRep.h" = (
	    "NSCIImageRep.m"
	);
	"../Headers/AppKit/NSCachedImageRep.h" = (
	    "NSCachedImageRep.m"
	);
	"../Headers/AppKit/NSCandidateListTouchBarItem.h" = (
	    "NSCandidateListTouchBarItem.m"
	);
	"../Headers/AppKit/NSCell.h" = (
	    "NSCell.m"
	);
	"../Headers/AppKit/NSClickGestureRecognizer.h" = (
	    "NSClickGestureRecognizer.m"
	);
	"../Headers/AppKit/NSClipView.h" = (
	    "NSClipView.m"
	);
	"../Headers/AppKit/NSCollectionView.h" = (
	    "NSCollectionView.m"
	);
	"../Headers/AppKit/NSCollectionViewCompositionalLayout.h" = (
	    "NSCollectionViewCompositionalLayout.m"
	);
	"../Headers/AppKit/NSCollectionViewFlowLayout.h" = (
	    "NSCollectionViewFlowLayout.m"
	);
	"../Headers/AppKit/NSCollectionViewGridLayout.h" = (
	    "NSCollectionViewGridLayout.m"
	);
	"../Headers/AppKit/NSCollectionViewItem.h" = (
	    "NSCollectionViewItem.m"
	);
	"../Headers/AppKit/NSCollectionViewLayout.h" = (
	    "NSCollectionViewLayout.m"
	);
	"../Headers/AppKit/NSCollectionViewTransitionLayout.h" = (
	    "NSCollectionViewTransitionLayout.m"
	);
	"../Headers/AppKit/NSColor.h" = (
	    "NSColor.m"
	);
	"../Headers/AppKit/NSColorList.h" = (
	    "NSColorList.m"
	);
	"../Headers/AppKit/NSColorPanel.h" = (
	    "NSColorPanel.m"
	);
	"../Headers/AppKit/NSColorPicker.h" = (
	    "NSColorPicker.m"
	);
	"../Headers/AppKit/NSColorPickerTouchBarItem.h" = (
	    "NSColorPickerTouchBarItem.m"
	);
	"../Headers/AppKit/NSColorPicking.h" = (
	    "../Headers/AppKit/NSColorPicking.h"
	);
	"../Headers/AppKit/NSColorSampler.h" = (
	    "NSColorSampler.m"
	);
	"../Headers/AppKit/NSColorSpace.h" = (
	    "NSColorSpace.m"
	);
	"../Headers/AppKit/NSColorWell.h" = (
	    "NSColorWell.m"
	);
	"../Headers/AppKit/NSComboBox.h" = (
	    "NSComboBox.m"
	);
	"../Headers/AppKit/NSComboBoxCell.h" = (
	    "NSComboBoxCell.m"
	);
	"../Headers/AppKit/NSControl.h" = (
	    "NSControl.m"
	);
	"../Headers/AppKit/NSController.h" = (
	    "NSController.m"
	);
	"../Headers/AppKit/NSCursor.h" = (
	    "NSCursor.m"
	);
	"../Headers/AppKit/NSCustomImageRep.h" = (
	    "NSCustomImageRep.m"
	);
	"../Headers/AppKit/NSCustomTouchBarItem.h" = (
	    "NSCustomTouchBarItem.m"
	);
	"../Headers/AppKit/NSDataAsset.h" = (
	    "NSDataAsset.m"
	);
	"../Headers/AppKit/NSDataLink.h" = (
	    "NSDataLink.m"
	);
	"../Headers/AppKit/NSDataLinkManager.h" = (
	    "NSDataLinkManager.m"
	);
	"../Headers/AppKit/NSDataLinkPanel.h" = (
	    "NSDataLinkPanel.m"
	);
	"../Headers/AppKit/NSDatePicker.h" = (
	    "NSDatePicker.m"
	);
	"../Headers/AppKit/NSDatePickerCell.h" = (
	    "NSDatePickerCell.m"
	);
	"../Headers/AppKit/NSDockTile.h" = (
	    "NSDockTile.m"
	);
	"../Headers/AppKit/NSDocument.h" = (
	    "NSDocument.m"
	);
	"../Headers/AppKit/NSDocumentController.h" = (
	    "NSDocumentController.m"
	);
	"../Headers/AppKit/NSDragging.h" = (
	    "../Headers/AppKit/NSDragging.h"
	);
	"../Headers/AppKit/NSDrawer.h" = (
	    "NSDrawer.m"
	);
	"../Headers/AppKit/NSEPSImageRep.h" = (
	    "NSEPSImageRep.m"
	);
	"../Headers/AppKit/NSErrors.h" = (
	    "../Headers/AppKit/NSErrors.h"
	);
	"../Headers/AppKit/NSEvent.h" = (
	    "NSEvent.m"
	);
	"../Headers/AppKit/NSFileWrapper.h" = (
	    "../Headers/AppKit/NSFileWrapper.h"
	);
	"../Headers/AppKit/NSFileWrapperExtensions.h" = (
	    "NSFileWrapperExtensions.m"
	);
	"../Headers/AppKit/NSFont.h" = (
	    "NSFont.m"
	);
	"../Headers/AppKit/NSFontAssetRequest.h" = (
	    "NSFontAssetRequest.m"
	);
	"../Headers/AppKit/NSFontCollection.h" = (
	    "NSFontCollection.m"
	);
	"../Headers/AppKit/NSFontDescriptor.h" = (
	    "NSFontDescriptor.m"
	);
	"../Headers/AppKit/NSFontManager.h" = (
	    "NSFontManager.m"
	);
	"../Headers/AppKit/NSFontPanel.h" = (
	    "NSFontPanel.m"
	);
	"../Headers/AppKit/NSForm.h" = (
	    "NSForm.m"
	);
	"../Headers/AppKit/NSFormCell.h" = (
	    "NSFormCell.m"
	);
	"../Headers/AppKit/NSGestureRecognizer.h" = (
	    "NSGestureRecognizer.m"
	);
	"../Headers/AppKit/NSGlyphGenerator.h" = (
	    "NSGlyphGenerator.m"
	);
	"../Headers/AppKit/NSGlyphInfo.h" = (
	    "NSGlyphInfo.m"
	);
	"../Headers/AppKit/NSGradient.h" = (
	    "NSGradient.m"
	);
	"../Headers/AppKit/NSGraphics.h" = (
	    "../Headers/AppKit/NSGraphics.h"
	);
	"../Headers/AppKit/NSGraphicsContext.h" = (
	    "NSGraphicsContext.m"
	);
	"../Headers/AppKit/NSGridView.h" = (
	    "NSGridView.m"
	);
	"../Headers/AppKit/NSGroupTouchBarItem.h" = (
	    "NSGroupTouchBarItem.m"
	);
	"../Headers/AppKit/NSHelpManager.h" = (
	    "NSHelpManager.m"
	);
	"../Headers/AppKit/NSHelpPanel.h" = (
	    "NSHelpPanel.m"
	);
	"../Headers/AppKit/NSImage.h" = (
	    "NSImage.m"
	);
	"../Headers/AppKit/NSImageCell.h" = (
	    "NSImageCell.m"
	);
	"../Headers/AppKit/NSImageRep.h" = (
	    "NSImageRep.m"
	);
	"../Headers/AppKit/NSImageView.h" = (
	    "NSImageView.m"
	);
	"../Headers/AppKit/NSInputManager.h" = (
	    "NSInputManager.m"
	);
	"../Headers/AppKit/NSInputServer.h" = (
	    "NSInputServer.m"
	);
	"../Headers/AppKit/NSInterfaceStyle.h" = (
	    "NSInterfaceStyle.m"
	);
	"../Headers/AppKit/NSKeyValueBinding.h" = (
	    "NSKeyValueBinding.m"
	);
	"../Headers/AppKit/NSLayoutAnchor.h" = (
	    "NSLayoutAnchor.m"
	);
	"../Headers/AppKit/NSLayoutConstraint.h" = (
	    "NSLayoutConstraint.m"
	);
	"../Headers/AppKit/NSLayoutGuide.h" = (
	    "NSLayoutGuide.m"
	);
	"../Headers/AppKit/NSLayoutManager.h" = (
	    "NSLayoutManager.m"
	);
	"../Headers/AppKit/NSLevelIndicator.h" = (
	    "NSLevelIndicator.m"
	);
	"../Headers/AppKit/NSLevelIndicatorCell.h" = (
	    "NSLevelIndicatorCell.m"
	);
	"../Headers/AppKit/NSMagnificationGestureRecognizer.h" = (
	    "NSMagnificationGestureRecognizer.m"
	);
	"../Headers/AppKit/NSMatrix.h" = (
	    "NSMatrix.m"
	);
	"../Headers/AppKit/NSMediaLibraryBrowserController.h" = (
	    "NSMediaLibraryBrowserController.m"
	);
	"../Headers/AppKit/NSMenu.h" = (
	    "NSMenu.m"
	);
	"../Headers/AppKit/NSMenuItem.h" = (
	    "NSMenuItem.m"
	);
	"../Headers/AppKit/NSMenuItemCell.h" = (
	    "NSMenuItemCell.m"
	);
	"../Headers/AppKit/NSMenuView.h" = (
	    "NSMenuView.m"
	);
	"../Headers/AppKit/NSMovie.h" = (
	    "NSMovie.m"
	);
	"../Headers/AppKit/NSMovieView.h" = (
	    "NSMovieView.m"
	);
	"../Headers/AppKit/NSNib.h" = (
	    "NSNib.m"
	);
	"../Headers/AppKit/NSNibConnector.h" = (
	    "NSNibConnector.m"
	);
	"../Headers/AppKit/NSNibControlConnector.h" = (
	    "NSNibControlConnector.m"
	);
	"../Headers/AppKit/NSNibDeclarations.h" = (
	    "../Headers/AppKit/NSNibDeclarations.h"
	);
	"../Headers/AppKit/NSNibLoading.h" = (
	    "../Headers/AppKit/NSNibLoading.h"
	);
	"../Headers/AppKit/NSNibOutletConnector.h" = (
	    "NSNibOutletConnector.m"
	);
	"../Headers/AppKit/NSObjectController.h" = (
	    "NSObjectController.m"
	);
	"../Headers/AppKit/NSOpenGL.h" = (
	    "../Headers/AppKit/NSOpenGL.h"
	);
	"../Headers/AppKit/NSOpenGLView.h" = (
	    "NSOpenGLView.m"
	);
	"../Headers/AppKit/NSOpenPanel.h" = (
	    "NSOpenPanel.m"
	);
	"../Headers/AppKit/NSOutlineView.h" = (
	    "NSOutlineView.m"
	);
	"../Headers/AppKit/NSPDFImageRep.h" = (
	    "NSPDFImageRep.m"
	);
	"../Headers/AppKit/NSPDFInfo.h" = (
	    "NSPDFInfo.m"
	);
	"../Headers/AppKit/NSPDFPanel.h" = (
	    "NSPDFPanel.m"
	);
	"../Headers/AppKit/NSPICTImageRep.h" = (
	    "NSPICTImageRep.m"
	);
	"../Headers/AppKit/NSPageController.h" = (
	    "NSPageController.m"
	);
	"../Headers/AppKit/NSPageLayout.h" = (
	    "NSPageLayout.m"
	);
	"../Headers/AppKit/NSPanGestureRecognizer.h" = (
	    "NSPanGestureRecognizer.m"
	);
	"../Headers/AppKit/NSPanel.h" = (
	    "NSPanel.m"
	);
	"../Headers/AppKit/NSParagraphStyle.h" = (
	    "NSParagraphStyle.m"
	);
	"../Headers/AppKit/NSPasteboard.h" = (
	    "NSPasteboard.m"
	);
	"../Headers/AppKit/NSPasteboardItem.h" = (
	    "NSPasteboardItem.m"
	);
	"../Headers/AppKit/NSPathCell.h" = (
	    "NSPathCell.m"
	);
	"../Headers/AppKit/NSPathComponentCell.h" = (
	    "NSPathComponentCell.m"
	);
	"../Headers/AppKit/NSPathControl.h" = (
	    "NSPathControl.m"
	);
	"../Headers/AppKit/NSPathControlItem.h" = (
	    "NSPathControlItem.m"
	);
	"../Headers/AppKit/NSPersistentDocument.h" = (
	    "NSPersistentDocument.m"
	);
	"../Headers/AppKit/NSPickerTouchBarItem.h" = (
	    "NSPickerTouchBarItem.m"
	);
	"../Headers/AppKit/NSPopUpButton.h" = (
	    "NSPopUpButton.m"
	);
	"../Headers/AppKit/NSPopUpButtonCell.h" = (
	    "NSPopUpButtonCell.m"
	);
	"../Headers/AppKit/NSPopover.h" = (
	    "NSPopover.m"
	);
	"../Headers/AppKit/NSPopoverTouchBarItem.h" = (
	    "NSPopoverTouchBarItem.m"
	);
	"../Headers/AppKit/NSPredicateEditor.h" = (
	    "NSPredicateEditor.m"
	);
	"../Headers/AppKit/NSPredicateEditorRowTemplate.h" = (
	    "NSPredicateEditorRowTemplate.m"
	);
	"../Headers/AppKit/NSPressGestureRecognizer.h" = (
	    "NSPressGestureRecognizer.m"
	);
	"../Headers/AppKit/NSPrintInfo.h" = (
	    "NSPrintInfo.m"
	);
	"../Headers/AppKit/NSPrintOperation.h" = (
	    "NSPrintOperation.m"
	);
	"../Headers/AppKit/NSPrintPanel.h" = (
	    "NSPrintPanel.m"
	);
	"../Headers/AppKit/NSPrinter.h" = (
	    "NSPrinter.m"
	);
	"../Headers/AppKit/NSProgressIndicator.h" = (
	    "NSProgressIndicator.m"
	);
	"../Headers/AppKit/NSResponder.h" = (
	    "NSResponder.m"
	);
	"../Headers/AppKit/NSRotationGestureRecognizer.h" = (
	    "NSRotationGestureRecognizer.m"
	);
	"../Headers/AppKit/NSRuleEditor.h" = (
	    "NSRuleEditor.m"
	);
	"../Headers/AppKit/NSRulerMarker.h" = (
	    "NSRulerMarker.m"
	);
	"../Headers/AppKit/NSRulerView.h" = (
	    "NSRulerView.m"
	);
	"../Headers/AppKit/NSRunningApplication.h" = (
	    "NSRunningApplication.m"
	);
	"../Headers/AppKit/NSSavePanel.h" = (
	    "NSSavePanel.m"
	);
	"../Headers/AppKit/NSScreen.h" = (
	    "NSScreen.m"
	);
	"../Headers/AppKit/NSScrollView.h" = (
	    "NSScrollView.m"
	);
	"../Headers/AppKit/NSScroller.h" = (
	    "NSScroller.m"
	);
	"../Headers/AppKit/NSScrubber.h" = (
	    "NSScrubber.m"
	);
	"../Headers/AppKit/NSScrubberItemView.h" = (
	    "NSScrubberItemView.m"
	);
	"../Headers/AppKit/NSScrubberLayout.h" = (
	    "NSScrubberLayout.m"
	);
	"../Headers/AppKit/NSSearchField.h" = (
	    "NSSearchField.m"
	);
	"../Headers/AppKit/NSSearchFieldCell.h" = (
	    "NSSearchFieldCell.m"
	);
	"../Headers/AppKit/NSSecureTextField.h" = (
	    "NSSecureTextField.m"
	);
	"../Headers/AppKit/NSSegmentedCell.h" = (
	    "NSSegmentedCell.m"
	);
	"../Headers/AppKit/NSSegmentedControl.h" = (
	    "NSSegmentedControl.m"
	);
	"../Headers/AppKit/NSSeguePerforming.h" = (
	    "../Headers/AppKit/NSSeguePerforming.h"
	);
	"../Headers/AppKit/NSSelection.h" = (
	    "NSSelection.m"
	);
	"../Headers/AppKit/NSShadow.h" = (
	    "NSShadow.m"
	);
	"../Headers/AppKit/NSSharingService.h" = (
	    "NSSharingService.m"
	);
	"../Headers/AppKit/NSSharingServicePickerToolbarItem.h" = (
	    "NSSharingServicePickerToolbarItem.m"
	);
	"../Headers/AppKit/NSSharingServicePickerTouchBarItem.h" = (
	    "NSSharingServicePickerTouchBarItem.m"
	);
	"../Headers/AppKit/NSSlider.h" = (
	    "NSSlider.m"
	);
	"../Headers/AppKit/NSSliderAccessory.h" = (
	    "NSSliderAccessory.m"
	);
	"../Headers/AppKit/NSSliderCell.h" = (
	    "NSSliderCell.m"
	);
	"../Headers/AppKit/NSSliderTouchBarItem.h" = (
	    "NSSliderTouchBarItem.m"
	);
	"../Headers/AppKit/NSSound.h" = (
	    "NSSound.m"
	);
	"../Headers/AppKit/NSSpeechRecognizer.h" = (
	    "NSSpeechRecognizer.m"
	);
	"../Headers/AppKit/NSSpeechSynthesizer.h" = (
	    "NSSpeechSynthesizer.m"
	);
	"../Headers/AppKit/NSSpellChecker.h" = (
	    "NSSpellChecker.m"
	);
	"../Headers/AppKit/NSSpellProtocol.h" = (
	    "../Headers/AppKit/NSSpellProtocol.h"
	);
	"../Headers/AppKit/NSSpellServer.h" = (
	    "../Headers/AppKit/NSSpellServer.h"
	);
	"../Headers/AppKit/NSSplitView.h" = (
	    "NSSplitView.m"
	);
	"../Headers/AppKit/NSSplitViewController.h" = (
	    "NSSplitViewController.m"
	);
	"../Headers/AppKit/NSSplitViewItem.h" = (
	    "NSSplitViewItem.m"
	);
	"../Headers/AppKit/NSStackView.h" = (
	    "NSStackView.m"
	);
	"../Headers/AppKit/NSStatusBar.h" = (
	    "NSStatusBar.m"
	);
	"../Headers/AppKit/NSStatusBarButton.h" = (
	    "NSStatusBarButton.m"
	);
	"../Headers/AppKit/NSStatusItem.h" = (
	    "NSStatusItem.m"
	);
	"../Headers/AppKit/NSStepper.h" = (
	    "NSStepper.m"
	);
	"../Headers/AppKit/NSStepperCell.h" = (
	    "NSStepperCell.m"
	);
	"../Headers/AppKit/NSStepperTouchBarItem.h" = (
	    "NSStepperTouchBarItem.m"
	);
	"../Headers/AppKit/NSStoryboard.h" = (
	    "NSStoryboard.m"
	);
	"../Headers/AppKit/NSStoryboardSegue.h" = (
	    "NSStoryboardSegue.m"
	);
	"../Headers/AppKit/NSStringDrawing.h" = (
	    "NSStringDrawing.m"
	);
	"../Headers/AppKit/NSSwitch.h" = (
	    "NSSwitch.m"
	);
	"../Headers/AppKit/NSTabView.h" = (
	    "NSTabView.m"
	);
	"../Headers/AppKit/NSTabViewController.h" = (
	    "NSTabViewController.m"
	);
	"../Headers/AppKit/NSTabViewItem.h" = (
	    "NSTabViewItem.m"
	);
	"../Headers/AppKit/NSTableColumn.h" = (
	    "NSTableColumn.m"
	);
	"../Headers/AppKit/NSTableHeaderCell.h" = (
	    "NSTableHeaderCell.m"
	);
	"../Headers/AppKit/NSTableHeaderView.h" = (
	    "NSTableHeaderView.m"
	);
	"../Headers/AppKit/NSTableView.h" = (
	    "NSTableView.m"
	);
	"../Headers/AppKit/NSText.h" = (
	    "NSText.m"
	);
	"../Headers/AppKit/NSTextAlternatives.h" = (
	    "NSTextAlternatives.m"
	);
	"../Headers/AppKit/NSTextAttachment.h" = (
	    "NSTextAttachment.m"
	);
	"../Headers/AppKit/NSTextCheckingClient.h" = (
	    "../Headers/AppKit/NSTextCheckingClient.h"
	);
	"../Headers/AppKit/NSTextCheckingController.h" = (
	    "NSTextCheckingController.m"
	);
	"../Headers/AppKit/NSTextContainer.h" = (
	    "NSTextContainer.m"
	);
	"../Headers/AppKit/NSTextField.h" = (
	    "NSTextField.m"
	);
	"../Headers/AppKit/NSTextFieldCell.h" = (
	    "NSTextFieldCell.m"
	);
	"../Headers/AppKit/NSTextFinder.h" = (
	    "NSTextFinder.m"
	);
	"../Headers/AppKit/NSTextInputClient.h" = (
	    "../Headers/AppKit/NSTextInputClient.h"
	);
	"../Headers/AppKit/NSTextInputContext.h" = (
	    "NSTextInputContext.m"
	);
	"../Headers/AppKit/NSTextList.h" = (
	    "NSTextList.m"
	);
	"../Headers/AppKit/NSTextStorage.h" = (
	    "NSTextStorage.m"
	);
	"../Headers/AppKit/NSTextTable.h" = (
	    "NSTextTable.m"
	);
	"../Headers/AppKit/NSTextView.h" = (
	    "NSTextView.m"
	);
	"../Headers/AppKit/NSTitlebarAccessoryViewController.h" = (
	    "NSTitlebarAccessoryViewController.m"
	);
	"../Headers/AppKit/NSTokenField.h" = (
	    "NSTokenField.m"
	);
	"../Headers/AppKit/NSTokenFieldCell.h" = (
	    "NSTokenFieldCell.m"
	);
	"../Headers/AppKit/NSToolbar.h" = (
	    "NSToolbar.m"
	);
	"../Headers/AppKit/NSToolbarItem.h" = (
	    "NSToolbarItem.m"
	);
	"../Headers/AppKit/NSToolbarItemGroup.h" = (
	    "NSToolbarItemGroup.m"
	);
	"../Headers/AppKit/NSTouch.h" = (
	    "NSTouch.m"
	);
	"../Headers/AppKit/NSTouchBar.h" = (
	    "NSTouchBar.m"
	);
	"../Headers/AppKit/NSTouchBarItem.h" = (
	    "NSTouchBarItem.m"
	);
	"../Headers/AppKit/NSTrackingArea.h" = (
	    "NSTrackingArea.m"
	);
	"../Headers/AppKit/NSTreeController.h" = (
	    "NSTreeController.m"
	);
	"../Headers/AppKit/NSTreeNode.h" = (
	    "NSTreeNode.m"
	);
	"../Headers/AppKit/NSUserDefaultsController.h" = (
	    "NSUserDefaultsController.m"
	);
	"../Headers/AppKit/NSUserInterfaceCompression.h" = (
	    "NSUserInterfaceCompression.m"
	);
	"../Headers/AppKit/NSUserInterfaceItemIdentification.h" = (
	    "../Headers/AppKit/NSUserInterfaceItemIdentification.h"
	);
	"../Headers/AppKit/NSUserInterfaceItemSearching.h" = (
	    "NSUserInterfaceItemSearching.m"
	);
	"../Headers/AppKit/NSUserInterfaceLayout.h" = (
	    "../Headers/AppKit/NSUserInterfaceLayout.h"
	);
	"../Headers/AppKit/NSUserInterfaceValidation.h" = (
	    "../Headers/AppKit/NSUserInterfaceValidation.h"
	);
	"../Headers/AppKit/NSView.h" = (
	    "NSView.m"
	);
	"../Headers/AppKit/NSViewController.h" = (
	    "NSViewController.m"
	);
	"../Headers/AppKit/NSVisualEffectView.h" = (
	    "NSVisualEffectView.m"
	);
	"../Headers/AppKit/NSWindow.h" = (
	    "NSWindow.m"
	);
	"../Headers/AppKit/NSWindowController.h" = (
	    "NSWindowController.m"
	);
	"../Headers/AppKit/NSWindowRestoration.h" = (
	    "../Headers/AppKit/NSWindowRestoration.h"
	);
	"../Headers/AppKit/NSWorkspace.h" = (
	    "NSWorkspace.m"
	);
	"../Headers/AppKit/PSOperators.h" = (
	    "../Headers/AppKit/PSOperators.h"
	);
    };
    super = {
	NSActionCell = NSCell;
	NSAlert = NSObject;
	NSApplication = NSResponder;
	NSArrayController = NSObjectController;
	NSBezierPath = NSObject;
	NSBitmapImageRep = NSImageRep;
	NSBox = NSView;
	NSBrowser = NSControl;
	NSBrowserCell = NSCell;
	NSButton = NSControl;
	NSButtonCell = NSActionCell;
	NSCachedImageRep = NSImageRep;
	NSCell = NSObject;
	NSClipView = NSView;
	NSCollectionView = NSView;
	NSCollectionViewItem = NSViewController;
	NSColor = NSObject;
	NSColorList = NSObject;
	NSColorPanel = NSPanel;
	NSColorPicker = NSObject;
	NSColorWell = NSControl;
	NSComboBox = NSTextField;
	NSComboBoxCell = NSTextFieldCell;
	NSControl = NSView;
	NSController = NSObject;
	NSCursor = NSObject;
	NSCustomImageRep = NSImageRep;
	NSDataLink = NSObject;
	NSDataLinkManager = NSObject;
	NSDataLinkPanel = NSPanel;
	NSDatePicker = NSControl;
	NSDatePickerCell = NSActionCell;
	NSDocument = NSObject;
	NSDocumentController = NSObject;
	NSDrawer = NSResponder;
	NSEPSImageRep = NSImageRep;
	NSEvent = NSObject;
	NSFont = NSObject;
	NSFontDescriptor = NSObject;
	NSFontManager = NSObject;
	NSFontPanel = NSPanel;
	NSForm = NSMatrix;
	NSFormCell = NSActionCell;
	NSGraphicsContext = NSObject;
	NSHelpManager = NSObject;
	NSHelpPanel = NSPanel;
	NSImage = NSObject;
	NSImageCell = NSCell;
	NSImageRep = NSObject;
	NSImageView = NSControl;
	NSInputServer = NSObject;
	NSMatrix = NSControl;
	NSMenu = NSObject;
	NSMenuItem = NSObject;
	NSMenuItemCell = NSButtonCell;
	NSMenuView = NSView;
	NSMovie = NSObject;
	NSMovieView = NSView;
	NSMutableParagraphStyle = NSParagraphStyle;
	NSNib = NSObject;
	NSObjectController = NSController;
	NSOpenGLContext = NSObject;
	NSOpenGLPixelFormat = NSObject;
	NSOpenGLView = NSView;
	NSOpenPanel = NSSavePanel;
	NSOutlineView = NSTableView;
	NSPageLayout = NSPanel;
	NSPanel = NSWindow;
	NSParagraphStyle = NSObject;
	NSPasteboard = NSObject;
	NSPasteboardItem = NSObject;
	NSPopUpButton = NSButton;
	NSPopUpButtonCell = NSMenuItemCell;
	NSPredicateEditor = NSRuleEditor;
	NSPredicateEditorRowTemplate = NSObject;
	NSPrintInfo = NSObject;
	NSPrintOperation = NSObject;
	NSPrintPanel = NSPanel;
	NSPrinter = NSObject;
	NSProgressIndicator = NSView;
	NSResponder = NSObject;
	NSRuleEditor = NSControl;
	NSRulerMarker = NSObject;
	NSSavePanel = NSPanel;
	NSScreen = NSObject;
	NSScrollView = NSView;
	NSScroller = NSControl;
	NSSecureTextField = NSTextField;
	NSSecureTextFieldCell = NSTextFieldCell;
	NSSelection = NSObject;
	NSSharingService = NSObject;
	NSSharingServicePicker = NSObject;
	NSSlider = NSControl;
	NSSliderCell = NSActionCell;
	NSSound = NSObject;
	NSSpeechSynthesizer = NSObject;
	NSSpellChecker = NSObject;
	NSSplitView = NSView;
	NSStepper = NSControl;
	NSStepperCell = NSActionCell;
	NSTabView = NSView;
	NSTabViewItem = NSObject;
	NSTableColumn = NSObject;
	NSTableHeaderCell = NSTextFieldCell;
	NSTableHeaderView = NSView;
	NSTableView = NSControl;
	NSText = NSView;
	NSTextAttachment = NSObject;
	NSTextAttachmentCell = NSCell;
	NSTextContainer = NSObject;
	NSTextField = NSControl;
	NSTextFieldCell = NSActionCell;
	NSTextStorage = NSMutableAttributedString;
	NSTextTab = NSObject;
	NSTextView = NSText;
	NSTokenField = NSTextField;
	NSTokenFieldCell = NSTextFieldCell;
	NSUserDefaultsController = NSController;
	NSView = NSResponder;
	NSWindow = NSResponder;
	NSWindowController = NSResponder;
	NSWorkspace = NSObject;
    };
    title = {
	Functions = Functions;
	Gui = Gui;
	NSAccessibilityCustomAction = "NSAccessibilityCustomAction class documentation";
	NSAccessibilityCustomRotor = "NSAccessibilityCustomRotor documentation";
	NSAccessibilityElement = "NSAccessibilityElement class documentation";
	NSAccessibilityProtocols = "NSAccessibilityProtocols documentation";
	NSActionCell = NSActionCell;
	NSAffineTransform = "NSAffineTransform.m";
	NSAlert = NSAlert;
	NSAnimation = "NSAnimation documentation";
	NSAnimationContext = "NSAnimationContext class documentation";
	NSAppearance = "NSAppearance class documentation";
	NSApplication = NSApplication;
	NSArrayController = NSArrayController;
	NSAttributedString = NSAttributedStringAdditions;
	NSBezierPath = "NSBezierPath.m";
	NSBitmapImageRep = "NSBitmapImageRep.m";
	NSBox = NSBox;
	NSBrowser = NSBrowser;
	NSBrowserCell = NSBrowserCell;
	NSButton = NSButton;
	NSButtonCell = NSButtonCell;
	NSButtonTouchBarItem = "NSButtonTouchBarItem class documentation";
	NSCIImageRep = "NSCIImageRep class documentation";
	NSCachedImageRep = NSCachedImageRep;
	NSCandidateListTouchBarItem = "NSCandidateListTouchBarItem class documentation";
	NSCell = NSCell;
	NSClickGestureRecognizer = "NSClickGestureRecognizer class documentation";
	NSClipView = NSClipView;
	NSCollectionView = NSCollectionView;
	NSCollectionViewCompositionalLayout = "NSCollectionViewCompositionalLayout class documentation";
	NSCollectionViewFlowLayout = "NSCollectionViewFlowLayout documentation";
	NSCollectionViewGridLayout = "NSCollectionViewGridLayout class documentation";
	NSCollectionViewItem = NSCollectionViewItem;
	NSCollectionViewLayout = "NSCollectionViewLayout documentation";
	NSCollectionViewTransitionLayout = "NSCollectionViewTransitionLayout class documentation";
	NSColor = NSColor;
	NSColorList = NSColorList;
	NSColorPanel = NSColorPanel;
	NSColorPicker = NSColorPicker;
	NSColorPickerTouchBarItem = "NSColorPickerTouchBarItem class documentation";
	NSColorPicking = "NSColorPicking documentation";
	NSColorSampler = "NSColorSampler class documentation";
	NSColorSpace = "NSColorSpace class documentation";
	NSColorWell = NSColorWell;
	NSComboBox = NSComboBox;
	NSComboBoxCell = NSComboBoxCell;
	NSControl = NSControl;
	NSController = NSController;
	NSCursor = NSCursor;
	NSCustomImageRep = NSCustomImageRep;
	NSCustomTouchBarItem = "NSCustomTouchBarItem class documentation";
	NSDataAsset = "NSDataAsset class documentation";
	NSDataLink = NSDataLink;
	NSDataLinkManager = NSDataLinkManager;
	NSDataLinkPanel = NSDataLinkPanel;
	NSDatePicker = NSDatePicker;
	NSDatePickerCell = NSDatePickerCell;
	NSDockTile = "NSDockTile class documentation";
	NSDocument = NSDocument;
	NSDocumentController = NSDocumentController;
	NSDragging = "NSDragging documentation";
	NSDrawer = NSDrawer;
	NSEPSImageRep = NSEPSImageRep;
	NSEvent = NSEvent;
	NSFileWrapperExtensions = NSFileWrapper;
	NSFont = NSFont;
	NSFontAssetRequest = "NSFontAssetRequest class documentation";
	NSFontCollection = "NSFontCollection documentation";
	NSFontDescriptor = NSFontDescriptor;
	NSFontManager = NSFontManager;
	NSFontPanel = NSFontPanel;
	NSForm = NSForm;
	NSFormCell = NSFormCell;
	NSGestureRecognizer = "NSGestureRecognizer class documentation";
	NSGlyphGenerator = "NSGlyphGenerator class documentation";
	NSGlyphInfo = "NSGlyphInfo class documentation";
	NSGradient = "NSGradient class documentation";
	NSGraphicsContext = NSGraphicsContext;
	NSGridView = "NSGridView documentation";
	NSGroupTouchBarItem = "NSGroupTouchBarItem class documentation";
	NSHelpManager = NSHelpManager;
	NSHelpPanel = NSHelpPanel;
	NSImage = NSImage;
	NSImageCell = NSImageCell;
	NSImageRep = NSImageRep;
	NSImageView = NSImageView;
	NSInputManager = "NSInputManager class documentation";
	NSInputServer = NSInputServer;
	NSKeyValueBinding = "NSKeyValueBinding informal protocol reference";
	NSLayoutAnchor = "NSLayoutAnchor documentation";
	NSLayoutConstraint = "NSLayoutConstraint class documentation";
	NSLayoutGuide = "NSLayoutGuide class documentation";
	NSLayoutManager = "NSLayoutManager class documentation";
	NSLevelIndicator = "NSLevelIndicator class documentation";
	NSLevelIndicatorCell = "NSLevelIndicatorCell class documentation";
	NSMagnificationGestureRecognizer = "NSMagnificationGestureRecognizer class documentation";
	NSMatrix = NSMatrix;
	NSMediaLibraryBrowserController = "NSMediaLibraryBrowserController class documentation";
	NSMenu = NSMenu;
	NSMenuItem = NSMenuItem;
	NSMenuItemCell = NSMenuItemCell;
	NSMenuView = NSMenuView;
	NSMovie = NSMovie;
	NSMovieView = NSMovie;
	NSNib = NSNib;
	NSNibConnector = "NSNibConnector class documentation";
	NSNibControlConnector = "NSNibControlConnector class documentation";
	NSNibLoading = "NSNibLoading documentation";
	NSNibOutletConnector = "NSNibOutletConnector class documentation";
	NSObjectController = NSObjectController;
	NSOpenGL = "NSOpenGL documentation";
	NSOpenGLView = "NSOpenGLView.m";
	NSOpenPanel = NSOpenPanel;
	NSOutlineView = NSOutlineView;
	NSPDFImageRep = "NSPDFImageRep class documentation";
	NSPDFInfo = "NSPDFInfo class documentation";
	NSPDFPanel = "NSPDFPanel class documentation";
	NSPICTImageRep = "NSPICTImageRep class documentation";
	NSPageController = "NSPageController class documentation";
	NSPageLayout = NSPageLayout;
	NSPanGestureRecognizer = "NSPanGestureRecognizer class documentation";
	NSPanel = NSPanel;
	NSParagraphStyle = NSParagraphStyle;
	NSPasteboard = NSPasteboard;
	NSPasteboardItem = NSPasteboardItem;
	NSPathCell = "NSPathCell class documentation";
	NSPathComponentCell = "NSPathComponentCell class documentation";
	NSPathControl = "NSPathControl class documentation";
	NSPathControlItem = "NSPathControlItem class documentation";
	NSPersistentDocument = "NSPersistentDocument class documentation";
	NSPickerTouchBarItem = "NSPickerTouchBarItem class documentation";
	NSPopUpButton = NSPopUpButton;
	NSPopUpButtonCell = NSPopUpButtonCell;
	NSPopover = "NSPopover class documentation";
	NSPopoverTouchBarItem = "NSPopoverTouchBarItem class documentation";
	NSPredicateEditor = NSPredicateEditor;
	NSPredicateEditorRowTemplate = NSPredicateEditorRowTemplate;
	NSPressGestureRecognizer = "NSPressGestureRecognizer class documentation";
	NSPrintInfo = NSPrintInfo;
	NSPrintOperation = NSPrintOperation;
	NSPrintPanel = NSPrintPanel;
	NSPrinter = NSPrinter;
	NSProgressIndicator = NSProgressIndicator;
	NSResponder = NSResponder;
	NSRotationGestureRecognizer = "NSRotationGestureRecognizer class documentation";
	NSRuleEditor = NSRuleEditor;
	NSRulerMarker = NSRulerMarker;
	NSRulerView = "NSRulerView class documentation";
	NSRunningApplication = "NSRunningApplication class documentation";
	NSSavePanel = NSSavePanel;
	NSScreen = NSScreen;
	NSScrollView = NSScrollView;
	NSScroller = NSScroller;
	NSScrubber = "NSScrubber class documentation";
	NSScrubberItemView = "NSScrubberItemView documentation";
	NSScrubberLayout = "NSScrubberLayout documentation";
	NSSearchField = "NSSearchField class documentation";
	NSSearchFieldCell = "NSSearchFieldCell class documentation";
	NSSecureTextField = NSSecureTextField;
	NSSegmentedCell = "NSSegmentedCell class documentation";
	NSSegmentedControl = "NSSegmentedControl class documentation";
	NSSeguePerforming = "NSSeguePerforming documentation";
	NSSelection = NSSelection;
	NSShadow = "NSShadow class documentation";
	NSSharingService = "NSSharingService documentation";
	NSSharingServicePickerToolbarItem = "NSSharingServicePickerToolbarItem class documentation";
	NSSharingServicePickerTouchBarItem = "NSSharingServicePickerTouchBarItem class documentation";
	NSSlider = NSSlider;
	NSSliderAccessory = "NSSliderAccessory documentation";
	NSSliderCell = NSSliderCell;
	NSSliderTouchBarItem = "NSSliderTouchBarItem class documentation";
	NSSound = NSSound;
	NSSpeechRecognizer = "NSSpeechRecognizer class documentation";
	NSSpeechSynthesizer = NSSpeechSynthesizer;
	NSSpellChecker = NSSpellChecker;
	NSSpellProtocol = "NSSpellProtocol documentation";
	NSSplitView = NSSplitView;
	NSSplitViewController = "NSSplitViewController class documentation";
	NSSplitViewItem = "NSSplitViewItem class documentation";
	NSStackView = "NSStackView class documentation";
	NSStatusBar = "NSStatusBar class documentation";
	NSStatusBarButton = "NSStatusBarButton class documentation";
	NSStatusItem = "NSStatusItem class documentation";
	NSStepper = NSStepper;
	NSStepperCell = NSStepperCell;
	NSStepperTouchBarItem = "NSStepperTouchBarItem class documentation";
	NSStoryboard = "NSStoryboard class documentation";
	NSStoryboardSegue = "NSStoryboardSegue class documentation";
	NSStringDrawing = NSStringAdditions;
	NSSwitch = "NSSwitch class documentation";
	NSTabView = NSTabView;
	NSTabViewController = "NSTabViewController class documentation";
	NSTabViewItem = NSTabViewItem;
	NSTableColumn = NSTableColumn;
	NSTableHeaderCell = NSTableHeaderCell;
	NSTableHeaderView = NSTableHeaderView;
	NSTableView = NSTableView;
	NSText = NSText;
	NSTextAlternatives = "NSTextAlternatives class documentation";
	NSTextAttachment = NSTextAttachment;
	NSTextCheckingClient = "NSTextCheckingClient documentation";
	NSTextCheckingController = "NSTextCheckingController class documentation";
	NSTextContainer = NSTextContainer;
	NSTextField = NSTextField;
	NSTextFieldCell = NSTextFieldCell;
	NSTextFinder = "NSTextFinder class documentation";
	NSTextInputClient = "NSTextInputClient documentation";
	NSTextInputContext = "NSTextInputContext class documentation";
	NSTextList = "NSTextList class documentation";
	NSTextStorage = NSTextStorage;
	NSTextTable = "NSTextTable documentation";
	NSTextView = NSTextView;
	NSTitlebarAccessoryViewController = "NSTitlebarAccessoryViewController class documentation";
	NSTokenField = NSTokenField;
	NSTokenFieldCell = NSTokenFieldCell;
	NSToolbar = "NSToolbar class documentation";
	NSToolbarItem = "NSToolbarItem class documentation";
	NSToolbarItemGroup = "NSToolbarItemGroup class documentation";
	NSTouch = "NSTouch class documentation";
	NSTouchBar = "NSTouchBar class documentation";
	NSTouchBarItem = "NSTouchBarItem class documentation";
	NSTrackingArea = "NSTrackingArea class documentation";
	NSTreeController = "NSTreeController class documentation";
	NSTreeNode = "NSTreeNode class documentation";
	NSUserDefaultsController = NSUserDefaultsController;
	NSUserInterfaceCompression = "NSUserInterfaceCompressionOptions class documentation";
	NSUserInterfaceItemIdentification = "NSUserInterfaceItemIdentification documentation";
	NSUserInterfaceItemSearching = "NSUserInterfaceItemSearching documentation";
	NSUserInterfaceValidation = "NSUserInterfaceValidation documentation";
	NSView = NSView;
	NSViewController = "NSViewController class documentation";
	NSVisualEffectView = "NSVisualEffectView class documentation";
	NSWindow = NSWindow;
	NSWindowController = NSWindowController;
	NSWindowRestoration = "NSWindowRestoration documentation";
	NSWorkspace = NSWorkspace;
	TypesAndConstants = Variables;
    };
    unitmethods = {
	"(GSImageDelegateProtocol)" = {
	    "-imageDidNotDraw:inRect:" = NSImage;
	};
	"(NSCollectionViewDataSource)" = {
	    "-collectionView:itemForRepresentedObjectAtIndexPath:" = NSCollectionView;
	    "-collectionView:numberOfItemsInSection:" = NSCollectionView;
	    "-collectionView:viewForSupplementaryElementOfKind:atIndexPath:" = NSCollectionView;
	    "-numberOfSectionsInCollectionView:" = NSCollectionView;
	};
	"(NSCollectionViewDelegate)" = {
	    "-collectionView:acceptDrop:index:dropOperation:" = NSCollectionView;
	    "-collectionView:acceptDrop:indexPath:dropOperation:" = NSCollectionView;
	    "-collectionView:canDragItemsAtIndexPaths:withEvent:" = NSCollectionView;
	    "-collectionView:canDragItemsAtIndexes:withEvent:" = NSCollectionView;
	    "-collectionView:didChangeItemsAtIndexPaths:toHighlightState:" = NSCollectionView;
	    "-collectionView:didDeselectItemsAtIndexPaths:" = NSCollectionView;
	    "-collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:" = NSCollectionView;
	    "-collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:" = NSCollectionView;
	    "-collectionView:didSelectItemsAtIndexPaths:" = NSCollectionView;
	    "-collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:" = NSCollectionView;
	    "-collectionView:draggingImageForItemsAtIndexes:withEvent:offset:" = NSCollectionView;
	    "-collectionView:draggingSession:endedAtPoint:dragOperation:" = NSCollectionView;
	    "-collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:" = NSCollectionView;
	    "-collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:" = NSCollectionView;
	    "-collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexPaths:" = NSCollectionView;
	    "-collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:" = NSCollectionView;
	    "-collectionView:pasteboardWriterForItemAtIndex:" = NSCollectionView;
	    "-collectionView:pasteboardWriterForItemAtIndexPath:" = NSCollectionView;
	    "-collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:" = NSCollectionView;
	    "-collectionView:shouldDeselectItemsAtIndexPaths:" = NSCollectionView;
	    "-collectionView:shouldSelectItemsAtIndexPaths:" = NSCollectionView;
	    "-collectionView:transitionLayoutForOldLayout:newLayout:" = NSCollectionView;
	    "-collectionView:updateDraggingItemsForDrag:" = NSCollectionView;
	    "-collectionView:validateDrop:proposedIndex:dropOperation:" = NSCollectionView;
	    "-collectionView:validateDrop:proposedIndexPath:dropOperation:" = NSCollectionView;
	    "-collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:" = NSCollectionView;
	    "-collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:" = NSCollectionView;
	    "-collectionView:writeItemsAtIndexPaths:toPasteboard:" = NSCollectionView;
	    "-collectionView:writeItemsAtIndexes:toPasteboard:" = NSCollectionView;
	};
	"(NSCollectionViewElement)" = {
	    "-applyLayoutAttributes:" = NSCollectionView;
	    "-didTransitionFromLayout:toLayout:" = NSCollectionView;
	    "-preferredLayoutAttributesFittingAttributes:" = NSCollectionView;
	    "-prepareForReuse" = NSCollectionView;
	    "-willTransitionFromLayout:toLayout:" = NSCollectionView;
	};
	"(NSCollectionViewPrefetching)" = {
	    "-collectionView:cancelPrefetchingForItemsAtIndexPaths:" = NSCollectionView;
	    "-collectionView:prefetchItemsAtIndexPaths:" = NSCollectionView;
	};
	"(NSComboBoxDataSource)" = {
	    "-comboBox:completedString:" = NSComboBox;
	    "-comboBox:indexOfItemWithStringValue:" = NSComboBox;
	    "-comboBox:objectValueForItemAtIndex:" = NSComboBox;
	    "-numberOfItemsInComboBox:" = NSComboBox;
	};
	"(NSComboBoxDelegate)" = {
	    "-comboBoxSelectionDidChange:" = NSComboBox;
	    "-comboBoxSelectionIsChanging:" = NSComboBox;
	    "-comboBoxWillDismiss:" = NSComboBox;
	    "-comboBoxWillPopUp:" = NSComboBox;
	};
	"(NSInputServerMouseTracker)" = {
	    "-mouseDownOnCharacterIndex:atCoordinate:withModifier:client:" = NSInputServer;
	    "-mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:" = NSInputServer;
	    "-mouseUpOnCharacterIndex:atCoordinate:withModifier:client:" = NSInputServer;
	};
	"(NSInputServiceProvider)" = {
	    "-activeConversationChanged:toNewConversation:" = NSInputServer;
	    "-activeConversationWillChange:fromOldConversation:" = NSInputServer;
	    "-canBeDisabled" = NSInputServer;
	    "-doCommandBySelector:client:" = NSInputServer;
	    "-inputClientBecomeActive:" = NSInputServer;
	    "-inputClientDisabled:" = NSInputServer;
	    "-inputClientEnabled:" = NSInputServer;
	    "-inputClientResignActive:" = NSInputServer;
	    "-insertText:client:" = NSInputServer;
	    "-markedTextAbandoned:" = NSInputServer;
	    "-markedTextSelectionChanged:client:" = NSInputServer;
	    "-terminate:" = NSInputServer;
	    "-wantsToDelayTextChangeNotifications" = NSInputServer;
	    "-wantsToHandleMouseEvents" = NSInputServer;
	    "-wantsToInterpretAllKeystrokes" = NSInputServer;
	};
	"(NSMenuDelegate)" = {
	    "-confinementRectForMenu:onScreen:" = NSMenu;
	    "-menu:updateItem:atIndex:shouldCancel:" = NSMenu;
	    "-menu:willHighlightItem:" = NSMenu;
	    "-menuDidClose:" = NSMenu;
	    "-menuHasKeyEquivalent:forEvent:target:action:" = NSMenu;
	    "-menuNeedsUpdate:" = NSMenu;
	    "-menuWillOpen:" = NSMenu;
	    "-numberOfItemsInMenu:" = NSMenu;
	};
	"(NSMenuItem)" = {
	    "+separatorItem" = NSMenuItem;
	    "+setUsesUserKeyEquivalents:" = NSMenuItem;
	    "+usesUserKeyEquivalents" = NSMenuItem;
	    "-action" = NSMenuItem;
	    "-attributedTitle" = NSMenuItem;
	    "-hasSubmenu" = NSMenuItem;
	    "-image" = NSMenuItem;
	    "-indentationLevel" = NSMenuItem;
	    "-initWithTitle:action:keyEquivalent:" = NSMenuItem;
	    "-isAlternate" = NSMenuItem;
	    "-isEnabled" = NSMenuItem;
	    "-isSeparatorItem" = NSMenuItem;
	    "-keyEquivalent" = NSMenuItem;
	    "-keyEquivalentModifierMask" = NSMenuItem;
	    "-menu" = NSMenuItem;
	    "-mixedStateImage" = NSMenuItem;
	    "-mnemonic" = NSMenuItem;
	    "-mnemonicLocation" = NSMenuItem;
	    "-offStateImage" = NSMenuItem;
	    "-onStateImage" = NSMenuItem;
	    "-representedObject" = NSMenuItem;
	    "-setAction:" = NSMenuItem;
	    "-setAlternate:" = NSMenuItem;
	    "-setAttributedTitle:" = NSMenuItem;
	    "-setEnabled:" = NSMenuItem;
	    "-setImage:" = NSMenuItem;
	    "-setIndentationLevel:" = NSMenuItem;
	    "-setKeyEquivalent:" = NSMenuItem;
	    "-setKeyEquivalentModifierMask:" = NSMenuItem;
	    "-setMenu:" = NSMenuItem;
	    "-setMixedStateImage:" = NSMenuItem;
	    "-setMnemonicLocation:" = NSMenuItem;
	    "-setOffStateImage:" = NSMenuItem;
	    "-setOnStateImage:" = NSMenuItem;
	    "-setRepresentedObject:" = NSMenuItem;
	    "-setState:" = NSMenuItem;
	    "-setSubmenu:" = NSMenuItem;
	    "-setTag:" = NSMenuItem;
	    "-setTarget:" = NSMenuItem;
	    "-setTitle:" = NSMenuItem;
	    "-setTitleWithMnemonic:" = NSMenuItem;
	    "-setToolTip:" = NSMenuItem;
	    "-state" = NSMenuItem;
	    "-submenu" = NSMenuItem;
	    "-tag" = NSMenuItem;
	    "-target" = NSMenuItem;
	    "-title" = NSMenuItem;
	    "-toolTip" = NSMenuItem;
	    "-userKeyEquivalent" = NSMenuItem;
	    "-userKeyEquivalentModifierMask" = NSMenuItem;
	};
	"(NSMenuValidation)" = {
	    "-validateMenuItem:" = NSMenu;
	};
	"(NSMenuView)" = {
	    "-detachSubmenu" = NSMenu;
	    "-highlightedItemIndex" = NSMenu;
	    "-imageAndTitleOffset" = NSMenu;
	    "-imageAndTitleWidth" = NSMenu;
	    "-keyEquivalentOffset" = NSMenu;
	    "-keyEquivalentWidth" = NSMenu;
	    "-locationForSubmenu:" = NSMenu;
	    "-performActionWithHighlightingForItemAtIndex:" = NSMenu;
	    "-setHighlightedItemIndex:" = NSMenu;
	    "-setMenu:" = NSMenu;
	    "-sizeToFit" = NSMenu;
	    "-stateImageWidth" = NSMenu;
	    "-trackWithEvent:" = NSMenu;
	    "-update" = NSMenu;
	};
	"(NSOutlineViewDataSource)" = {
	    "-outlineView:acceptDrop:item:childIndex:" = NSOutlineView;
	    "-outlineView:child:ofItem:" = NSOutlineView;
	    "-outlineView:isItemExpandable:" = NSOutlineView;
	    "-outlineView:itemForPersistentObject:" = NSOutlineView;
	    "-outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:" = NSOutlineView;
	    "-outlineView:numberOfChildrenOfItem:" = NSOutlineView;
	    "-outlineView:objectValueForTableColumn:byItem:" = NSOutlineView;
	    "-outlineView:persistentObjectForItem:" = NSOutlineView;
	    "-outlineView:setObjectValue:forTableColumn:byItem:" = NSOutlineView;
	    "-outlineView:sortDescriptorsDidChange:" = NSOutlineView;
	    "-outlineView:validateDrop:proposedItem:proposedChildIndex:" = NSOutlineView;
	    "-outlineView:writeItems:toPasteboard:" = NSOutlineView;
	};
	"(NSOutlineViewDelegate)" = {
	    "-outlineView:dataCellForTableColumn:item:" = NSOutlineView;
	    "-outlineView:didAddRowView:forRow:" = NSOutlineView;
	    "-outlineView:didClickTableColumn:" = NSOutlineView;
	    "-outlineView:didRemoveRowView:forRow:" = NSOutlineView;
	    "-outlineView:rowViewForItem:" = NSOutlineView;
	    "-outlineView:shouldCollapseItem:" = NSOutlineView;
	    "-outlineView:shouldEditTableColumn:item:" = NSOutlineView;
	    "-outlineView:shouldExpandItem:" = NSOutlineView;
	    "-outlineView:shouldSelectItem:" = NSOutlineView;
	    "-outlineView:shouldSelectTableColumn:" = NSOutlineView;
	    "-outlineView:viewForTableColumn:item:" = NSOutlineView;
	    "-outlineView:willDisplayCell:forTableColumn:item:" = NSOutlineView;
	    "-outlineView:willDisplayOutlineCell:forTableColumn:item:" = NSOutlineView;
	    "-outlineViewColumnDidMove:" = NSOutlineView;
	    "-outlineViewColumnDidResize:" = NSOutlineView;
	    "-outlineViewItemDidCollapse:" = NSOutlineView;
	    "-outlineViewItemDidExpand:" = NSOutlineView;
	    "-outlineViewItemWillCollapse:" = NSOutlineView;
	    "-outlineViewItemWillExpand:" = NSOutlineView;
	    "-outlineViewSelectionDidChange:" = NSOutlineView;
	    "-outlineViewSelectionIsChanging:" = NSOutlineView;
	    "-selectionShouldChangeInOutlineView:" = NSOutlineView;
	};
	"(NSPasteboardItemDataProvider)" = {
	    "-pasteboard:item:provideDataForType:" = NSPasteboardItem;
	};
	"(NSPasteboardReading)" = {
	    "+readableTypesForPasteboard:" = NSPasteboard;
	};
	"(NSPasteboardWriting)" = {
	    "-pasteboardPropertyListForType:" = NSPasteboard;
	    "-writableTypesForPasteboard:" = NSPasteboard;
	};
	"(NSPrintPanelAccessorizing)" = {
	    "-keyPathsForValuesAffectingPreview" = NSPrintPanel;
	    "-localizedSummaryItems" = NSPrintPanel;
	};
	"(NSRuleEditorDelegate)" = {
	    "-ruleEditor:child:forCriterion:withRowType:" = NSRuleEditor;
	    "-ruleEditor:displayValueForCriterion:inRow:" = NSRuleEditor;
	    "-ruleEditor:numberOfChildrenForCriterion:withRowType:" = NSRuleEditor;
	    "-ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:" = NSRuleEditor;
	    "-ruleEditorRowsDidChange:" = NSRuleEditor;
	};
	"(NSTabViewDelegate)" = {
	    "-tabView:didSelectTabViewItem:" = NSTabView;
	    "-tabView:shouldSelectTabViewItem:" = NSTabView;
	    "-tabView:willSelectTabViewItem:" = NSTabView;
	    "-tabViewDidChangeNumberOfTabViewItems:" = NSTabView;
	};
	"(NSTextAttachmentCell)" = {
	    "-attachment" = NSTextAttachment;
	    "-cellBaselineOffset" = NSTextAttachment;
	    "-cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:" = NSTextAttachment;
	    "-cellSize" = NSTextAttachment;
	    "-drawWithFrame:inView:" = NSTextAttachment;
	    "-drawWithFrame:inView:characterIndex:" = NSTextAttachment;
	    "-drawWithFrame:inView:characterIndex:layoutManager:" = NSTextAttachment;
	    "-highlight:withFrame:inView:" = NSTextAttachment;
	    "-setAttachment:" = NSTextAttachment;
	    "-trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:" = NSTextAttachment;
	    "-trackMouse:inRect:ofView:untilMouseUp:" = NSTextAttachment;
	    "-wantsToTrackMouse" = NSTextAttachment;
	    "-wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:" = NSTextAttachment;
	};
	"NSAffineTransform(GNUstep)" = {
	    "-boundingRectFor:result:" = NSAffineTransform;
	    "-concatenateWith:" = NSAffineTransform;
	    "-concatenateWithMatrix:" = NSAffineTransform;
	    "-deltaPointInMatrixSpace:" = NSAffineTransform;
	    "-getMatrix:" = NSAffineTransform;
	    "-inverse" = NSAffineTransform;
	    "-isRotated" = NSAffineTransform;
	    "-makeIdentityMatrix" = NSAffineTransform;
	    "-pointInMatrixSpace:" = NSAffineTransform;
	    "-rectInMatrixSpace:" = NSAffineTransform;
	    "-rotationAngle" = NSAffineTransform;
	    "-scaleTo::" = NSAffineTransform;
	    "-setFrameOrigin:" = NSAffineTransform;
	    "-setFrameRotation:" = NSAffineTransform;
	    "-setMatrix:" = NSAffineTransform;
	    "-sizeInMatrixSpace:" = NSAffineTransform;
	    "-takeMatrixFromTransform:" = NSAffineTransform;
	    "-translateToPoint:" = NSAffineTransform;
	};
	"NSAffineTransform(GUIAdditions)" = {
	    "-concat" = NSAffineTransform;
	    "-set" = NSAffineTransform;
	    "-transformBezierPath:" = NSAffineTransform;
	};
	NSAlert = {
	    "+alertWithError:" = NSAlert;
	    "+alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:,..." = NSAlert;
	    "-addButtonWithTitle:" = NSAlert;
	    "-alertStyle" = NSAlert;
	    "-beginSheetModalForWindow:completionHandler:" = NSAlert;
	    "-beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:" = NSAlert;
	    "-buttons" = NSAlert;
	    "-delegate" = NSAlert;
	    "-helpAnchor" = NSAlert;
	    "-icon" = NSAlert;
	    "-informativeText" = NSAlert;
	    "-messageText" = NSAlert;
	    "-runModal" = NSAlert;
	    "-setAlertStyle:" = NSAlert;
	    "-setDelegate:" = NSAlert;
	    "-setHelpAnchor:" = NSAlert;
	    "-setIcon:" = NSAlert;
	    "-setInformativeText:" = NSAlert;
	    "-setMessageText:" = NSAlert;
	    "-setShowsHelp:" = NSAlert;
	    "-showsHelp" = NSAlert;
	    "-window" = NSAlert;
	};
	NSApplication = {
	    "+detachDrawingThread:toTarget:withObject:" = NSApplication;
	    "+sharedApplication" = NSApplication;
	    "-abortModal" = NSApplication;
	    "-activateIgnoringOtherApps:" = NSApplication;
	    "-addWindowsItem:title:filename:" = NSApplication;
	    "-applicationIconImage" = NSApplication;
	    "-arrangeInFront:" = NSApplication;
	    "-beginModalSessionForWindow:" = NSApplication;
	    "-beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:" = NSApplication;
	    "-cancelUserAttentionRequest:" = NSApplication;
	    "-changeWindowsItem:title:filename:" = NSApplication;
	    "-context" = NSApplication;
	    "-currentEvent" = NSApplication;
	    "-currentPresentationOptions" = NSApplication;
	    "-deactivate" = NSApplication;
	    "-delegate" = NSApplication;
	    "-discardEventsMatchingMask:beforeEvent:" = NSApplication;
	    "-endModalSession:" = NSApplication;
	    "-endSheet:" = NSApplication;
	    "-endSheet:returnCode:" = NSApplication;
	    "-finishLaunching" = NSApplication;
	    "-hide:" = NSApplication;
	    "-hideOtherApplications:" = NSApplication;
	    "-isActive" = NSApplication;
	    "-isHidden" = NSApplication;
	    "-isRunning" = NSApplication;
	    "-keyWindow" = NSApplication;
	    "-mainMenu" = NSApplication;
	    "-mainWindow" = NSApplication;
	    "-makeWindowsPerform:inOrder:" = NSApplication;
	    "-miniaturizeAll:" = NSApplication;
	    "-modalWindow" = NSApplication;
	    "-nextEventMatchingMask:untilDate:inMode:dequeue:" = NSApplication;
	    "-orderFrontStandardAboutPanel:" = NSApplication;
	    "-orderFrontStandardAboutPanelWithOptions:" = NSApplication;
	    "-orderFrontStandardInfoPanel:" = NSApplication;
	    "-orderFrontStandardInfoPanelWithOptions:" = NSApplication;
	    "-orderedDocuments" = NSApplication;
	    "-orderedWindows" = NSApplication;
	    "-postEvent:atStart:" = NSApplication;
	    "-presentationOptions" = NSApplication;
	    "-preventWindowOrdering" = NSApplication;
	    "-registerServicesMenuSendTypes:returnTypes:" = NSApplication;
	    "-removeWindowsItem:" = NSApplication;
	    "-replyToApplicationShouldTerminate:" = NSApplication;
	    "-replyToOpenOrPrint:" = NSApplication;
	    "-reportException:" = NSApplication;
	    "-requestUserAttention:" = NSApplication;
	    "-run" = NSApplication;
	    "-runModalForWindow:" = NSApplication;
	    "-runModalForWindow:relativeToWindow:" = NSApplication;
	    "-runModalSession:" = NSApplication;
	    "-sendAction:to:from:" = NSApplication;
	    "-sendEvent:" = NSApplication;
	    "-servicesMenu" = NSApplication;
	    "-servicesProvider" = NSApplication;
	    "-setAppleMenu:" = NSApplication;
	    "-setApplicationIconImage:" = NSApplication;
	    "-setDelegate:" = NSApplication;
	    "-setMainMenu:" = NSApplication;
	    "-setPresentationOptions:" = NSApplication;
	    "-setServicesMenu:" = NSApplication;
	    "-setServicesProvider:" = NSApplication;
	    "-setWindowsMenu:" = NSApplication;
	    "-setWindowsNeedUpdate:" = NSApplication;
	    "-stop:" = NSApplication;
	    "-stopModal" = NSApplication;
	    "-stopModalWithCode:" = NSApplication;
	    "-targetForAction:" = NSApplication;
	    "-targetForAction:to:from:" = NSApplication;
	    "-terminate:" = NSApplication;
	    "-tryToPerform:with:" = NSApplication;
	    "-unhide:" = NSApplication;
	    "-unhideAllApplications:" = NSApplication;
	    "-unhideWithoutActivation" = NSApplication;
	    "-updateWindows" = NSApplication;
	    "-updateWindowsItem:" = NSApplication;
	    "-validRequestorForSendType:returnType:" = NSApplication;
	    "-windowWithWindowNumber:" = NSApplication;
	    "-windows" = NSApplication;
	    "-windowsMenu" = NSApplication;
	};
	"NSApplication(CharacterPanel)" = {
	    "-orderFrontCharacterPalette:" = NSApplication;
	};
	"NSApplication(GSGUIInternal)" = {
	    "-_windowWillDealloc:" = NSApplication;
	};
	"NSApplication(NSColorPanel)" = {
	    "-orderFrontColorPanel:" = NSColorPanel;
	};
	"NSApplication(NSDataLinkPanel)" = {
	    "-orderFrontDataLinkPanel:" = NSDataLinkPanel;
	};
	"NSApplication(NSHelpManager)" = {
	    "-activateContextHelpMode:" = NSHelpManager;
	    "-showHelp:" = NSHelpManager;
	};
	"NSApplication(NSHelpPanel)" = {
	    "-orderFrontHelpPanel:" = NSHelpPanel;
	};
	"NSApplication(NSPageLayout)" = {
	    "-runPageLayout:" = NSPageLayout;
	};
	NSArrayController = {
	    "-addObject:" = NSArrayController;
	    "-addObjects:" = NSArrayController;
	    "-addSelectedObjects:" = NSArrayController;
	    "-addSelectionIndexes:" = NSArrayController;
	    "-alwaysUsesMultipleValuesMarker" = NSArrayController;
	    "-arrangeObjects:" = NSArrayController;
	    "-arrangedObjects" = NSArrayController;
	    "-automaticallyRearrangesObjects" = NSArrayController;
	    "-avoidsEmptySelection" = NSArrayController;
	    "-canInsert" = NSArrayController;
	    "-canSelectNext" = NSArrayController;
	    "-canSelectPrevious" = NSArrayController;
	    "-clearsFilterPredicateOnInsertion" = NSArrayController;
	    "-filterPredicate" = NSArrayController;
	    "-insert:" = NSArrayController;
	    "-insertObject:atArrangedObjectIndex:" = NSArrayController;
	    "-insertObjects:atArrangedObjectIndexes:" = NSArrayController;
	    "-preservesSelection" = NSArrayController;
	    "-rearrangeObjects" = NSArrayController;
	    "-removeObject:" = NSArrayController;
	    "-removeObjectAtArrangedObjectIndex:" = NSArrayController;
	    "-removeObjects:" = NSArrayController;
	    "-removeObjectsAtArrangedObjectIndexes:" = NSArrayController;
	    "-removeSelectedObjects:" = NSArrayController;
	    "-removeSelectionIndexes:" = NSArrayController;
	    "-selectNext:" = NSArrayController;
	    "-selectPrevious:" = NSArrayController;
	    "-selectedObjects" = NSArrayController;
	    "-selectionIndex" = NSArrayController;
	    "-selectionIndexes" = NSArrayController;
	    "-selectsInsertedObjects" = NSArrayController;
	    "-setAlwaysUsesMultipleValuesMarker:" = NSArrayController;
	    "-setAutomaticallyRearrangesObjects:" = NSArrayController;
	    "-setAvoidsEmptySelection:" = NSArrayController;
	    "-setClearsFilterPredicateOnInsertion:" = NSArrayController;
	    "-setFilterPredicate:" = NSArrayController;
	    "-setPreservesSelection:" = NSArrayController;
	    "-setSelectedObjects:" = NSArrayController;
	    "-setSelectionIndex:" = NSArrayController;
	    "-setSelectionIndexes:" = NSArrayController;
	    "-setSelectsInsertedObjects:" = NSArrayController;
	    "-setSortDescriptors:" = NSArrayController;
	    "-sortDescriptors" = NSArrayController;
	};
	"NSAttributedString(AppKit)" = {
	    "+textFileTypes" = NSAttributedString;
	    "+textPasteboardTypes" = NSAttributedString;
	    "+textTypes" = NSAttributedString;
	    "+textUnfilteredFileTypes" = NSAttributedString;
	    "+textUnfilteredPasteboardTypes" = NSAttributedString;
	    "+textUnfilteredTypes" = NSAttributedString;
	    "-RTFDFileWrapperFromRange:documentAttributes:" = NSAttributedString;
	    "-RTFDFromRange:documentAttributes:" = NSAttributedString;
	    "-RTFFromRange:documentAttributes:" = NSAttributedString;
	    "-containsAttachments" = NSAttributedString;
	    "-dataFromRange:documentAttributes:error:" = NSAttributedString;
	    "-docFormatFromRange:documentAttributes:" = NSAttributedString;
	    "-doubleClickAtIndex:" = NSAttributedString;
	    "-fileWrapperFromRange:documentAttributes:error:" = NSAttributedString;
	    "-fontAttributesInRange:" = NSAttributedString;
	    "-initWithData:options:documentAttributes:error:" = NSAttributedString;
	    "-initWithDocFormat:documentAttributes:" = NSAttributedString;
	    "-initWithHTML:baseURL:documentAttributes:" = NSAttributedString;
	    "-initWithHTML:documentAttributes:" = NSAttributedString;
	    "-initWithHTML:options:documentAttributes:" = NSAttributedString;
	    "-initWithPath:documentAttributes:" = NSAttributedString;
	    "-initWithRTF:documentAttributes:" = NSAttributedString;
	    "-initWithRTFD:documentAttributes:" = NSAttributedString;
	    "-initWithRTFDFileWrapper:documentAttributes:" = NSAttributedString;
	    "-initWithURL:documentAttributes:" = NSAttributedString;
	    "-initWithURL:options:documentAttributes:error:" = NSAttributedString;
	    "-itemNumberInTextList:atIndex:" = NSAttributedString;
	    "-lineBreakBeforeIndex:withinRange:" = NSAttributedString;
	    "-lineBreakByHyphenatingBeforeIndex:withinRange:" = NSAttributedString;
	    "-nextWordFromIndex:forward:" = NSAttributedString;
	    "-rangeOfTextBlock:atIndex:" = NSAttributedString;
	    "-rangeOfTextList:atIndex:" = NSAttributedString;
	    "-rangeOfTextTable:atIndex:" = NSAttributedString;
	    "-rulerAttributesInRange:" = NSAttributedString;
	};
	"NSAttributedString(NSStringDrawing)" = {
	    "-boundingRectWithSize:options:" = NSStringDrawing;
	    "-drawAtPoint:" = NSStringDrawing;
	    "-drawInRect:" = NSStringDrawing;
	    "-drawWithRect:options:" = NSStringDrawing;
	    "-size" = NSStringDrawing;
	};
	"NSAttributedString(NSTextAttachment)" = {
	    "+attributedStringWithAttachment:" = NSTextAttachment;
	    "-containsAttachments" = NSTextAttachment;
	};
	NSBezierPath = {
	    "+bezierPath" = NSBezierPath;
	    "+bezierPathWithOvalInRect:" = NSBezierPath;
	    "+bezierPathWithRect:" = NSBezierPath;
	    "+bezierPathWithRoundedRect:xRadius:yRadius:" = NSBezierPath;
	    "+clipRect:" = NSBezierPath;
	    "+defaultFlatness" = NSBezierPath;
	    "+defaultLineCapStyle" = NSBezierPath;
	    "+defaultLineJoinStyle" = NSBezierPath;
	    "+defaultLineWidth" = NSBezierPath;
	    "+defaultMiterLimit" = NSBezierPath;
	    "+defaultWindingRule" = NSBezierPath;
	    "+drawPackedGlyphs:atPoint:" = NSBezierPath;
	    "+fillRect:" = NSBezierPath;
	    "+setDefaultFlatness:" = NSBezierPath;
	    "+setDefaultLineCapStyle:" = NSBezierPath;
	    "+setDefaultLineJoinStyle:" = NSBezierPath;
	    "+setDefaultLineWidth:" = NSBezierPath;
	    "+setDefaultMiterLimit:" = NSBezierPath;
	    "+setDefaultWindingRule:" = NSBezierPath;
	    "+strokeLineFromPoint:toPoint:" = NSBezierPath;
	    "+strokeRect:" = NSBezierPath;
	    "-addClip" = NSBezierPath;
	    "-appendBezierPath:" = NSBezierPath;
	    "-appendBezierPathWithArcFromPoint:toPoint:radius:" = NSBezierPath;
	    "-appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:" = NSBezierPath;
	    "-appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:" = NSBezierPath;
	    "-appendBezierPathWithGlyph:inFont:" = NSBezierPath;
	    "-appendBezierPathWithGlyphs:count:inFont:" = NSBezierPath;
	    "-appendBezierPathWithOvalInRect:" = NSBezierPath;
	    "-appendBezierPathWithPackedGlyphs:" = NSBezierPath;
	    "-appendBezierPathWithPoints:count:" = NSBezierPath;
	    "-appendBezierPathWithRect:" = NSBezierPath;
	    "-appendBezierPathWithRoundedRect:xRadius:yRadius:" = NSBezierPath;
	    "-bezierPathByFlatteningPath" = NSBezierPath;
	    "-bezierPathByReversingPath" = NSBezierPath;
	    "-bounds" = NSBezierPath;
	    "-cachesBezierPath" = NSBezierPath;
	    "-closePath" = NSBezierPath;
	    "-containsPoint:" = NSBezierPath;
	    "-controlPointBounds" = NSBezierPath;
	    "-currentPoint" = NSBezierPath;
	    "-curveToPoint:controlPoint1:controlPoint2:" = NSBezierPath;
	    "-elementAtIndex:" = NSBezierPath;
	    "-elementAtIndex:associatedPoints:" = NSBezierPath;
	    "-elementCount" = NSBezierPath;
	    "-fill" = NSBezierPath;
	    "-flatness" = NSBezierPath;
	    "-getLineDash:count:phase:" = NSBezierPath;
	    "-isEmpty" = NSBezierPath;
	    "-lineCapStyle" = NSBezierPath;
	    "-lineJoinStyle" = NSBezierPath;
	    "-lineToPoint:" = NSBezierPath;
	    "-lineWidth" = NSBezierPath;
	    "-miterLimit" = NSBezierPath;
	    "-moveToPoint:" = NSBezierPath;
	    "-relativeCurveToPoint:controlPoint1:controlPoint2:" = NSBezierPath;
	    "-relativeLineToPoint:" = NSBezierPath;
	    "-relativeMoveToPoint:" = NSBezierPath;
	    "-removeAllPoints" = NSBezierPath;
	    "-setAssociatedPoints:atIndex:" = NSBezierPath;
	    "-setCachesBezierPath:" = NSBezierPath;
	    "-setClip" = NSBezierPath;
	    "-setFlatness:" = NSBezierPath;
	    "-setLineCapStyle:" = NSBezierPath;
	    "-setLineDash:count:phase:" = NSBezierPath;
	    "-setLineJoinStyle:" = NSBezierPath;
	    "-setLineWidth:" = NSBezierPath;
	    "-setMiterLimit:" = NSBezierPath;
	    "-setWindingRule:" = NSBezierPath;
	    "-stroke" = NSBezierPath;
	    "-transformUsingAffineTransform:" = NSBezierPath;
	    "-windingCountAtPoint:" = NSBezierPath;
	    "-windingRule" = NSBezierPath;
	};
	NSBitmapImageRep = {
	    "+TIFFRepresentationOfImageRepsInArray:" = NSBitmapImageRep;
	    "+TIFFRepresentationOfImageRepsInArray:usingCompression:factor:" = NSBitmapImageRep;
	    "+getTIFFCompressionTypes:count:" = NSBitmapImageRep;
	    "+imageRepWithData:" = NSBitmapImageRep;
	    "+imageRepsWithData:" = NSBitmapImageRep;
	    "+localizedNameForTIFFCompressionType:" = NSBitmapImageRep;
	    "+representationOfImageRepsInArray:usingType:properties:" = NSBitmapImageRep;
	    "-TIFFRepresentation" = NSBitmapImageRep;
	    "-TIFFRepresentationUsingCompression:factor:" = NSBitmapImageRep;
	    "-bitmapData" = NSBitmapImageRep;
	    "-bitmapFormat" = NSBitmapImageRep;
	    "-bitsPerPixel" = NSBitmapImageRep;
	    "-bytesPerPlane" = NSBitmapImageRep;
	    "-bytesPerRow" = NSBitmapImageRep;
	    "-canBeCompressedUsing:" = NSBitmapImageRep;
	    "-colorAtX:y:" = NSBitmapImageRep;
	    "-colorizeByMappingGray:toColor:blackMapping:whiteMapping:" = NSBitmapImageRep;
	    "-getBitmapDataPlanes:" = NSBitmapImageRep;
	    "-getCompression:factor:" = NSBitmapImageRep;
	    "-getPixel:atX:y:" = NSBitmapImageRep;
	    "-incrementalLoadFromData:complete:" = NSBitmapImageRep;
	    "-initForIncrementalLoad" = NSBitmapImageRep;
	    "-initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:" = NSBitmapImageRep;
	    "-initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:" = NSBitmapImageRep;
	    "-initWithBitmapHandle:" = NSBitmapImageRep;
	    "-initWithData:" = NSBitmapImageRep;
	    "-initWithFocusedViewRect:" = NSBitmapImageRep;
	    "-initWithIconHandle:" = NSBitmapImageRep;
	    "-isPlanar" = NSBitmapImageRep;
	    "-numberOfPlanes" = NSBitmapImageRep;
	    "-representationUsingType:properties:" = NSBitmapImageRep;
	    "-samplesPerPixel" = NSBitmapImageRep;
	    "-setColor:atX:y:" = NSBitmapImageRep;
	    "-setCompression:factor:" = NSBitmapImageRep;
	    "-setPixel:atX:y:" = NSBitmapImageRep;
	    "-setProperty:withValue:" = NSBitmapImageRep;
	    "-valueForProperty:" = NSBitmapImageRep;
	};
	"NSBitmapImageRep(GNUstepExtension)" = {
	    "+imageRepsWithFile:" = NSBitmapImageRep;
	};
	NSBox = {
	    "-borderColor" = NSBox;
	    "-borderRect" = NSBox;
	    "-borderType" = NSBox;
	    "-borderWidth" = NSBox;
	    "-boxType" = NSBox;
	    "-contentView" = NSBox;
	    "-contentViewMargins" = NSBox;
	    "-cornerRadius" = NSBox;
	    "-fillColor" = NSBox;
	    "-isTransparent" = NSBox;
	    "-minimumSize" = NSBox;
	    "-setBorderColor:" = NSBox;
	    "-setBorderType:" = NSBox;
	    "-setBorderWidth:" = NSBox;
	    "-setBoxType:" = NSBox;
	    "-setContentView:" = NSBox;
	    "-setContentViewMargins:" = NSBox;
	    "-setCornerRadius:" = NSBox;
	    "-setFillColor:" = NSBox;
	    "-setFrameFromContentFrame:" = NSBox;
	    "-setTitle:" = NSBox;
	    "-setTitleFont:" = NSBox;
	    "-setTitlePosition:" = NSBox;
	    "-setTitleWithMnemonic:" = NSBox;
	    "-setTransparent:" = NSBox;
	    "-sizeToFit" = NSBox;
	    "-title" = NSBox;
	    "-titleCell" = NSBox;
	    "-titleFont" = NSBox;
	    "-titlePosition" = NSBox;
	    "-titleRect" = NSBox;
	};
	NSBrowser = {
	    "+cellClass" = NSBrowser;
	    "+removeSavedColumnsWithAutosaveName:" = NSBrowser;
	    "-acceptsArrowKeys" = NSBrowser;
	    "-addColumn" = NSBrowser;
	    "-allowsBranchSelection" = NSBrowser;
	    "-allowsEmptySelection" = NSBrowser;
	    "-allowsMultipleSelection" = NSBrowser;
	    "-allowsTypeSelect" = NSBrowser;
	    "-autohidesScroller" = NSBrowser;
	    "-backgroundColor" = NSBrowser;
	    "-canDragRowsWithIndexes:inColumn:withEvent:" = NSBrowser;
	    "-cellPrototype" = NSBrowser;
	    "-clickedColumn" = NSBrowser;
	    "-clickedRow" = NSBrowser;
	    "-columnContentWidthForColumnWidth:" = NSBrowser;
	    "-columnOfMatrix:" = NSBrowser;
	    "-columnResizingType" = NSBrowser;
	    "-columnWidthForColumnContentWidth:" = NSBrowser;
	    "-columnsAutosaveName" = NSBrowser;
	    "-delegate" = NSBrowser;
	    "-displayAllColumns" = NSBrowser;
	    "-displayColumn:" = NSBrowser;
	    "-doClick:" = NSBrowser;
	    "-doDoubleClick:" = NSBrowser;
	    "-doubleAction" = NSBrowser;
	    "-drawTitle:inRect:ofColumn:" = NSBrowser;
	    "-drawTitleOfColumn:inRect:" = NSBrowser;
	    "-firstVisibleColumn" = NSBrowser;
	    "-frameOfColumn:" = NSBrowser;
	    "-frameOfInsideOfColumn:" = NSBrowser;
	    "-hasHorizontalScroller" = NSBrowser;
	    "-isLoaded" = NSBrowser;
	    "-isTitled" = NSBrowser;
	    "-lastColumn" = NSBrowser;
	    "-lastVisibleColumn" = NSBrowser;
	    "-loadColumnZero" = NSBrowser;
	    "-loadedCellAtRow:column:" = NSBrowser;
	    "-matrixClass" = NSBrowser;
	    "-matrixInColumn:" = NSBrowser;
	    "-maxVisibleColumns" = NSBrowser;
	    "-minColumnWidth" = NSBrowser;
	    "-numberOfVisibleColumns" = NSBrowser;
	    "-path" = NSBrowser;
	    "-pathSeparator" = NSBrowser;
	    "-pathToColumn:" = NSBrowser;
	    "-prefersAllColumnUserResizing" = NSBrowser;
	    "-reloadColumn:" = NSBrowser;
	    "-reusesColumns" = NSBrowser;
	    "-scrollColumnToVisible:" = NSBrowser;
	    "-scrollColumnsLeftBy:" = NSBrowser;
	    "-scrollColumnsRightBy:" = NSBrowser;
	    "-scrollRowToVisible:inColumn:" = NSBrowser;
	    "-scrollViaScroller:" = NSBrowser;
	    "-selectAll:" = NSBrowser;
	    "-selectRow:inColumn:" = NSBrowser;
	    "-selectedCell" = NSBrowser;
	    "-selectedCellInColumn:" = NSBrowser;
	    "-selectedCells" = NSBrowser;
	    "-selectedColumn" = NSBrowser;
	    "-selectedRowInColumn:" = NSBrowser;
	    "-selectionIndexPath" = NSBrowser;
	    "-selectionIndexPaths" = NSBrowser;
	    "-sendAction" = NSBrowser;
	    "-sendsActionOnArrowKeys" = NSBrowser;
	    "-separatesColumns" = NSBrowser;
	    "-setAcceptsArrowKeys:" = NSBrowser;
	    "-setAllowsBranchSelection:" = NSBrowser;
	    "-setAllowsEmptySelection:" = NSBrowser;
	    "-setAllowsMultipleSelection:" = NSBrowser;
	    "-setAllowsTypeSelect:" = NSBrowser;
	    "-setAutohidesScroller:" = NSBrowser;
	    "-setBackgroundColor:" = NSBrowser;
	    "-setCellClass:" = NSBrowser;
	    "-setCellPrototype:" = NSBrowser;
	    "-setColumnResizingType:" = NSBrowser;
	    "-setColumnsAutosaveName:" = NSBrowser;
	    "-setDelegate:" = NSBrowser;
	    "-setDoubleAction:" = NSBrowser;
	    "-setHasHorizontalScroller:" = NSBrowser;
	    "-setLastColumn:" = NSBrowser;
	    "-setMatrixClass:" = NSBrowser;
	    "-setMaxVisibleColumns:" = NSBrowser;
	    "-setMinColumnWidth:" = NSBrowser;
	    "-setPath:" = NSBrowser;
	    "-setPathSeparator:" = NSBrowser;
	    "-setPrefersAllColumnUserResizing:" = NSBrowser;
	    "-setReusesColumns:" = NSBrowser;
	    "-setSelectionIndexPath:" = NSBrowser;
	    "-setSelectionIndexPaths:" = NSBrowser;
	    "-setSendsActionOnArrowKeys:" = NSBrowser;
	    "-setSeparatesColumns:" = NSBrowser;
	    "-setTakesTitleFromPreviousColumn:" = NSBrowser;
	    "-setTitle:ofColumn:" = NSBrowser;
	    "-setTitled:" = NSBrowser;
	    "-setWidth:ofColumn:" = NSBrowser;
	    "-takesTitleFromPreviousColumn" = NSBrowser;
	    "-tile" = NSBrowser;
	    "-titleFrameOfColumn:" = NSBrowser;
	    "-titleHeight" = NSBrowser;
	    "-titleOfColumn:" = NSBrowser;
	    "-updateScroller" = NSBrowser;
	    "-validateVisibleColumns" = NSBrowser;
	    "-widthOfColumn:" = NSBrowser;
	};
	"NSBrowser(GNUstepExtensions)" = {
	    "-acceptsAlphaNumericalKeys" = NSBrowser;
	    "-sendsActionOnAlphaNumericalKeys" = NSBrowser;
	    "-setAcceptsAlphaNumericalKeys:" = NSBrowser;
	    "-setSendsActionOnAlphaNumericalKeys:" = NSBrowser;
	};
	NSBrowserCell = {
	    "+branchImage" = NSBrowserCell;
	    "+highlightedBranchImage" = NSBrowserCell;
	    "-alternateImage" = NSBrowserCell;
	    "-highlightColorInView:" = NSBrowserCell;
	    "-isLeaf" = NSBrowserCell;
	    "-isLoaded" = NSBrowserCell;
	    "-reset" = NSBrowserCell;
	    "-set" = NSBrowserCell;
	    "-setAlternateImage:" = NSBrowserCell;
	    "-setLeaf:" = NSBrowserCell;
	    "-setLoaded:" = NSBrowserCell;
	};
	"NSBundle(NSHelpManager)" = {
	    "-contextHelpForKey:" = NSHelpManager;
	    "-pathForHelpResource:" = NSHelpManager;
	};
	"NSBundle(NSImageAdditions)" = {
	    "-pathForImageResource:" = NSImage;
	};
	"NSBundle(NSSoundAdditions)" = {
	    "-pathForSoundResource:" = NSSound;
	};
	NSButton = {
	    "-allowsMixedState" = NSButton;
	    "-alternateImage" = NSButton;
	    "-alternateTitle" = NSButton;
	    "-attributedAlternateTitle" = NSButton;
	    "-attributedTitle" = NSButton;
	    "-bezelStyle" = NSButton;
	    "-getPeriodicDelay:interval:" = NSButton;
	    "-highlight:" = NSButton;
	    "-image" = NSButton;
	    "-imagePosition" = NSButton;
	    "-isBordered" = NSButton;
	    "-isTransparent" = NSButton;
	    "-keyEquivalent" = NSButton;
	    "-keyEquivalentModifierMask" = NSButton;
	    "-performKeyEquivalent:" = NSButton;
	    "-setAllowsMixedState:" = NSButton;
	    "-setAlternateImage:" = NSButton;
	    "-setAlternateTitle:" = NSButton;
	    "-setAttributedAlternateTitle:" = NSButton;
	    "-setAttributedTitle:" = NSButton;
	    "-setBezelStyle:" = NSButton;
	    "-setBordered:" = NSButton;
	    "-setButtonType:" = NSButton;
	    "-setHighlightsBy:" = NSButton;
	    "-setImage:" = NSButton;
	    "-setImagePosition:" = NSButton;
	    "-setKeyEquivalent:" = NSButton;
	    "-setKeyEquivalentModifierMask:" = NSButton;
	    "-setNextState" = NSButton;
	    "-setPeriodicDelay:interval:" = NSButton;
	    "-setShowsBorderOnlyWhileMouseInside:" = NSButton;
	    "-setShowsStateBy:" = NSButton;
	    "-setSound:" = NSButton;
	    "-setState:" = NSButton;
	    "-setTitle:" = NSButton;
	    "-setTitleWithMnemonic:" = NSButton;
	    "-setTransparent:" = NSButton;
	    "-showsBorderOnlyWhileMouseInside" = NSButton;
	    "-sound" = NSButton;
	    "-state" = NSButton;
	    "-title" = NSButton;
	};
	NSButtonCell = {
	    "-alternateImage" = NSButtonCell;
	    "-alternateMnemonic" = NSButtonCell;
	    "-alternateMnemonicLocation" = NSButtonCell;
	    "-alternateTitle" = NSButtonCell;
	    "-attributedAlternateTitle" = NSButtonCell;
	    "-attributedTitle" = NSButtonCell;
	    "-backgroundColor" = NSButtonCell;
	    "-bezelStyle" = NSButtonCell;
	    "-drawBezelWithFrame:inView:" = NSButtonCell;
	    "-drawImage:withFrame:inView:" = NSButtonCell;
	    "-drawTitle:withFrame:inView:" = NSButtonCell;
	    "-getPeriodicDelay:interval:" = NSButtonCell;
	    "-gradientType" = NSButtonCell;
	    "-highlightsBy" = NSButtonCell;
	    "-imageDimsWhenDisabled" = NSButtonCell;
	    "-imagePosition" = NSButtonCell;
	    "-imageScaling" = NSButtonCell;
	    "-isTransparent" = NSButtonCell;
	    "-keyEquivalent" = NSButtonCell;
	    "-keyEquivalentFont" = NSButtonCell;
	    "-keyEquivalentModifierMask" = NSButtonCell;
	    "-mouseEntered:" = NSButtonCell;
	    "-mouseExited:" = NSButtonCell;
	    "-setAlternateImage:" = NSButtonCell;
	    "-setAlternateMnemonicLocation:" = NSButtonCell;
	    "-setAlternateTitle:" = NSButtonCell;
	    "-setAlternateTitleWithMnemonic:" = NSButtonCell;
	    "-setAttributedAlternateTitle:" = NSButtonCell;
	    "-setAttributedTitle:" = NSButtonCell;
	    "-setBackgroundColor:" = NSButtonCell;
	    "-setBezelStyle:" = NSButtonCell;
	    "-setButtonType:" = NSButtonCell;
	    "-setFont:" = NSButtonCell;
	    "-setGradientType:" = NSButtonCell;
	    "-setHighlightsBy:" = NSButtonCell;
	    "-setImageDimsWhenDisabled:" = NSButtonCell;
	    "-setImagePosition:" = NSButtonCell;
	    "-setImageScaling:" = NSButtonCell;
	    "-setKeyEquivalent:" = NSButtonCell;
	    "-setKeyEquivalentFont:" = NSButtonCell;
	    "-setKeyEquivalentFont:size:" = NSButtonCell;
	    "-setKeyEquivalentModifierMask:" = NSButtonCell;
	    "-setPeriodicDelay:interval:" = NSButtonCell;
	    "-setShowsBorderOnlyWhileMouseInside:" = NSButtonCell;
	    "-setShowsStateBy:" = NSButtonCell;
	    "-setSound:" = NSButtonCell;
	    "-setTitle:" = NSButtonCell;
	    "-setTitleWithMnemonic:" = NSButtonCell;
	    "-setTransparent:" = NSButtonCell;
	    "-showsBorderOnlyWhileMouseInside" = NSButtonCell;
	    "-showsStateBy" = NSButtonCell;
	    "-sound" = NSButtonCell;
	    "-title" = NSButtonCell;
	};
	NSCachedImageRep = {
	    "-initWithSize:depth:separate:alpha:" = NSCachedImageRep;
	    "-initWithSize:pixelsWide:pixelsHigh:depth:separate:alpha:" = NSCachedImageRep;
	    "-initWithWindow:rect:" = NSCachedImageRep;
	    "-rect" = NSCachedImageRep;
	    "-window" = NSCachedImageRep;
	};
	NSCell = {
	    "+defaultFocusRingType" = NSCell;
	    "+defaultMenu" = NSCell;
	    "+prefersTrackingUntilMouseUp" = NSCell;
	    "-acceptsFirstResponder" = NSCell;
	    "-action" = NSCell;
	    "-alignment" = NSCell;
	    "-allowsEditingTextAttributes" = NSCell;
	    "-allowsMixedState" = NSCell;
	    "-allowsUndo" = NSCell;
	    "-attributedStringValue" = NSCell;
	    "-backgroundStyle" = NSCell;
	    "-baseWritingDirection" = NSCell;
	    "-calcDrawInfo:" = NSCell;
	    "-cellAttribute:" = NSCell;
	    "-cellSize" = NSCell;
	    "-cellSizeForBounds:" = NSCell;
	    "-compare:" = NSCell;
	    "-continueTracking:at:inView:" = NSCell;
	    "-controlSize" = NSCell;
	    "-controlTint" = NSCell;
	    "-controlView" = NSCell;
	    "-doubleValue" = NSCell;
	    "-drawInteriorWithFrame:inView:" = NSCell;
	    "-drawWithFrame:inView:" = NSCell;
	    "-drawingRectForBounds:" = NSCell;
	    "-editWithFrame:inView:editor:delegate:event:" = NSCell;
	    "-endEditing:" = NSCell;
	    "-entryType" = NSCell;
	    "-floatValue" = NSCell;
	    "-focusRingType" = NSCell;
	    "-font" = NSCell;
	    "-formatter" = NSCell;
	    "-getPeriodicDelay:interval:" = NSCell;
	    "-hasValidObjectValue" = NSCell;
	    "-highlight:withFrame:inView:" = NSCell;
	    "-highlightColorWithFrame:inView:" = NSCell;
	    "-hitTestForEvent:inRect:ofView:" = NSCell;
	    "-image" = NSCell;
	    "-imageRectForBounds:" = NSCell;
	    "-importsGraphics" = NSCell;
	    "-initImageCell:" = NSCell;
	    "-initTextCell:" = NSCell;
	    "-intValue" = NSCell;
	    "-integerValue" = NSCell;
	    "-isBezeled" = NSCell;
	    "-isBordered" = NSCell;
	    "-isContinuous" = NSCell;
	    "-isEditable" = NSCell;
	    "-isEnabled" = NSCell;
	    "-isEntryAcceptable:" = NSCell;
	    "-isHighlighted" = NSCell;
	    "-isOpaque" = NSCell;
	    "-isScrollable" = NSCell;
	    "-isSelectable" = NSCell;
	    "-keyEquivalent" = NSCell;
	    "-lineBreakMode" = NSCell;
	    "-menu" = NSCell;
	    "-menuForEvent:inRect:ofView:" = NSCell;
	    "-mnemonic" = NSCell;
	    "-mnemonicLocation" = NSCell;
	    "-mouseDownFlags" = NSCell;
	    "-nextState" = NSCell;
	    "-objectValue" = NSCell;
	    "-performClick:" = NSCell;
	    "-performClickWithFrame:inView:" = NSCell;
	    "-refusesFirstResponder" = NSCell;
	    "-representedObject" = NSCell;
	    "-resetCursorRect:inView:" = NSCell;
	    "-selectWithFrame:inView:editor:delegate:start:length:" = NSCell;
	    "-sendActionOn:" = NSCell;
	    "-sendsActionOnEndEditing" = NSCell;
	    "-setAction:" = NSCell;
	    "-setAlignment:" = NSCell;
	    "-setAllowsEditingTextAttributes:" = NSCell;
	    "-setAllowsMixedState:" = NSCell;
	    "-setAllowsUndo:" = NSCell;
	    "-setAttributedStringValue:" = NSCell;
	    "-setBackgroundStyle:" = NSCell;
	    "-setBaseWritingDirection:" = NSCell;
	    "-setBezeled:" = NSCell;
	    "-setBordered:" = NSCell;
	    "-setCellAttribute:to:" = NSCell;
	    "-setContinuous:" = NSCell;
	    "-setControlSize:" = NSCell;
	    "-setControlTint:" = NSCell;
	    "-setControlView:" = NSCell;
	    "-setDoubleValue:" = NSCell;
	    "-setEditable:" = NSCell;
	    "-setEnabled:" = NSCell;
	    "-setEntryType:" = NSCell;
	    "-setFloatValue:" = NSCell;
	    "-setFloatingPointFormat:left:right:" = NSCell;
	    "-setFocusRingType:" = NSCell;
	    "-setFont:" = NSCell;
	    "-setFormatter:" = NSCell;
	    "-setHighlighted:" = NSCell;
	    "-setImage:" = NSCell;
	    "-setImportsGraphics:" = NSCell;
	    "-setIntValue:" = NSCell;
	    "-setIntegerValue:" = NSCell;
	    "-setLineBreakMode:" = NSCell;
	    "-setMenu:" = NSCell;
	    "-setMnemonicLocation:" = NSCell;
	    "-setNextState" = NSCell;
	    "-setObjectValue:" = NSCell;
	    "-setRefusesFirstResponder:" = NSCell;
	    "-setRepresentedObject:" = NSCell;
	    "-setScrollable:" = NSCell;
	    "-setSelectable:" = NSCell;
	    "-setSendsActionOnEndEditing:" = NSCell;
	    "-setShowsFirstResponder:" = NSCell;
	    "-setState:" = NSCell;
	    "-setStringValue:" = NSCell;
	    "-setTag:" = NSCell;
	    "-setTarget:" = NSCell;
	    "-setTitle:" = NSCell;
	    "-setTitleWithMnemonic:" = NSCell;
	    "-setType:" = NSCell;
	    "-setUpFieldEditorAttributes:" = NSCell;
	    "-setUserInterfaceLayoutDirection:" = NSCell;
	    "-setUsesSingleLineMode:" = NSCell;
	    "-setWraps:" = NSCell;
	    "-showsFirstResponder" = NSCell;
	    "-startTrackingAt:inView:" = NSCell;
	    "-state" = NSCell;
	    "-stopTracking:at:inView:mouseIsUp:" = NSCell;
	    "-stringValue" = NSCell;
	    "-tag" = NSCell;
	    "-takeDoubleValueFrom:" = NSCell;
	    "-takeFloatValueFrom:" = NSCell;
	    "-takeIntValueFrom:" = NSCell;
	    "-takeIntegerValueFrom:" = NSCell;
	    "-takeObjectValueFrom:" = NSCell;
	    "-takeStringValueFrom:" = NSCell;
	    "-target" = NSCell;
	    "-title" = NSCell;
	    "-titleRectForBounds:" = NSCell;
	    "-trackMouse:inRect:ofView:untilMouseUp:" = NSCell;
	    "-type" = NSCell;
	    "-userInterfaceLayoutDirection" = NSCell;
	    "-usesSingleLineMode" = NSCell;
	    "-wraps" = NSCell;
	};
	"NSCell(PrivateMethods)" = {
	    "-_drawAttributedString" = NSCell;
	    "-_drawAttributedText:inFrame:" = NSCell;
	    "-_drawBorderAndBackgroundWithFrame:inView:" = NSCell;
	    "-_drawEditorWithFrame:inView:" = NSCell;
	    "-_drawFocusRingWithFrame:inView:" = NSCell;
	    "-_drawText:inFrame:" = NSCell;
	    "-_nonAutoreleasedTypingAttributes" = NSCell;
	    "-_sendsActionOn:" = NSCell;
	    "-_setInEditing:" = NSCell;
	    "-_sizeText:" = NSCell;
	    "-_updateFieldEditor:" = NSCell;
	    "-textColor" = NSCell;
	};
	NSClipView = {
	    "-autoscroll:" = NSClipView;
	    "-backgroundColor" = NSClipView;
	    "-constrainScrollPoint:" = NSClipView;
	    "-copiesOnScroll" = NSClipView;
	    "-documentCursor" = NSClipView;
	    "-documentRect" = NSClipView;
	    "-documentView" = NSClipView;
	    "-documentVisibleRect" = NSClipView;
	    "-drawsBackground" = NSClipView;
	    "-scrollToPoint:" = NSClipView;
	    "-setBackgroundColor:" = NSClipView;
	    "-setCopiesOnScroll:" = NSClipView;
	    "-setDocumentCursor:" = NSClipView;
	    "-setDocumentView:" = NSClipView;
	    "-setDrawsBackground:" = NSClipView;
	};
	"NSCoder(NSCoderAdditions)" = {
	    "-decodeNXColor" = NSColor;
	};
	NSCollectionView = {
	    "-allowsEmptySelection" = NSCollectionView;
	    "-allowsMultipleSelection" = NSCollectionView;
	    "-backgroundColors" = NSCollectionView;
	    "-backgroundView" = NSCollectionView;
	    "-backgroundViewScrollsWithContent" = NSCollectionView;
	    "-collectionViewLayout" = NSCollectionView;
	    "-content" = NSCollectionView;
	    "-dataSource" = NSCollectionView;
	    "-delegate" = NSCollectionView;
	    "-deleteItemsAtIndexPaths:" = NSCollectionView;
	    "-deleteSections:" = NSCollectionView;
	    "-deselectAll:" = NSCollectionView;
	    "-deselectItemsAtIndexPaths:" = NSCollectionView;
	    "-draggingImageForItemsAtIndexes:withEvent:offset:" = NSCollectionView;
	    "-frameForItemAtIndex:" = NSCollectionView;
	    "-indexPathForItem:" = NSCollectionView;
	    "-indexPathForItemAtPoint:" = NSCollectionView;
	    "-indexPathsForVisibleItems" = NSCollectionView;
	    "-indexPathsForVisibleSupplementaryElementsOfKind:" = NSCollectionView;
	    "-insertItemsAtIndexPaths:" = NSCollectionView;
	    "-insertSections:" = NSCollectionView;
	    "-isSelectable" = NSCollectionView;
	    "-itemAtIndex:" = NSCollectionView;
	    "-itemAtIndexPath:" = NSCollectionView;
	    "-itemPrototype" = NSCollectionView;
	    "-layoutAttributesForItemAtIndexPath:" = NSCollectionView;
	    "-layoutAttributesForSupplementaryElementOfKind:atIndexPath:" = NSCollectionView;
	    "-makeItemWithIdentifier:forIndexPath:" = NSCollectionView;
	    "-makeSupplementaryViewOfKind:withIdentifier:forIndexPath:" = NSCollectionView;
	    "-maxItemSize" = NSCollectionView;
	    "-maxNumberOfColumns" = NSCollectionView;
	    "-maxNumberOfRows" = NSCollectionView;
	    "-minItemSize" = NSCollectionView;
	    "-moveItemAtIndexPath:toIndexPath:" = NSCollectionView;
	    "-moveSection:toSection:" = NSCollectionView;
	    "-newItemForRepresentedObject:" = NSCollectionView;
	    "-numberOfItemsInSection:" = NSCollectionView;
	    "-numberOfSections" = NSCollectionView;
	    "-performBatchUpdates:completionHandler:" = NSCollectionView;
	    "-prefetchDataSource" = NSCollectionView;
	    "-registerClass:forItemWithIdentifier:" = NSCollectionView;
	    "-registerClass:forSupplementaryViewOfKind:withIdentifier:" = NSCollectionView;
	    "-registerNib:forItemWithIdentifier:" = NSCollectionView;
	    "-registerNib:forSupplementaryViewOfKind:withIdentifier:" = NSCollectionView;
	    "-reloadData" = NSCollectionView;
	    "-reloadItemsAtIndexPaths:" = NSCollectionView;
	    "-reloadSections:" = NSCollectionView;
	    "-scrollToItemsAtIndexPaths:scrollPosition:" = NSCollectionView;
	    "-selectAll:" = NSCollectionView;
	    "-selectItemsAtIndexPaths:scrollPosition:" = NSCollectionView;
	    "-selectionIndexPaths" = NSCollectionView;
	    "-selectionIndexes" = NSCollectionView;
	    "-setAllowsEmptySelection:" = NSCollectionView;
	    "-setAllowsMultipleSelection:" = NSCollectionView;
	    "-setBackgroundColors:" = NSCollectionView;
	    "-setBackgroundView:" = NSCollectionView;
	    "-setBackgroundViewScrollsWithContent:" = NSCollectionView;
	    "-setCollectionViewLayout:" = NSCollectionView;
	    "-setContent:" = NSCollectionView;
	    "-setDataSource:" = NSCollectionView;
	    "-setDelegate:" = NSCollectionView;
	    "-setDraggingSourceOperationMask:forLocal:" = NSCollectionView;
	    "-setItemPrototype:" = NSCollectionView;
	    "-setMaxItemSize:" = NSCollectionView;
	    "-setMaxNumberOfColumns:" = NSCollectionView;
	    "-setMaxNumberOfRows:" = NSCollectionView;
	    "-setMinItemSize:" = NSCollectionView;
	    "-setPrefetchDataSource:" = NSCollectionView;
	    "-setSelectable:" = NSCollectionView;
	    "-setSelectionIndexPaths:" = NSCollectionView;
	    "-setSelectionIndexes:" = NSCollectionView;
	    "-supplementaryViewForElementKind:atIndexPath:" = NSCollectionView;
	    "-tile" = NSCollectionView;
	    "-toggleSectionCollapse:" = NSCollectionView;
	    "-visibleItems" = NSCollectionView;
	    "-visibleSupplementaryViewsOfKind:" = NSCollectionView;
	};
	NSCollectionViewItem = {
	    "-collectionView" = NSCollectionViewItem;
	    "-draggingImageComponents" = NSCollectionViewItem;
	    "-imageView" = NSCollectionViewItem;
	    "-isSelected" = NSCollectionViewItem;
	    "-setImageView:" = NSCollectionViewItem;
	    "-setSelected:" = NSCollectionViewItem;
	    "-setTextField:" = NSCollectionViewItem;
	    "-textField" = NSCollectionViewItem;
	};
	NSColor = {
	    "+alternateSelectedControlColor" = NSColor;
	    "+alternateSelectedControlTextColor" = NSColor;
	    "+blackColor" = NSColor;
	    "+blueColor" = NSColor;
	    "+brownColor" = NSColor;
	    "+clearColor" = NSColor;
	    "+colorForControlTint:" = NSColor;
	    "+colorFromPasteboard:" = NSColor;
	    "+colorWithCalibratedHue:saturation:brightness:alpha:" = NSColor;
	    "+colorWithCalibratedRed:green:blue:alpha:" = NSColor;
	    "+colorWithCalibratedWhite:alpha:" = NSColor;
	    "+colorWithCatalogName:colorName:" = NSColor;
	    "+colorWithColorSpace:components:count:" = NSColor;
	    "+colorWithColorSpace:hue:saturation:brightness:alpha:" = NSColor;
	    "+colorWithDeviceCyan:magenta:yellow:black:alpha:" = NSColor;
	    "+colorWithDeviceHue:saturation:brightness:alpha:" = NSColor;
	    "+colorWithDeviceRed:green:blue:alpha:" = NSColor;
	    "+colorWithDeviceWhite:alpha:" = NSColor;
	    "+colorWithDisplayP3Red:green:blue:alpha:" = NSColor;
	    "+colorWithGenericGamma22White:alpha:" = NSColor;
	    "+colorWithHue:saturation:brightness:alpha:" = NSColor;
	    "+colorWithPatternImage:" = NSColor;
	    "+colorWithRed:green:blue:alpha:" = NSColor;
	    "+colorWithSRGBRed:green:blue:alpha:" = NSColor;
	    "+colorWithWhite:alpha:" = NSColor;
	    "+controlAlternatingRowBackgroundColors" = NSColor;
	    "+controlBackgroundColor" = NSColor;
	    "+controlColor" = NSColor;
	    "+controlDarkShadowColor" = NSColor;
	    "+controlHighlightColor" = NSColor;
	    "+controlLightHighlightColor" = NSColor;
	    "+controlShadowColor" = NSColor;
	    "+controlTextColor" = NSColor;
	    "+currentControlTint" = NSColor;
	    "+cyanColor" = NSColor;
	    "+darkGrayColor" = NSColor;
	    "+disabledControlTextColor" = NSColor;
	    "+grayColor" = NSColor;
	    "+greenColor" = NSColor;
	    "+gridColor" = NSColor;
	    "+headerColor" = NSColor;
	    "+headerTextColor" = NSColor;
	    "+highlightColor" = NSColor;
	    "+ignoresAlpha" = NSColor;
	    "+keyboardFocusIndicatorColor" = NSColor;
	    "+knobColor" = NSColor;
	    "+labelColor" = NSColor;
	    "+lightGrayColor" = NSColor;
	    "+magentaColor" = NSColor;
	    "+orangeColor" = NSColor;
	    "+purpleColor" = NSColor;
	    "+quaternaryLabelColor" = NSColor;
	    "+redColor" = NSColor;
	    "+scrollBarColor" = NSColor;
	    "+secondaryLabelColor" = NSColor;
	    "+secondarySelectedControlColor" = NSColor;
	    "+selectedControlColor" = NSColor;
	    "+selectedControlTextColor" = NSColor;
	    "+selectedKnobColor" = NSColor;
	    "+selectedMenuItemColor" = NSColor;
	    "+selectedMenuItemTextColor" = NSColor;
	    "+selectedTextBackgroundColor" = NSColor;
	    "+selectedTextColor" = NSColor;
	    "+setIgnoresAlpha:" = NSColor;
	    "+shadowColor" = NSColor;
	    "+systemBlueColor" = NSColor;
	    "+systemBrownColor" = NSColor;
	    "+systemGrayColor" = NSColor;
	    "+systemGreenColor" = NSColor;
	    "+systemIndigoColor" = NSColor;
	    "+systemOrangeColor" = NSColor;
	    "+systemPinkColor" = NSColor;
	    "+systemPurpleColor" = NSColor;
	    "+systemRedColor" = NSColor;
	    "+systemTealColor" = NSColor;
	    "+systemYellowColor" = NSColor;
	    "+tertiaryLabelColor" = NSColor;
	    "+textBackgroundColor" = NSColor;
	    "+textColor" = NSColor;
	    "+toolTipColor" = NSColor;
	    "+toolTipTextColor" = NSColor;
	    "+whiteColor" = NSColor;
	    "+windowBackgroundColor" = NSColor;
	    "+windowFrameColor" = NSColor;
	    "+windowFrameTextColor" = NSColor;
	    "+yellowColor" = NSColor;
	    "-alphaComponent" = NSColor;
	    "-blackComponent" = NSColor;
	    "-blendedColorWithFraction:ofColor:" = NSColor;
	    "-blueComponent" = NSColor;
	    "-brightnessComponent" = NSColor;
	    "-catalogNameComponent" = NSColor;
	    "-colorNameComponent" = NSColor;
	    "-colorSpace" = NSColor;
	    "-colorSpaceName" = NSColor;
	    "-colorUsingColorSpace:" = NSColor;
	    "-colorUsingColorSpaceName:" = NSColor;
	    "-colorUsingColorSpaceName:device:" = NSColor;
	    "-colorUsingType:" = NSColor;
	    "-colorWithAlphaComponent:" = NSColor;
	    "-colorWithSystemEffect:" = NSColor;
	    "-cyanComponent" = NSColor;
	    "-drawSwatchInRect:" = NSColor;
	    "-getComponents:" = NSColor;
	    "-getCyan:magenta:yellow:black:alpha:" = NSColor;
	    "-getHue:saturation:brightness:alpha:" = NSColor;
	    "-getRed:green:blue:alpha:" = NSColor;
	    "-getWhite:alpha:" = NSColor;
	    "-greenComponent" = NSColor;
	    "-highlightWithLevel:" = NSColor;
	    "-hueComponent" = NSColor;
	    "-localizedCatalogNameComponent" = NSColor;
	    "-localizedColorNameComponent" = NSColor;
	    "-magentaComponent" = NSColor;
	    "-numberOfComponents" = NSColor;
	    "-patternImage" = NSColor;
	    "-redComponent" = NSColor;
	    "-saturationComponent" = NSColor;
	    "-set" = NSColor;
	    "-setFill" = NSColor;
	    "-setStroke" = NSColor;
	    "-shadowWithLevel:" = NSColor;
	    "-type" = NSColor;
	    "-whiteComponent" = NSColor;
	    "-writeToPasteboard:" = NSColor;
	    "-yellowComponent" = NSColor;
	};
	"NSColor(GSQuartz)" = {
	    "-CGColor" = NSColor;
	};
	NSColorList = {
	    "+availableColorLists" = NSColorList;
	    "+colorListNamed:" = NSColorList;
	    "-allKeys" = NSColorList;
	    "-colorWithKey:" = NSColorList;
	    "-encodeWithCoder:" = NSColorList;
	    "-initWithCoder:" = NSColorList;
	    "-initWithName:" = NSColorList;
	    "-initWithName:fromFile:" = NSColorList;
	    "-insertColor:key:atIndex:" = NSColorList;
	    "-isEditable" = NSColorList;
	    "-name" = NSColorList;
	    "-removeColorWithKey:" = NSColorList;
	    "-removeFile" = NSColorList;
	    "-setColor:forKey:" = NSColorList;
	    "-writeToFile:" = NSColorList;
	};
	NSColorPanel = {
	    "+dragColor:withEvent:fromView:" = NSColorPanel;
	    "+setPickerMask:" = NSColorPanel;
	    "+setPickerMode:" = NSColorPanel;
	    "+sharedColorPanel" = NSColorPanel;
	    "+sharedColorPanelExists" = NSColorPanel;
	    "-accessoryView" = NSColorPanel;
	    "-alpha" = NSColorPanel;
	    "-attachColorList:" = NSColorPanel;
	    "-color" = NSColorPanel;
	    "-detachColorList:" = NSColorPanel;
	    "-isContinuous" = NSColorPanel;
	    "-mode" = NSColorPanel;
	    "-setAccessoryView:" = NSColorPanel;
	    "-setAction:" = NSColorPanel;
	    "-setColor:" = NSColorPanel;
	    "-setContinuous:" = NSColorPanel;
	    "-setMode:" = NSColorPanel;
	    "-setShowsAlpha:" = NSColorPanel;
	    "-setTarget:" = NSColorPanel;
	    "-showsAlpha" = NSColorPanel;
	};
	NSColorPicker = {
	    "-alphaControlAddedOrRemoved:" = NSColorPicker;
	    "-attachColorList:" = NSColorPicker;
	    "-colorPanel" = NSColorPicker;
	    "-detachColorList:" = NSColorPicker;
	    "-initWithPickerMask:colorPanel:" = NSColorPicker;
	    "-insertNewButtonImage:in:" = NSColorPicker;
	    "-provideNewButtonImage" = NSColorPicker;
	    "-setMode:" = NSColorPicker;
	    "-viewSizeChanged:" = NSColorPicker;
	};
	NSColorWell = {
	    "-activate:" = NSColorWell;
	    "-color" = NSColorWell;
	    "-deactivate" = NSColorWell;
	    "-drawWellInside:" = NSColorWell;
	    "-encodeWithCoder:" = NSColorWell;
	    "-initWithCoder:" = NSColorWell;
	    "-isActive" = NSColorWell;
	    "-isBordered" = NSColorWell;
	    "-setBordered:" = NSColorWell;
	    "-setColor:" = NSColorWell;
	    "-takeColorFrom:" = NSColorWell;
	};
	NSComboBox = {
	    "-addItemWithObjectValue:" = NSComboBox;
	    "-addItemsWithObjectValues:" = NSComboBox;
	    "-completes" = NSComboBox;
	    "-dataSource" = NSComboBox;
	    "-deselectItemAtIndex:" = NSComboBox;
	    "-hasVerticalScroller" = NSComboBox;
	    "-indexOfItemWithObjectValue:" = NSComboBox;
	    "-indexOfSelectedItem" = NSComboBox;
	    "-insertItemWithObjectValue:atIndex:" = NSComboBox;
	    "-intercellSpacing" = NSComboBox;
	    "-isButtonBordered" = NSComboBox;
	    "-itemHeight" = NSComboBox;
	    "-itemObjectValueAtIndex:" = NSComboBox;
	    "-noteNumberOfItemsChanged" = NSComboBox;
	    "-numberOfItems" = NSComboBox;
	    "-numberOfVisibleItems" = NSComboBox;
	    "-objectValueOfSelectedItem" = NSComboBox;
	    "-objectValues" = NSComboBox;
	    "-reloadData" = NSComboBox;
	    "-removeAllItems" = NSComboBox;
	    "-removeItemAtIndex:" = NSComboBox;
	    "-removeItemWithObjectValue:" = NSComboBox;
	    "-scrollItemAtIndexToTop:" = NSComboBox;
	    "-scrollItemAtIndexToVisible:" = NSComboBox;
	    "-selectItemAtIndex:" = NSComboBox;
	    "-selectItemWithObjectValue:" = NSComboBox;
	    "-setButtonBordered:" = NSComboBox;
	    "-setCompletes:" = NSComboBox;
	    "-setDataSource:" = NSComboBox;
	    "-setHasVerticalScroller:" = NSComboBox;
	    "-setIntercellSpacing:" = NSComboBox;
	    "-setItemHeight:" = NSComboBox;
	    "-setNumberOfVisibleItems:" = NSComboBox;
	    "-setUsesDataSource:" = NSComboBox;
	    "-usesDataSource" = NSComboBox;
	};
	NSComboBoxCell = {
	    "-addItemWithObjectValue:" = NSComboBoxCell;
	    "-addItemsWithObjectValues:" = NSComboBoxCell;
	    "-completedString:" = NSComboBoxCell;
	    "-completes" = NSComboBoxCell;
	    "-dataSource" = NSComboBoxCell;
	    "-deselectItemAtIndex:" = NSComboBoxCell;
	    "-hasVerticalScroller" = NSComboBoxCell;
	    "-indexOfItemWithObjectValue:" = NSComboBoxCell;
	    "-indexOfSelectedItem" = NSComboBoxCell;
	    "-insertItemWithObjectValue:atIndex:" = NSComboBoxCell;
	    "-intercellSpacing" = NSComboBoxCell;
	    "-isButtonBordered" = NSComboBoxCell;
	    "-itemHeight" = NSComboBoxCell;
	    "-itemObjectValueAtIndex:" = NSComboBoxCell;
	    "-noteNumberOfItemsChanged" = NSComboBoxCell;
	    "-numberOfItems" = NSComboBoxCell;
	    "-numberOfVisibleItems" = NSComboBoxCell;
	    "-objectValueOfSelectedItem" = NSComboBoxCell;
	    "-objectValues" = NSComboBoxCell;
	    "-reloadData" = NSComboBoxCell;
	    "-removeAllItems" = NSComboBoxCell;
	    "-removeItemAtIndex:" = NSComboBoxCell;
	    "-removeItemWithObjectValue:" = NSComboBoxCell;
	    "-scrollItemAtIndexToTop:" = NSComboBoxCell;
	    "-scrollItemAtIndexToVisible:" = NSComboBoxCell;
	    "-selectItemAtIndex:" = NSComboBoxCell;
	    "-selectItemWithObjectValue:" = NSComboBoxCell;
	    "-setButtonBordered:" = NSComboBoxCell;
	    "-setCompletes:" = NSComboBoxCell;
	    "-setDataSource:" = NSComboBoxCell;
	    "-setHasVerticalScroller:" = NSComboBoxCell;
	    "-setIntercellSpacing:" = NSComboBoxCell;
	    "-setItemHeight:" = NSComboBoxCell;
	    "-setNumberOfVisibleItems:" = NSComboBoxCell;
	    "-setUsesDataSource:" = NSComboBoxCell;
	    "-trackMouse:inRect:ofView:untilMouseUp:" = NSComboBoxCell;
	    "-usesDataSource" = NSComboBoxCell;
	};
	NSControl = {
	    "+cellClass" = NSControl;
	    "+setCellClass:" = NSControl;
	    "-abortEditing" = NSControl;
	    "-action" = NSControl;
	    "-alignment" = NSControl;
	    "-attributedStringValue" = NSControl;
	    "-baseWritingDirection" = NSControl;
	    "-calcSize" = NSControl;
	    "-cell" = NSControl;
	    "-currentEditor" = NSControl;
	    "-doubleValue" = NSControl;
	    "-drawCell:" = NSControl;
	    "-drawCellInside:" = NSControl;
	    "-floatValue" = NSControl;
	    "-font" = NSControl;
	    "-formatter" = NSControl;
	    "-ignoresMultiClick" = NSControl;
	    "-intValue" = NSControl;
	    "-integerValue" = NSControl;
	    "-isContinuous" = NSControl;
	    "-isEnabled" = NSControl;
	    "-mouseDown:" = NSControl;
	    "-objectValue" = NSControl;
	    "-performClick:" = NSControl;
	    "-refusesFirstResponder" = NSControl;
	    "-selectCell:" = NSControl;
	    "-selectedCell" = NSControl;
	    "-selectedTag" = NSControl;
	    "-sendAction:to:" = NSControl;
	    "-sendActionOn:" = NSControl;
	    "-setAction:" = NSControl;
	    "-setAlignment:" = NSControl;
	    "-setAttributedStringValue:" = NSControl;
	    "-setBaseWritingDirection:" = NSControl;
	    "-setCell:" = NSControl;
	    "-setContinuous:" = NSControl;
	    "-setDoubleValue:" = NSControl;
	    "-setEnabled:" = NSControl;
	    "-setFloatValue:" = NSControl;
	    "-setFloatingPointFormat:left:right:" = NSControl;
	    "-setFont:" = NSControl;
	    "-setFormatter:" = NSControl;
	    "-setIgnoresMultiClick:" = NSControl;
	    "-setIntValue:" = NSControl;
	    "-setIntegerValue:" = NSControl;
	    "-setNeedsDisplay" = NSControl;
	    "-setObjectValue:" = NSControl;
	    "-setRefusesFirstResponder:" = NSControl;
	    "-setStringValue:" = NSControl;
	    "-setTag:" = NSControl;
	    "-setTarget:" = NSControl;
	    "-sizeThatFits:" = NSControl;
	    "-sizeToFit" = NSControl;
	    "-stringValue" = NSControl;
	    "-tag" = NSControl;
	    "-takeDoubleValueFrom:" = NSControl;
	    "-takeFloatValueFrom:" = NSControl;
	    "-takeIntValueFrom:" = NSControl;
	    "-takeIntegerValueFrom:" = NSControl;
	    "-takeObjectValueFrom:" = NSControl;
	    "-takeStringValueFrom:" = NSControl;
	    "-target" = NSControl;
	    "-updateCell:" = NSControl;
	    "-updateCellInside:" = NSControl;
	    "-validateEditing" = NSControl;
	};
	NSController = {
	    "-commitEditing" = NSController;
	    "-commitEditingWithDelegate:didCommitSelector:contextInfo:" = NSController;
	    "-discardEditing" = NSController;
	    "-isEditing" = NSController;
	    "-objectDidBeginEditing:" = NSController;
	    "-objectDidEndEditing:" = NSController;
	};
	NSCursor = {
	    "+IBeamCursor" = NSCursor;
	    "+arrowCursor" = NSCursor;
	    "+closedHandCursor" = NSCursor;
	    "+contextualMenuCursor" = NSCursor;
	    "+count" = NSCursor;
	    "+crosshairCursor" = NSCursor;
	    "+currentCursor" = NSCursor;
	    "+currentSystemCursor" = NSCursor;
	    "+disappearingItemCursor" = NSCursor;
	    "+dragCopyCursor" = NSCursor;
	    "+dragLinkCursor" = NSCursor;
	    "+greenArrowCursor" = NSCursor;
	    "+hide" = NSCursor;
	    "+isHiddenUntilMouseMoves" = NSCursor;
	    "+openHandCursor" = NSCursor;
	    "+operationNotAllowedCursor" = NSCursor;
	    "+pointingHandCursor" = NSCursor;
	    "+pop" = NSCursor;
	    "+resizeDownCursor" = NSCursor;
	    "+resizeLeftCursor" = NSCursor;
	    "+resizeLeftRightCursor" = NSCursor;
	    "+resizeRightCursor" = NSCursor;
	    "+resizeUpCursor" = NSCursor;
	    "+resizeUpDownCursor" = NSCursor;
	    "+setHiddenUntilMouseMoves:" = NSCursor;
	    "+unhide" = NSCursor;
	    "-hotSpot" = NSCursor;
	    "-image" = NSCursor;
	    "-initWithImage:" = NSCursor;
	    "-initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:" = NSCursor;
	    "-initWithImage:hotSpot:" = NSCursor;
	    "-isSetOnMouseEntered" = NSCursor;
	    "-isSetOnMouseExited" = NSCursor;
	    "-mouseEntered:" = NSCursor;
	    "-mouseExited:" = NSCursor;
	    "-pop" = NSCursor;
	    "-push" = NSCursor;
	    "-set" = NSCursor;
	    "-setHotSpot:" = NSCursor;
	    "-setImage:" = NSCursor;
	    "-setOnMouseEntered:" = NSCursor;
	    "-setOnMouseExited:" = NSCursor;
	};
	NSCustomImageRep = {
	    "-delegate" = NSCustomImageRep;
	    "-drawSelector" = NSCustomImageRep;
	    "-initWithDrawSelector:delegate:" = NSCustomImageRep;
	};
	NSDataLink = {
	    "-break" = NSDataLink;
	    "-destinationApplicationName" = NSDataLink;
	    "-destinationFilename" = NSDataLink;
	    "-destinationSelection" = NSDataLink;
	    "-disposition" = NSDataLink;
	    "-initLinkedToFile:" = NSDataLink;
	    "-initLinkedToSourceSelection:managedBy:supportingTypes:" = NSDataLink;
	    "-initWithContentsOfFile:" = NSDataLink;
	    "-initWithPasteboard:" = NSDataLink;
	    "-lastUpdateTime" = NSDataLink;
	    "-linkNumber" = NSDataLink;
	    "-manager" = NSDataLink;
	    "-noteSourceEdited" = NSDataLink;
	    "-openSource" = NSDataLink;
	    "-saveLinkIn:" = NSDataLink;
	    "-setUpdateMode:" = NSDataLink;
	    "-sourceApplicationName" = NSDataLink;
	    "-sourceFilename" = NSDataLink;
	    "-sourceSelection" = NSDataLink;
	    "-types" = NSDataLink;
	    "-updateDestination" = NSDataLink;
	    "-updateMode" = NSDataLink;
	    "-writeToFile:" = NSDataLink;
	    "-writeToPasteboard:" = NSDataLink;
	};
	NSDataLinkManager = {
	    "-addLink:at:" = NSDataLinkManager;
	    "-addLinkAsMarker:at:" = NSDataLinkManager;
	    "-addLinkPreviouslyAt:fromPasteboard:at:" = NSDataLinkManager;
	    "-areLinkOutlinesVisible" = NSDataLinkManager;
	    "-breakAllLinks" = NSDataLinkManager;
	    "-delegate" = NSDataLinkManager;
	    "-delegateVerifiesLinks" = NSDataLinkManager;
	    "-destinationLinkEnumerator" = NSDataLinkManager;
	    "-destinationLinkWithSelection:" = NSDataLinkManager;
	    "-filename" = NSDataLinkManager;
	    "-initWithDelegate:" = NSDataLinkManager;
	    "-initWithDelegate:fromFile:" = NSDataLinkManager;
	    "-interactsWithUser" = NSDataLinkManager;
	    "-isEdited" = NSDataLinkManager;
	    "-noteDocumentClosed" = NSDataLinkManager;
	    "-noteDocumentEdited" = NSDataLinkManager;
	    "-noteDocumentReverted" = NSDataLinkManager;
	    "-noteDocumentSaved" = NSDataLinkManager;
	    "-noteDocumentSavedAs:" = NSDataLinkManager;
	    "-noteDocumentSavedTo:" = NSDataLinkManager;
	    "-setDelegateVerifiesLinks:" = NSDataLinkManager;
	    "-setInteractsWithUser:" = NSDataLinkManager;
	    "-setLinkOutlinesVisible:" = NSDataLinkManager;
	    "-sourceLinkEnumerator" = NSDataLinkManager;
	    "-writeLinksToPasteboard:" = NSDataLinkManager;
	};
	NSDataLinkPanel = {
	    "+getLink:manager:isMultiple:" = NSDataLinkPanel;
	    "+setLink:manager:isMultiple:" = NSDataLinkPanel;
	    "+sharedDataLinkPanel" = NSDataLinkPanel;
	    "-accessoryView" = NSDataLinkPanel;
	    "-getLink:manager:isMultiple:" = NSDataLinkPanel;
	    "-pickedBreakAllLinks:" = NSDataLinkPanel;
	    "-pickedBreakLink:" = NSDataLinkPanel;
	    "-pickedOpenSource:" = NSDataLinkPanel;
	    "-pickedUpdateDestination:" = NSDataLinkPanel;
	    "-pickedUpdateMode:" = NSDataLinkPanel;
	    "-setAccessoryView:" = NSDataLinkPanel;
	    "-setLink:manager:isMultiple:" = NSDataLinkPanel;
	};
	NSDatePicker = {
	    "-backgroundColor" = NSDatePicker;
	    "-calendar" = NSDatePicker;
	    "-datePickerElements" = NSDatePicker;
	    "-datePickerMode" = NSDatePicker;
	    "-datePickerStyle" = NSDatePicker;
	    "-dateValue" = NSDatePicker;
	    "-delegate" = NSDatePicker;
	    "-drawsBackground" = NSDatePicker;
	    "-isBezeled" = NSDatePicker;
	    "-isBordered" = NSDatePicker;
	    "-locale" = NSDatePicker;
	    "-maxDate" = NSDatePicker;
	    "-minDate" = NSDatePicker;
	    "-setBackgroundColor:" = NSDatePicker;
	    "-setBezeled:" = NSDatePicker;
	    "-setBordered:" = NSDatePicker;
	    "-setCalendar:" = NSDatePicker;
	    "-setDatePickerElements:" = NSDatePicker;
	    "-setDatePickerMode:" = NSDatePicker;
	    "-setDatePickerStyle:" = NSDatePicker;
	    "-setDateValue:" = NSDatePicker;
	    "-setDelegate:" = NSDatePicker;
	    "-setDrawsBackground:" = NSDatePicker;
	    "-setLocale:" = NSDatePicker;
	    "-setMaxDate:" = NSDatePicker;
	    "-setMinDate:" = NSDatePicker;
	    "-setTextColor:" = NSDatePicker;
	    "-setTimeInterval:" = NSDatePicker;
	    "-setTimeZone:" = NSDatePicker;
	    "-textColor" = NSDatePicker;
	    "-timeInterval" = NSDatePicker;
	    "-timeZone" = NSDatePicker;
	};
	NSDatePickerCell = {
	    "-backgroundColor" = NSDatePickerCell;
	    "-calendar" = NSDatePickerCell;
	    "-datePickerElements" = NSDatePickerCell;
	    "-datePickerMode" = NSDatePickerCell;
	    "-datePickerStyle" = NSDatePickerCell;
	    "-dateValue" = NSDatePickerCell;
	    "-delegate" = NSDatePickerCell;
	    "-drawsBackground" = NSDatePickerCell;
	    "-locale" = NSDatePickerCell;
	    "-maxDate" = NSDatePickerCell;
	    "-minDate" = NSDatePickerCell;
	    "-setBackgroundColor:" = NSDatePickerCell;
	    "-setCalendar:" = NSDatePickerCell;
	    "-setDatePickerElements:" = NSDatePickerCell;
	    "-setDatePickerMode:" = NSDatePickerCell;
	    "-setDatePickerStyle:" = NSDatePickerCell;
	    "-setDateValue:" = NSDatePickerCell;
	    "-setDelegate:" = NSDatePickerCell;
	    "-setDrawsBackground:" = NSDatePickerCell;
	    "-setLocale:" = NSDatePickerCell;
	    "-setMaxDate:" = NSDatePickerCell;
	    "-setMinDate:" = NSDatePickerCell;
	    "-setTextColor:" = NSDatePickerCell;
	    "-setTimeInterval:" = NSDatePickerCell;
	    "-setTimeZone:" = NSDatePickerCell;
	    "-textColor" = NSDatePickerCell;
	    "-timeInterval" = NSDatePickerCell;
	    "-timeZone" = NSDatePickerCell;
	};
	NSDocument = {
	    "+isNativeType:" = NSDocument;
	    "+readableTypes" = NSDocument;
	    "+writableTypes" = NSDocument;
	    "-addWindowController:" = NSDocument;
	    "-autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:" = NSDocument;
	    "-autosavedContentsFileURL" = NSDocument;
	    "-autosavingFileType" = NSDocument;
	    "-canCloseDocument" = NSDocument;
	    "-canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:" = NSDocument;
	    "-close" = NSDocument;
	    "-dataOfType:error:" = NSDocument;
	    "-dataRepresentationOfType:" = NSDocument;
	    "-displayName" = NSDocument;
	    "-fileAttributesToWriteToFile:ofType:saveOperation:" = NSDocument;
	    "-fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:" = NSDocument;
	    "-fileModificationDate" = NSDocument;
	    "-fileName" = NSDocument;
	    "-fileNameExtensionForType:saveOperation:" = NSDocument;
	    "-fileNameExtensionWasHiddenInLastRunSavePanel" = NSDocument;
	    "-fileNameFromRunningSavePanelForSaveOperation:" = NSDocument;
	    "-fileType" = NSDocument;
	    "-fileTypeFromLastRunSavePanel" = NSDocument;
	    "-fileURL" = NSDocument;
	    "-fileWrapperOfType:error:" = NSDocument;
	    "-fileWrapperRepresentationOfType:" = NSDocument;
	    "-hasUnautosavedChanges" = NSDocument;
	    "-hasUndoManager" = NSDocument;
	    "-init" = NSDocument;
	    "-initForURL:withContentsOfURL:ofType:error:" = NSDocument;
	    "-initWithContentsOfFile:ofType:" = NSDocument;
	    "-initWithContentsOfURL:ofType:" = NSDocument;
	    "-initWithContentsOfURL:ofType:error:" = NSDocument;
	    "-initWithType:error:" = NSDocument;
	    "-isDocumentEdited" = NSDocument;
	    "-keepBackupFile" = NSDocument;
	    "-lastComponentOfFileName" = NSDocument;
	    "-loadDataRepresentation:ofType:" = NSDocument;
	    "-loadFileWrapperRepresentation:ofType:" = NSDocument;
	    "-makeWindowControllers" = NSDocument;
	    "-preparePageLayout:" = NSDocument;
	    "-prepareSavePanel:" = NSDocument;
	    "-presentError:" = NSDocument;
	    "-presentError:modalForWindow:delegate:didPresentSelector:contextInfo:" = NSDocument;
	    "-printDocument:" = NSDocument;
	    "-printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:" = NSDocument;
	    "-printInfo" = NSDocument;
	    "-printOperationWithSettings:error:" = NSDocument;
	    "-printShowingPrintPanel:" = NSDocument;
	    "-readFromData:ofType:error:" = NSDocument;
	    "-readFromFile:ofType:" = NSDocument;
	    "-readFromFileWrapper:ofType:error:" = NSDocument;
	    "-readFromURL:ofType:" = NSDocument;
	    "-readFromURL:ofType:error:" = NSDocument;
	    "-removeWindowController:" = NSDocument;
	    "-revertDocumentToSaved:" = NSDocument;
	    "-revertToContentsOfURL:ofType:error:" = NSDocument;
	    "-revertToSavedFromFile:ofType:" = NSDocument;
	    "-revertToSavedFromURL:ofType:" = NSDocument;
	    "-runModalPageLayoutWithPrintInfo:" = NSDocument;
	    "-runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:" = NSDocument;
	    "-runModalPrintOperation:delegate:didRunSelector:contextInfo:" = NSDocument;
	    "-runModalSavePanel:withAccessoryView:" = NSDocument;
	    "-runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:" = NSDocument;
	    "-runPageLayout:" = NSDocument;
	    "-saveDocument:" = NSDocument;
	    "-saveDocumentAs:" = NSDocument;
	    "-saveDocumentTo:" = NSDocument;
	    "-saveDocumentWithDelegate:didSaveSelector:contextInfo:" = NSDocument;
	    "-saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:" = NSDocument;
	    "-saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:" = NSDocument;
	    "-saveToURL:ofType:forSaveOperation:error:" = NSDocument;
	    "-setAutosavedContentsFileURL:" = NSDocument;
	    "-setFileModificationDate:" = NSDocument;
	    "-setFileName:" = NSDocument;
	    "-setFileType:" = NSDocument;
	    "-setFileURL:" = NSDocument;
	    "-setHasUndoManager:" = NSDocument;
	    "-setLastComponentOfFileName:" = NSDocument;
	    "-setPrintInfo:" = NSDocument;
	    "-setUndoManager:" = NSDocument;
	    "-setWindow:" = NSDocument;
	    "-shouldChangePrintInfo:" = NSDocument;
	    "-shouldCloseWindowController:" = NSDocument;
	    "-shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:" = NSDocument;
	    "-shouldRunSavePanelWithAccessoryView" = NSDocument;
	    "-showWindows" = NSDocument;
	    "-undoManager" = NSDocument;
	    "-updateChangeCount:" = NSDocument;
	    "-validateMenuItem:" = NSDocument;
	    "-validateUserInterfaceItem:" = NSDocument;
	    "-willPresentError:" = NSDocument;
	    "-windowControllerDidLoadNib:" = NSDocument;
	    "-windowControllerWillLoadNib:" = NSDocument;
	    "-windowControllers" = NSDocument;
	    "-windowForSheet" = NSDocument;
	    "-windowNibName" = NSDocument;
	    "-writableTypesForSaveOperation:" = NSDocument;
	    "-writeSafelyToURL:ofType:forSaveOperation:error:" = NSDocument;
	    "-writeToFile:ofType:" = NSDocument;
	    "-writeToFile:ofType:originalFile:saveOperation:" = NSDocument;
	    "-writeToURL:ofType:" = NSDocument;
	    "-writeToURL:ofType:error:" = NSDocument;
	    "-writeToURL:ofType:forSaveOperation:originalContentsURL:error:" = NSDocument;
	    "-writeWithBackupToFile:ofType:saveOperation:" = NSDocument;
	};
	NSDocumentController = {
	    "+sharedDocumentController" = NSDocumentController;
	    "-URLsFromRunningOpenPanel" = NSDocumentController;
	    "-addDocument:" = NSDocumentController;
	    "-autosavingDelay" = NSDocumentController;
	    "-beginOpenPanel:forTypes:completionHandler:" = NSDocumentController;
	    "-beginOpenPanelWithCompletionHandler:" = NSDocumentController;
	    "-clearRecentDocuments:" = NSDocumentController;
	    "-closeAllDocuments" = NSDocumentController;
	    "-closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:" = NSDocumentController;
	    "-currentDirectory" = NSDocumentController;
	    "-currentDocument" = NSDocumentController;
	    "-defaultType" = NSDocumentController;
	    "-displayNameForType:" = NSDocumentController;
	    "-documentClassForType:" = NSDocumentController;
	    "-documentClassNames" = NSDocumentController;
	    "-documentForFileName:" = NSDocumentController;
	    "-documentForURL:" = NSDocumentController;
	    "-documentForWindow:" = NSDocumentController;
	    "-documents" = NSDocumentController;
	    "-duplicateDocumentWithContentsOfURL:copying:displayName:error:" = NSDocumentController;
	    "-fileExtensionsFromType:" = NSDocumentController;
	    "-fileNamesFromRunningOpenPanel" = NSDocumentController;
	    "-hasEditedDocuments" = NSDocumentController;
	    "-makeDocumentForURL:withContentsOfURL:ofType:error:" = NSDocumentController;
	    "-makeDocumentWithContentsOfFile:ofType:" = NSDocumentController;
	    "-makeDocumentWithContentsOfURL:ofType:" = NSDocumentController;
	    "-makeDocumentWithContentsOfURL:ofType:error:" = NSDocumentController;
	    "-makeUntitledDocumentOfType:" = NSDocumentController;
	    "-makeUntitledDocumentOfType:error:" = NSDocumentController;
	    "-maximumRecentDocumentCount" = NSDocumentController;
	    "-newDocument:" = NSDocumentController;
	    "-noteNewRecentDocument:" = NSDocumentController;
	    "-noteNewRecentDocumentURL:" = NSDocumentController;
	    "-openDocument:" = NSDocumentController;
	    "-openDocumentWithContentsOfFile:display:" = NSDocumentController;
	    "-openDocumentWithContentsOfURL:display:" = NSDocumentController;
	    "-openDocumentWithContentsOfURL:display:completionHandler:" = NSDocumentController;
	    "-openDocumentWithContentsOfURL:display:error:" = NSDocumentController;
	    "-openUntitledDocumentAndDisplay:error:" = NSDocumentController;
	    "-openUntitledDocumentOfType:display:" = NSDocumentController;
	    "-presentError:" = NSDocumentController;
	    "-presentError:modalForWindow:delegate:didPresentSelector:contextInfo:" = NSDocumentController;
	    "-recentDocumentURLs" = NSDocumentController;
	    "-removeDocument:" = NSDocumentController;
	    "-reopenDocumentForURL:withContentsOfURL:display:completionHandler:" = NSDocumentController;
	    "-reopenDocumentForURL:withContentsOfURL:error:" = NSDocumentController;
	    "-reviewUnsavedDocumentsWithAlertTitle:cancellable:" = NSDocumentController;
	    "-reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:" = NSDocumentController;
	    "-runModalOpenPanel:forTypes:" = NSDocumentController;
	    "-saveAllDocuments:" = NSDocumentController;
	    "-setAutosavingDelay:" = NSDocumentController;
	    "-setShouldCreateUI:" = NSDocumentController;
	    "-shouldCreateUI" = NSDocumentController;
	    "-typeForContentsOfURL:error:" = NSDocumentController;
	    "-typeFromFileExtension:" = NSDocumentController;
	    "-validateMenuItem:" = NSDocumentController;
	    "-validateUserInterfaceItem:" = NSDocumentController;
	    "-willPresentError:" = NSDocumentController;
	};
	NSDrawer = {
	    "-close" = NSDrawer;
	    "-close:" = NSDrawer;
	    "-contentSize" = NSDrawer;
	    "-contentView" = NSDrawer;
	    "-delegate" = NSDrawer;
	    "-edge" = NSDrawer;
	    "-initWithContentSize:preferredEdge:" = NSDrawer;
	    "-leadingOffset" = NSDrawer;
	    "-maxContentSize" = NSDrawer;
	    "-minContentSize" = NSDrawer;
	    "-open" = NSDrawer;
	    "-open:" = NSDrawer;
	    "-openOnEdge:" = NSDrawer;
	    "-parentWindow" = NSDrawer;
	    "-preferredEdge" = NSDrawer;
	    "-setContentSize:" = NSDrawer;
	    "-setContentView:" = NSDrawer;
	    "-setDelegate:" = NSDrawer;
	    "-setLeadingOffset:" = NSDrawer;
	    "-setMaxContentSize:" = NSDrawer;
	    "-setMinContentSize:" = NSDrawer;
	    "-setParentWindow:" = NSDrawer;
	    "-setPreferredEdge:" = NSDrawer;
	    "-setTrailingOffset:" = NSDrawer;
	    "-state" = NSDrawer;
	    "-toggle:" = NSDrawer;
	    "-trailingOffset" = NSDrawer;
	};
	NSDrawerDelegate = {
	    "-drawerDidClose:" = NSDrawer;
	    "-drawerDidOpen:" = NSDrawer;
	    "-drawerShouldClose:" = NSDrawer;
	    "-drawerShouldOpen:" = NSDrawer;
	    "-drawerWillClose:" = NSDrawer;
	    "-drawerWillOpen:" = NSDrawer;
	    "-drawerWillResizeContents:toSize:" = NSDrawer;
	};
	NSEPSImageRep = {
	    "+imageRepWithData:" = NSEPSImageRep;
	    "-EPSRepresentation" = NSEPSImageRep;
	    "-boundingBox" = NSEPSImageRep;
	    "-initWithData:" = NSEPSImageRep;
	    "-prepareGState" = NSEPSImageRep;
	};
	NSEvent = {
	    "+doubleClickInterval" = NSEvent;
	    "+enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:" = NSEvent;
	    "+eventWithEventRef:" = NSEvent;
	    "+isMouseCoalescingEnabled" = NSEvent;
	    "+keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:" = NSEvent;
	    "+keyRepeatDelay" = NSEvent;
	    "+keyRepeatInterval" = NSEvent;
	    "+modifierFlags" = NSEvent;
	    "+mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:" = NSEvent;
	    "+mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:buttonNumber:deltaX:deltaY:deltaZ:" = NSEvent;
	    "+mouseLocation" = NSEvent;
	    "+otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:" = NSEvent;
	    "+pressedMouseButtons" = NSEvent;
	    "+setMouseCoalescingEnabled:" = NSEvent;
	    "+startPeriodicEventsAfterDelay:withPeriod:" = NSEvent;
	    "+stopPeriodicEvents" = NSEvent;
	    "-absoluteX" = NSEvent;
	    "-absoluteY" = NSEvent;
	    "-absoluteZ" = NSEvent;
	    "-associatedEventsMask" = NSEvent;
	    "-buttonMask" = NSEvent;
	    "-buttonNumber" = NSEvent;
	    "-capabilityMask" = NSEvent;
	    "-characters" = NSEvent;
	    "-charactersIgnoringModifiers" = NSEvent;
	    "-clickCount" = NSEvent;
	    "-context" = NSEvent;
	    "-data1" = NSEvent;
	    "-data2" = NSEvent;
	    "-deltaX" = NSEvent;
	    "-deltaY" = NSEvent;
	    "-deltaZ" = NSEvent;
	    "-deviceID" = NSEvent;
	    "-eventNumber" = NSEvent;
	    "-eventRef" = NSEvent;
	    "-isARepeat" = NSEvent;
	    "-isEnteringProximity" = NSEvent;
	    "-keyCode" = NSEvent;
	    "-locationInWindow" = NSEvent;
	    "-modifierFlags" = NSEvent;
	    "-momentumPhase" = NSEvent;
	    "-phase" = NSEvent;
	    "-pointingDeviceID" = NSEvent;
	    "-pointingDeviceSerialNumber" = NSEvent;
	    "-pointingDeviceType" = NSEvent;
	    "-pressure" = NSEvent;
	    "-rotation" = NSEvent;
	    "-subtype" = NSEvent;
	    "-systemTabletID" = NSEvent;
	    "-tabletID" = NSEvent;
	    "-tangentialPressure" = NSEvent;
	    "-tilt" = NSEvent;
	    "-timestamp" = NSEvent;
	    "-trackingNumber" = NSEvent;
	    "-type" = NSEvent;
	    "-uniqueID" = NSEvent;
	    "-userData" = NSEvent;
	    "-vendorDefined" = NSEvent;
	    "-vendorID" = NSEvent;
	    "-vendorPointingDeviceType" = NSEvent;
	    "-window" = NSEvent;
	    "-windowNumber" = NSEvent;
	};
	"NSFileWrapper(NSExtensions)" = {
	    "-icon" = NSFileWrapperExtensions;
	    "-setIcon:" = NSFileWrapperExtensions;
	};
	NSFont = {
	    "+boldSystemFontOfSize:" = NSFont;
	    "+controlContentFontOfSize:" = NSFont;
	    "+fontWithDescriptor:size:" = NSFont;
	    "+fontWithDescriptor:size:textTransform:" = NSFont;
	    "+fontWithDescriptor:textTransform:" = NSFont;
	    "+fontWithName:matrix:" = NSFont;
	    "+fontWithName:size:" = NSFont;
	    "+labelFontOfSize:" = NSFont;
	    "+labelFontSize" = NSFont;
	    "+menuBarFontOfSize:" = NSFont;
	    "+menuFontOfSize:" = NSFont;
	    "+messageFontOfSize:" = NSFont;
	    "+paletteFontOfSize:" = NSFont;
	    "+preferredFontNames" = NSFont;
	    "+setPreferredFontNames:" = NSFont;
	    "+setUserFixedPitchFont:" = NSFont;
	    "+setUserFont:" = NSFont;
	    "+smallSystemFontSize" = NSFont;
	    "+systemFontOfSize:" = NSFont;
	    "+systemFontSize" = NSFont;
	    "+systemFontSizeForControlSize:" = NSFont;
	    "+titleBarFontOfSize:" = NSFont;
	    "+toolTipsFontOfSize:" = NSFont;
	    "+useFont:" = NSFont;
	    "+userFixedPitchFontOfSize:" = NSFont;
	    "+userFontOfSize:" = NSFont;
	    "-advancementForGlyph:" = NSFont;
	    "-afmDictionary" = NSFont;
	    "-afmFileContents" = NSFont;
	    "-ascender" = NSFont;
	    "-boundingRectForFont" = NSFont;
	    "-boundingRectForGlyph:" = NSFont;
	    "-capHeight" = NSFont;
	    "-coveredCharacterSet" = NSFont;
	    "-defaultLineHeightForFont" = NSFont;
	    "-descender" = NSFont;
	    "-displayName" = NSFont;
	    "-encodingScheme" = NSFont;
	    "-familyName" = NSFont;
	    "-fontDescriptor" = NSFont;
	    "-fontName" = NSFont;
	    "-getAdvancements:forGlyphs:count:" = NSFont;
	    "-getAdvancements:forPackedGlyphs:count:" = NSFont;
	    "-getBoundingRects:forGlyphs:count:" = NSFont;
	    "-glyphIsEncoded:" = NSFont;
	    "-glyphPacking" = NSFont;
	    "-glyphWithName:" = NSFont;
	    "-isBaseFont" = NSFont;
	    "-isFixedPitch" = NSFont;
	    "-italicAngle" = NSFont;
	    "-leading" = NSFont;
	    "-matrix" = NSFont;
	    "-maximumAdvancement" = NSFont;
	    "-minimumAdvancement" = NSFont;
	    "-mostCompatibleStringEncoding" = NSFont;
	    "-numberOfGlyphs" = NSFont;
	    "-pointSize" = NSFont;
	    "-positionOfGlyph:forCharacter:struckOverRect:" = NSFont;
	    "-positionOfGlyph:precededByGlyph:isNominal:" = NSFont;
	    "-positionOfGlyph:struckOverGlyph:metricsExist:" = NSFont;
	    "-positionOfGlyph:struckOverRect:metricsExist:" = NSFont;
	    "-positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:" = NSFont;
	    "-positionsForCompositeSequence:numberOfGlyphs:pointArray:" = NSFont;
	    "-printerFont" = NSFont;
	    "-renderingMode" = NSFont;
	    "-screenFont" = NSFont;
	    "-screenFontWithRenderingMode:" = NSFont;
	    "-set" = NSFont;
	    "-setInContext:" = NSFont;
	    "-textTransform" = NSFont;
	    "-underlinePosition" = NSFont;
	    "-underlineThickness" = NSFont;
	    "-widthOfString:" = NSFont;
	    "-xHeight" = NSFont;
	};
	"NSFont(GNUstep)" = {
	    "-fontInfo" = NSFont;
	    "-fontRef" = NSFont;
	};
	NSFontDescriptor = {
	    "+fontDescriptorWithFontAttributes:" = NSFontDescriptor;
	    "+fontDescriptorWithName:matrix:" = NSFontDescriptor;
	    "+fontDescriptorWithName:size:" = NSFontDescriptor;
	    "-fontAttributes" = NSFontDescriptor;
	    "-fontDescriptorByAddingAttributes:" = NSFontDescriptor;
	    "-fontDescriptorWithFace:" = NSFontDescriptor;
	    "-fontDescriptorWithFamily:" = NSFontDescriptor;
	    "-fontDescriptorWithMatrix:" = NSFontDescriptor;
	    "-fontDescriptorWithSize:" = NSFontDescriptor;
	    "-fontDescriptorWithSymbolicTraits:" = NSFontDescriptor;
	    "-initWithFontAttributes:" = NSFontDescriptor;
	    "-matchingFontDescriptorWithMandatoryKeys:" = NSFontDescriptor;
	    "-matchingFontDescriptorsWithMandatoryKeys:" = NSFontDescriptor;
	    "-matrix" = NSFontDescriptor;
	    "-objectForKey:" = NSFontDescriptor;
	    "-pointSize" = NSFontDescriptor;
	    "-postscriptName" = NSFontDescriptor;
	    "-symbolicTraits" = NSFontDescriptor;
	};
	NSFontManager = {
	    "+setFontManagerFactory:" = NSFontManager;
	    "+setFontPanelFactory:" = NSFontManager;
	    "+sharedFontManager" = NSFontManager;
	    "-action" = NSFontManager;
	    "-addCollection:options:" = NSFontManager;
	    "-addFontDescriptors:toCollection:" = NSFontManager;
	    "-addFontTrait:" = NSFontManager;
	    "-availableFontFamilies" = NSFontManager;
	    "-availableFontNamesMatchingFontDescriptor:" = NSFontManager;
	    "-availableFontNamesWithTraits:" = NSFontManager;
	    "-availableFonts" = NSFontManager;
	    "-availableMembersOfFontFamily:" = NSFontManager;
	    "-collectionNames" = NSFontManager;
	    "-convertAttributes:" = NSFontManager;
	    "-convertFont:" = NSFontManager;
	    "-convertFont:toFace:" = NSFontManager;
	    "-convertFont:toFamily:" = NSFontManager;
	    "-convertFont:toHaveTrait:" = NSFontManager;
	    "-convertFont:toNotHaveTrait:" = NSFontManager;
	    "-convertFont:toSize:" = NSFontManager;
	    "-convertWeight:ofFont:" = NSFontManager;
	    "-delegate" = NSFontManager;
	    "-fontDescriptorsInCollection:" = NSFontManager;
	    "-fontMenu:" = NSFontManager;
	    "-fontNamed:hasTraits:" = NSFontManager;
	    "-fontPanel:" = NSFontManager;
	    "-fontWithFamily:traits:weight:size:" = NSFontManager;
	    "-isEnabled" = NSFontManager;
	    "-isMultiple" = NSFontManager;
	    "-localizedNameForFamily:face:" = NSFontManager;
	    "-modifyFont:" = NSFontManager;
	    "-modifyFontViaPanel:" = NSFontManager;
	    "-orderFrontFontPanel:" = NSFontManager;
	    "-removeCollection:" = NSFontManager;
	    "-removeFontDescriptor:fromCollection:" = NSFontManager;
	    "-removeFontTrait:" = NSFontManager;
	    "-selectedFont" = NSFontManager;
	    "-sendAction" = NSFontManager;
	    "-setAction:" = NSFontManager;
	    "-setDelegate:" = NSFontManager;
	    "-setEnabled:" = NSFontManager;
	    "-setFontMenu:" = NSFontManager;
	    "-setSelectedAttributes:isMultiple:" = NSFontManager;
	    "-setSelectedFont:isMultiple:" = NSFontManager;
	    "-traitsOfFont:" = NSFontManager;
	    "-weightOfFont:" = NSFontManager;
	};
	NSFontPanel = {
	    "+sharedFontPanel" = NSFontPanel;
	    "+sharedFontPanelExists" = NSFontPanel;
	    "-accessoryView" = NSFontPanel;
	    "-isEnabled" = NSFontPanel;
	    "-panelConvertFont:" = NSFontPanel;
	    "-reloadDefaultFontFamilies" = NSFontPanel;
	    "-setAccessoryView:" = NSFontPanel;
	    "-setEnabled:" = NSFontPanel;
	    "-setPanelFont:isMultiple:" = NSFontPanel;
	    "-worksWhenModal" = NSFontPanel;
	};
	NSForm = {
	    "-_setTitleWidthNeedsUpdate:" = NSForm;
	    "-addEntry:" = NSForm;
	    "-cellAtIndex:" = NSForm;
	    "-drawCellAtIndex:" = NSForm;
	    "-indexOfCellWithTag:" = NSForm;
	    "-indexOfSelectedItem" = NSForm;
	    "-insertEntry:atIndex:" = NSForm;
	    "-removeEntryAtIndex:" = NSForm;
	    "-selectTextAtIndex:" = NSForm;
	    "-setBezeled:" = NSForm;
	    "-setBordered:" = NSForm;
	    "-setEntryWidth:" = NSForm;
	    "-setInterlineSpacing:" = NSForm;
	    "-setTextAlignment:" = NSForm;
	    "-setTextBaseWritingDirection:" = NSForm;
	    "-setTextFont:" = NSForm;
	    "-setTitleAlignment:" = NSForm;
	    "-setTitleBaseWritingDirection:" = NSForm;
	    "-setTitleFont:" = NSForm;
	};
	NSFormCell = {
	    "-attributedTitle" = NSFormCell;
	    "-placeholderAttributedString" = NSFormCell;
	    "-placeholderString" = NSFormCell;
	    "-setAttributedTitle:" = NSFormCell;
	    "-setPlaceholderAttributedString:" = NSFormCell;
	    "-setPlaceholderString:" = NSFormCell;
	    "-setTitle:" = NSFormCell;
	    "-setTitleAlignment:" = NSFormCell;
	    "-setTitleBaseWritingDirection:" = NSFormCell;
	    "-setTitleFont:" = NSFormCell;
	    "-setTitleWidth:" = NSFormCell;
	    "-setTitleWithMnemonic:" = NSFormCell;
	    "-title" = NSFormCell;
	    "-titleAlignment" = NSFormCell;
	    "-titleBaseWritingDirection" = NSFormCell;
	    "-titleFont" = NSFormCell;
	    "-titleWidth" = NSFormCell;
	    "-titleWidth:" = NSFormCell;
	};
	NSGraphicsContext = {
	    "+currentContext" = NSGraphicsContext;
	    "+currentContextDrawingToScreen" = NSGraphicsContext;
	    "+graphicsContextWithAttributes:" = NSGraphicsContext;
	    "+graphicsContextWithBitmapImageRep:" = NSGraphicsContext;
	    "+graphicsContextWithCGContext:flipped:" = NSGraphicsContext;
	    "+graphicsContextWithGraphicsPort:flipped:" = NSGraphicsContext;
	    "+graphicsContextWithWindow:" = NSGraphicsContext;
	    "+restoreGraphicsState" = NSGraphicsContext;
	    "+saveGraphicsState" = NSGraphicsContext;
	    "+setCurrentContext:" = NSGraphicsContext;
	    "+setGraphicsState:" = NSGraphicsContext;
	    "-CGContext" = NSGraphicsContext;
	    "-attributes" = NSGraphicsContext;
	    "-compositingOperation" = NSGraphicsContext;
	    "-flushGraphics" = NSGraphicsContext;
	    "-focusStack" = NSGraphicsContext;
	    "-graphicsPort" = NSGraphicsContext;
	    "-imageInterpolation" = NSGraphicsContext;
	    "-isDrawingToScreen" = NSGraphicsContext;
	    "-isFlipped" = NSGraphicsContext;
	    "-methods" = NSGraphicsContext;
	    "-patternPhase" = NSGraphicsContext;
	    "-restoreGraphicsState" = NSGraphicsContext;
	    "-saveGraphicsState" = NSGraphicsContext;
	    "-setCompositingOperation:" = NSGraphicsContext;
	    "-setFocusStack:" = NSGraphicsContext;
	    "-setImageInterpolation:" = NSGraphicsContext;
	    "-setPatternPhase:" = NSGraphicsContext;
	    "-setShouldAntialias:" = NSGraphicsContext;
	    "-shouldAntialias" = NSGraphicsContext;
	};
	"NSGraphicsContext(GNUstep)" = {
	    "+handleExposeRect:forDriver:" = NSGraphicsContext;
	    "+setDefaultContextClass:" = NSGraphicsContext;
	    "-focusView" = NSGraphicsContext;
	    "-initWithContextInfo:" = NSGraphicsContext;
	    "-initWithGraphicsPort:flipped:" = NSGraphicsContext;
	    "-lockFocusView:inRect:" = NSGraphicsContext;
	    "-resetUsedFonts" = NSGraphicsContext;
	    "-setShadow:" = NSGraphicsContext;
	    "-shadow" = NSGraphicsContext;
	    "-unlockFocusView:needsFlush:" = NSGraphicsContext;
	    "-useFont:" = NSGraphicsContext;
	    "-usedFonts" = NSGraphicsContext;
	};
	"NSGraphicsContext(NSGradient)" = {
	    "-drawGradient:fromCenter:radius:toCenter:radius:options:" = NSGraphicsContext;
	    "-drawGradient:fromPoint:toPoint:options:" = NSGraphicsContext;
	};
	"NSGraphicsContext(NSGraphics)" = {
	    "-GSReadRect:" = NSGraphicsContext;
	    "-GSWSetViewIsFlipped:" = NSGraphicsContext;
	    "-GSWViewIsFlipped" = NSGraphicsContext;
	    "-NSBeep" = NSGraphicsContext;
	    "-NSDrawBitmap:::::::::::" = NSGraphicsContext;
	};
	"NSGraphicsContext(Ops)" = {
	    "-DPSPrintf::" = NSGraphicsContext;
	    "-DPSWriteData::" = NSGraphicsContext;
	    "-DPSarc:::::" = NSGraphicsContext;
	    "-DPSarcn:::::" = NSGraphicsContext;
	    "-DPSarct:::::" = NSGraphicsContext;
	    "-DPSashow:::" = NSGraphicsContext;
	    "-DPSawidthshow::::::" = NSGraphicsContext;
	    "-DPScharpath::" = NSGraphicsContext;
	    "-DPSclip" = NSGraphicsContext;
	    "-DPSclosepath" = NSGraphicsContext;
	    "-DPScomposite::::::::" = NSGraphicsContext;
	    "-DPScompositerect:::::" = NSGraphicsContext;
	    "-DPSconcat:" = NSGraphicsContext;
	    "-DPScurrentalpha:" = NSGraphicsContext;
	    "-DPScurrentcmykcolor::::" = NSGraphicsContext;
	    "-DPScurrentflat:" = NSGraphicsContext;
	    "-DPScurrentgray:" = NSGraphicsContext;
	    "-DPScurrenthsbcolor:::" = NSGraphicsContext;
	    "-DPScurrentlinecap:" = NSGraphicsContext;
	    "-DPScurrentlinejoin:" = NSGraphicsContext;
	    "-DPScurrentlinewidth:" = NSGraphicsContext;
	    "-DPScurrentmiterlimit:" = NSGraphicsContext;
	    "-DPScurrentoffset::" = NSGraphicsContext;
	    "-DPScurrentpoint::" = NSGraphicsContext;
	    "-DPScurrentrgbcolor:::" = NSGraphicsContext;
	    "-DPScurrentstrokeadjust:" = NSGraphicsContext;
	    "-DPScurveto::::::" = NSGraphicsContext;
	    "-DPSdissolve::::::::" = NSGraphicsContext;
	    "-DPSeoclip" = NSGraphicsContext;
	    "-DPSeofill" = NSGraphicsContext;
	    "-DPSfill" = NSGraphicsContext;
	    "-DPSflattenpath" = NSGraphicsContext;
	    "-DPSgrestore" = NSGraphicsContext;
	    "-DPSgsave" = NSGraphicsContext;
	    "-DPSinitclip" = NSGraphicsContext;
	    "-DPSinitgraphics" = NSGraphicsContext;
	    "-DPSinitmatrix" = NSGraphicsContext;
	    "-DPSlineto::" = NSGraphicsContext;
	    "-DPSmoveto::" = NSGraphicsContext;
	    "-DPSnewpath" = NSGraphicsContext;
	    "-DPSpathbbox::::" = NSGraphicsContext;
	    "-DPSrcurveto::::::" = NSGraphicsContext;
	    "-DPSrectclip::::" = NSGraphicsContext;
	    "-DPSrectfill::::" = NSGraphicsContext;
	    "-DPSrectstroke::::" = NSGraphicsContext;
	    "-DPSreversepath" = NSGraphicsContext;
	    "-DPSrlineto::" = NSGraphicsContext;
	    "-DPSrmoveto::" = NSGraphicsContext;
	    "-DPSrotate:" = NSGraphicsContext;
	    "-DPSscale::" = NSGraphicsContext;
	    "-DPSsetalpha:" = NSGraphicsContext;
	    "-DPSsetcmykcolor::::" = NSGraphicsContext;
	    "-DPSsetdash:::" = NSGraphicsContext;
	    "-DPSsetflat:" = NSGraphicsContext;
	    "-DPSsetgray:" = NSGraphicsContext;
	    "-DPSsetgstate:" = NSGraphicsContext;
	    "-DPSsethalftonephase::" = NSGraphicsContext;
	    "-DPSsethsbcolor:::" = NSGraphicsContext;
	    "-DPSsetlinecap:" = NSGraphicsContext;
	    "-DPSsetlinejoin:" = NSGraphicsContext;
	    "-DPSsetlinewidth:" = NSGraphicsContext;
	    "-DPSsetmiterlimit:" = NSGraphicsContext;
	    "-DPSsetoffset::" = NSGraphicsContext;
	    "-DPSsetrgbcolor:::" = NSGraphicsContext;
	    "-DPSsetstrokeadjust:" = NSGraphicsContext;
	    "-DPSshfill:" = NSGraphicsContext;
	    "-DPSshow:" = NSGraphicsContext;
	    "-DPSstroke" = NSGraphicsContext;
	    "-DPStranslate::" = NSGraphicsContext;
	    "-DPSwidthshow::::" = NSGraphicsContext;
	    "-DPSxshow:::" = NSGraphicsContext;
	    "-DPSxyshow:::" = NSGraphicsContext;
	    "-DPSyshow:::" = NSGraphicsContext;
	    "-GSConcatCTM:" = NSGraphicsContext;
	    "-GSCurrentCTM" = NSGraphicsContext;
	    "-GSCurrentDevice:::" = NSGraphicsContext;
	    "-GSDefineGState" = NSGraphicsContext;
	    "-GSDrawImage::" = NSGraphicsContext;
	    "-GSGetTextCTM" = NSGraphicsContext;
	    "-GSGetTextPosition" = NSGraphicsContext;
	    "-GSRectClipList::" = NSGraphicsContext;
	    "-GSRectFillList::" = NSGraphicsContext;
	    "-GSReplaceGState:" = NSGraphicsContext;
	    "-GSSendBezierPath:" = NSGraphicsContext;
	    "-GSSetCTM:" = NSGraphicsContext;
	    "-GSSetCharacterSpacing:" = NSGraphicsContext;
	    "-GSSetDevice:::" = NSGraphicsContext;
	    "-GSSetFillColor:" = NSGraphicsContext;
	    "-GSSetFillColorspace:" = NSGraphicsContext;
	    "-GSSetFont:" = NSGraphicsContext;
	    "-GSSetFontSize:" = NSGraphicsContext;
	    "-GSSetPatterColor:" = NSGraphicsContext;
	    "-GSSetStrokeColor:" = NSGraphicsContext;
	    "-GSSetStrokeColorspace:" = NSGraphicsContext;
	    "-GSSetTextCTM:" = NSGraphicsContext;
	    "-GSSetTextDrawingMode:" = NSGraphicsContext;
	    "-GSSetTextPosition:" = NSGraphicsContext;
	    "-GSShowGlyphs::" = NSGraphicsContext;
	    "-GSShowGlyphsWithAdvances:::" = NSGraphicsContext;
	    "-GSShowText::" = NSGraphicsContext;
	    "-GSUndefineGState:" = NSGraphicsContext;
	    "-GScomposite:toPoint:fromRect:operation:fraction:" = NSGraphicsContext;
	    "-GSdraw:toPoint:fromRect:operation:fraction:" = NSGraphicsContext;
	    "-appendBezierPathWithPackedGlyphs:path:" = NSGraphicsContext;
	    "-supportsDrawGState" = NSGraphicsContext;
	};
	"NSGraphicsContext(Printing)" = {
	    "-beginPage:label:bBox:fonts:" = NSGraphicsContext;
	    "-beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:" = NSGraphicsContext;
	    "-beginSetup" = NSGraphicsContext;
	    "-beginTrailer" = NSGraphicsContext;
	    "-endDocumentPages:documentFonts:" = NSGraphicsContext;
	    "-endHeaderComments" = NSGraphicsContext;
	    "-endPageSetup" = NSGraphicsContext;
	    "-endPrologue" = NSGraphicsContext;
	    "-endSetup" = NSGraphicsContext;
	    "-endSheet" = NSGraphicsContext;
	    "-endTrailer" = NSGraphicsContext;
	    "-printerProlog" = NSGraphicsContext;
	    "-showPage" = NSGraphicsContext;
	};
	NSHelpManager = {
	    "+isContextHelpModeActive" = NSHelpManager;
	    "+setContextHelpModeActive:" = NSHelpManager;
	    "+sharedHelpManager" = NSHelpManager;
	    "-contextHelpForObject:" = NSHelpManager;
	    "-removeContextHelpForObject:" = NSHelpManager;
	    "-setContextHelp:forObject:" = NSHelpManager;
	    "-setContextHelp:withObject:" = NSHelpManager;
	    "-showContextHelpForObject:locationHint:" = NSHelpManager;
	};
	NSHelpPanel = {
	    "+attachHelpFile:markerName:to:" = NSHelpPanel;
	    "+detachHelpFrom:" = NSHelpPanel;
	    "+setHelpDirectory:" = NSHelpPanel;
	    "+sharedHelpPanel" = NSHelpPanel;
	    "+sharedHelpPanelWithDirectory:" = NSHelpPanel;
	    "-addSupplement:inPath:" = NSHelpPanel;
	    "-helpDirectory" = NSHelpPanel;
	    "-helpFile" = NSHelpPanel;
	    "-print:" = NSHelpPanel;
	    "-showFile:atMarker:" = NSHelpPanel;
	    "-showHelpAttachedTo:" = NSHelpPanel;
	};
	NSImage = {
	    "+_standardImageWithName:" = NSImage;
	    "+canInitWithPasteboard:" = NSImage;
	    "+imageFileTypes" = NSImage;
	    "+imageNamed:" = NSImage;
	    "+imagePasteboardTypes" = NSImage;
	    "+imageUnfilteredFileTypes" = NSImage;
	    "+imageUnfilteredPasteboardTypes" = NSImage;
	    "-TIFFRepresentation" = NSImage;
	    "-TIFFRepresentationUsingCompression:factor:" = NSImage;
	    "-addRepresentation:" = NSImage;
	    "-addRepresentations:" = NSImage;
	    "-backgroundColor" = NSImage;
	    "-bestRepresentationForDevice:" = NSImage;
	    "-bestRepresentationForRect:context:hints:" = NSImage;
	    "-cacheDepthMatchesImageDepth" = NSImage;
	    "-cacheMode" = NSImage;
	    "-compositeToPoint:fromRect:operation:" = NSImage;
	    "-compositeToPoint:fromRect:operation:fraction:" = NSImage;
	    "-compositeToPoint:operation:" = NSImage;
	    "-compositeToPoint:operation:fraction:" = NSImage;
	    "-delegate" = NSImage;
	    "-dissolveToPoint:fraction:" = NSImage;
	    "-dissolveToPoint:fromRect:fraction:" = NSImage;
	    "-drawAtPoint:fromRect:operation:fraction:" = NSImage;
	    "-drawInRect:" = NSImage;
	    "-drawInRect:fromRect:operation:fraction:" = NSImage;
	    "-drawInRect:fromRect:operation:fraction:respectFlipped:hints:" = NSImage;
	    "-drawRepresentation:inRect:" = NSImage;
	    "-initByReferencingFile:" = NSImage;
	    "-initWithBitmapHandle:" = NSImage;
	    "-initWithContentsOfFile:" = NSImage;
	    "-initWithContentsOfURL:" = NSImage;
	    "-initWithData:" = NSImage;
	    "-initWithIconHandle:" = NSImage;
	    "-initWithPasteboard:" = NSImage;
	    "-initWithSize:" = NSImage;
	    "-isCachedSeparately" = NSImage;
	    "-isDataRetained" = NSImage;
	    "-isFlipped" = NSImage;
	    "-isValid" = NSImage;
	    "-lockFocus" = NSImage;
	    "-lockFocusOnRepresentation:" = NSImage;
	    "-matchesOnMultipleResolution" = NSImage;
	    "-name" = NSImage;
	    "-prefersColorMatch" = NSImage;
	    "-recache" = NSImage;
	    "-removeRepresentation:" = NSImage;
	    "-representations" = NSImage;
	    "-scalesWhenResized" = NSImage;
	    "-setBackgroundColor:" = NSImage;
	    "-setCacheDepthMatchesImageDepth:" = NSImage;
	    "-setCacheMode:" = NSImage;
	    "-setCachedSeparately:" = NSImage;
	    "-setDataRetained:" = NSImage;
	    "-setDelegate:" = NSImage;
	    "-setFlipped:" = NSImage;
	    "-setMatchesOnMultipleResolution:" = NSImage;
	    "-setName:" = NSImage;
	    "-setPrefersColorMatch:" = NSImage;
	    "-setScalesWhenResized:" = NSImage;
	    "-setSize:" = NSImage;
	    "-setUsesEPSOnResolutionMismatch:" = NSImage;
	    "-size" = NSImage;
	    "-unlockFocus" = NSImage;
	    "-usesEPSOnResolutionMismatch" = NSImage;
	};
	"NSImage(GSQuartz)" = {
	    "-CGImageForProposedRect:context:hints:" = NSImage;
	};
	NSImageCell = {
	    "-imageAlignment" = NSImageCell;
	    "-imageFrameStyle" = NSImageCell;
	    "-imageScaling" = NSImageCell;
	    "-setImageAlignment:" = NSImageCell;
	    "-setImageFrameStyle:" = NSImageCell;
	    "-setImageScaling:" = NSImageCell;
	};
	NSImageRep = {
	    "+canInitWithData:" = NSImageRep;
	    "+canInitWithPasteboard:" = NSImageRep;
	    "+imageFileTypes" = NSImageRep;
	    "+imagePasteboardTypes" = NSImageRep;
	    "+imageRepClassForData:" = NSImageRep;
	    "+imageRepClassForFileType:" = NSImageRep;
	    "+imageRepClassForPasteboardType:" = NSImageRep;
	    "+imageRepWithContentsOfFile:" = NSImageRep;
	    "+imageRepWithContentsOfURL:" = NSImageRep;
	    "+imageRepWithPasteboard:" = NSImageRep;
	    "+imageRepsWithContentsOfFile:" = NSImageRep;
	    "+imageRepsWithContentsOfURL:" = NSImageRep;
	    "+imageRepsWithPasteboard:" = NSImageRep;
	    "+imageUnfilteredFileTypes" = NSImageRep;
	    "+imageUnfilteredPasteboardTypes" = NSImageRep;
	    "+registerImageRepClass:" = NSImageRep;
	    "+registeredImageRepClasses" = NSImageRep;
	    "+unregisterImageRepClass:" = NSImageRep;
	    "-bitsPerSample" = NSImageRep;
	    "-colorSpaceName" = NSImageRep;
	    "-draw" = NSImageRep;
	    "-drawAtPoint:" = NSImageRep;
	    "-drawInRect:" = NSImageRep;
	    "-drawInRect:fromRect:operation:fraction:respectFlipped:hints:" = NSImageRep;
	    "-hasAlpha" = NSImageRep;
	    "-isOpaque" = NSImageRep;
	    "-pixelsHigh" = NSImageRep;
	    "-pixelsWide" = NSImageRep;
	    "-setAlpha:" = NSImageRep;
	    "-setBitsPerSample:" = NSImageRep;
	    "-setColorSpaceName:" = NSImageRep;
	    "-setOpaque:" = NSImageRep;
	    "-setPixelsHigh:" = NSImageRep;
	    "-setPixelsWide:" = NSImageRep;
	    "-setSize:" = NSImageRep;
	    "-size" = NSImageRep;
	};
	"NSImageRep(GSQuartz)" = {
	    "-CGImageForProposedRect:context:hints:" = NSImageRep;
	};
	NSImageView = {
	    "+imageViewWithImage:" = NSImageView;
	    "-allowsCutCopyPaste" = NSImageView;
	    "-animates" = NSImageView;
	    "-image" = NSImageView;
	    "-imageAlignment" = NSImageView;
	    "-imageFrameStyle" = NSImageView;
	    "-imageScaling" = NSImageView;
	    "-isEditable" = NSImageView;
	    "-setAllowsCutCopyPaste:" = NSImageView;
	    "-setAnimates:" = NSImageView;
	    "-setEditable:" = NSImageView;
	    "-setImage:" = NSImageView;
	    "-setImageAlignment:" = NSImageView;
	    "-setImageFrameStyle:" = NSImageView;
	    "-setImageScaling:" = NSImageView;
	};
	"NSImageView(GNUstep)" = {
	    "-initiatesDrag" = NSImageView;
	    "-setInitiatesDrag:" = NSImageView;
	};
	NSInputServer = {
	    "-initWithDelegate:name:" = NSInputServer;
	};
	NSMatrix = {
	    "+cellClass" = NSMatrix;
	    "+setCellClass:" = NSMatrix;
	    "-acceptsFirstMouse:" = NSMatrix;
	    "-action" = NSMatrix;
	    "-addColumn" = NSMatrix;
	    "-addColumnWithCells:" = NSMatrix;
	    "-addRow" = NSMatrix;
	    "-addRowWithCells:" = NSMatrix;
	    "-allowsEmptySelection" = NSMatrix;
	    "-autosizesCells" = NSMatrix;
	    "-backgroundColor" = NSMatrix;
	    "-cellAtRow:column:" = NSMatrix;
	    "-cellBackgroundColor" = NSMatrix;
	    "-cellClass" = NSMatrix;
	    "-cellFrameAtRow:column:" = NSMatrix;
	    "-cellSize" = NSMatrix;
	    "-cellWithTag:" = NSMatrix;
	    "-cells" = NSMatrix;
	    "-delegate" = NSMatrix;
	    "-deselectAllCells" = NSMatrix;
	    "-deselectSelectedCell" = NSMatrix;
	    "-doubleAction" = NSMatrix;
	    "-drawCellAtRow:column:" = NSMatrix;
	    "-drawsBackground" = NSMatrix;
	    "-drawsCellBackground" = NSMatrix;
	    "-errorAction" = NSMatrix;
	    "-getNumberOfRows:columns:" = NSMatrix;
	    "-getRow:column:forPoint:" = NSMatrix;
	    "-getRow:column:ofCell:" = NSMatrix;
	    "-highlightCell:atRow:column:" = NSMatrix;
	    "-initWithFrame:" = NSMatrix;
	    "-initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:" = NSMatrix;
	    "-initWithFrame:mode:prototype:numberOfRows:numberOfColumns:" = NSMatrix;
	    "-insertColumn:" = NSMatrix;
	    "-insertColumn:withCells:" = NSMatrix;
	    "-insertRow:" = NSMatrix;
	    "-insertRow:withCells:" = NSMatrix;
	    "-intercellSpacing" = NSMatrix;
	    "-isAutoscroll" = NSMatrix;
	    "-isSelectionByRect" = NSMatrix;
	    "-keyCell" = NSMatrix;
	    "-makeCellAtRow:column:" = NSMatrix;
	    "-mode" = NSMatrix;
	    "-mouseDown:" = NSMatrix;
	    "-mouseDownFlags" = NSMatrix;
	    "-nextText" = NSMatrix;
	    "-numberOfColumns" = NSMatrix;
	    "-numberOfRows" = NSMatrix;
	    "-performKeyEquivalent:" = NSMatrix;
	    "-previousText" = NSMatrix;
	    "-prototype" = NSMatrix;
	    "-putCell:atRow:column:" = NSMatrix;
	    "-removeColumn:" = NSMatrix;
	    "-removeRow:" = NSMatrix;
	    "-renewRows:columns:" = NSMatrix;
	    "-resetCursorRects" = NSMatrix;
	    "-scrollCellToVisibleAtRow:column:" = NSMatrix;
	    "-selectAll:" = NSMatrix;
	    "-selectCellAtRow:column:" = NSMatrix;
	    "-selectCellWithTag:" = NSMatrix;
	    "-selectText:" = NSMatrix;
	    "-selectTextAtRow:column:" = NSMatrix;
	    "-selectedCell" = NSMatrix;
	    "-selectedCells" = NSMatrix;
	    "-selectedColumn" = NSMatrix;
	    "-selectedRow" = NSMatrix;
	    "-sendAction" = NSMatrix;
	    "-sendAction:to:forAllCells:" = NSMatrix;
	    "-sendDoubleAction" = NSMatrix;
	    "-setAction:" = NSMatrix;
	    "-setAllowsEmptySelection:" = NSMatrix;
	    "-setAutoscroll:" = NSMatrix;
	    "-setAutosizesCells:" = NSMatrix;
	    "-setBackgroundColor:" = NSMatrix;
	    "-setCellBackgroundColor:" = NSMatrix;
	    "-setCellClass:" = NSMatrix;
	    "-setCellSize:" = NSMatrix;
	    "-setDelegate:" = NSMatrix;
	    "-setDoubleAction:" = NSMatrix;
	    "-setDrawsBackground:" = NSMatrix;
	    "-setDrawsCellBackground:" = NSMatrix;
	    "-setErrorAction:" = NSMatrix;
	    "-setIntercellSpacing:" = NSMatrix;
	    "-setKeyCell:" = NSMatrix;
	    "-setMode:" = NSMatrix;
	    "-setNextText:" = NSMatrix;
	    "-setPreviousText:" = NSMatrix;
	    "-setPrototype:" = NSMatrix;
	    "-setScrollable:" = NSMatrix;
	    "-setSelectionByRect:" = NSMatrix;
	    "-setSelectionFrom:to:anchor:highlight:" = NSMatrix;
	    "-setState:atRow:column:" = NSMatrix;
	    "-setTabKeyTraversesCells:" = NSMatrix;
	    "-setToolTip:forCell:" = NSMatrix;
	    "-setValidateSize:" = NSMatrix;
	    "-sizeToCells" = NSMatrix;
	    "-sortUsingFunction:context:" = NSMatrix;
	    "-sortUsingSelector:" = NSMatrix;
	    "-tabKeyTraversesCells" = NSMatrix;
	    "-textDidBeginEditing:" = NSMatrix;
	    "-textDidChange:" = NSMatrix;
	    "-textDidEndEditing:" = NSMatrix;
	    "-textShouldBeginEditing:" = NSMatrix;
	    "-textShouldEndEditing:" = NSMatrix;
	    "-toolTipForCell:" = NSMatrix;
	};
	NSMenu = {
	    "+menuBarVisible" = NSMenu;
	    "+menuZone" = NSMenu;
	    "+popUpContextMenu:withEvent:forView:" = NSMenu;
	    "+popUpContextMenu:withEvent:forView:withFont:" = NSMenu;
	    "+setMenuBarVisible:" = NSMenu;
	    "+setMenuZone:" = NSMenu;
	    "-addItem:" = NSMenu;
	    "-addItemWithTitle:action:keyEquivalent:" = NSMenu;
	    "-attachedMenu" = NSMenu;
	    "-autoenablesItems" = NSMenu;
	    "-contextMenuRepresentation" = NSMenu;
	    "-delegate" = NSMenu;
	    "-helpRequested:" = NSMenu;
	    "-indexOfItem:" = NSMenu;
	    "-indexOfItemWithRepresentedObject:" = NSMenu;
	    "-indexOfItemWithSubmenu:" = NSMenu;
	    "-indexOfItemWithTag:" = NSMenu;
	    "-indexOfItemWithTarget:andAction:" = NSMenu;
	    "-indexOfItemWithTitle:" = NSMenu;
	    "-initWithTitle:" = NSMenu;
	    "-insertItem:atIndex:" = NSMenu;
	    "-insertItemWithTitle:action:keyEquivalent:atIndex:" = NSMenu;
	    "-isAttached" = NSMenu;
	    "-isTornOff" = NSMenu;
	    "-itemArray" = NSMenu;
	    "-itemAtIndex:" = NSMenu;
	    "-itemChanged:" = NSMenu;
	    "-itemWithTag:" = NSMenu;
	    "-itemWithTitle:" = NSMenu;
	    "-locationForSubmenu:" = NSMenu;
	    "-menuBarHeight" = NSMenu;
	    "-menuChangedMessagesEnabled" = NSMenu;
	    "-menuRepresentation" = NSMenu;
	    "-numberOfItems" = NSMenu;
	    "-performActionForItemAtIndex:" = NSMenu;
	    "-performKeyEquivalent:" = NSMenu;
	    "-popUpMenuPositionItem:atLocation:inView:" = NSMenu;
	    "-popUpMenuPositioningItem:atLocation:inView:" = NSMenu;
	    "-removeAllItems" = NSMenu;
	    "-removeItem:" = NSMenu;
	    "-removeItemAtIndex:" = NSMenu;
	    "-setAutoenablesItems:" = NSMenu;
	    "-setContextMenuRepresentation:" = NSMenu;
	    "-setDelegate:" = NSMenu;
	    "-setMenuChangedMessagesEnabled:" = NSMenu;
	    "-setMenuRepresentation:" = NSMenu;
	    "-setSubmenu:forItem:" = NSMenu;
	    "-setSupermenu:" = NSMenu;
	    "-setTearOffMenuRepresentation:" = NSMenu;
	    "-setTitle:" = NSMenu;
	    "-sizeToFit" = NSMenu;
	    "-submenuAction:" = NSMenu;
	    "-supermenu" = NSMenu;
	    "-tearOffMenuRepresentation" = NSMenu;
	    "-title" = NSMenu;
	    "-update" = NSMenu;
	};
	"NSMenu(GNUstepExtra)" = {
	    "-_ownedByPopUp" = NSMenu;
	    "-_owningPopUp" = NSMenu;
	    "-_setOwnedByPopUp:" = NSMenu;
	    "-close" = NSMenu;
	    "-closeTransient" = NSMenu;
	    "-display" = NSMenu;
	    "-displayTransient" = NSMenu;
	    "-isPartlyOffScreen" = NSMenu;
	    "-isTransient" = NSMenu;
	    "-nestedSetFrameOrigin:" = NSMenu;
	    "-setMain:" = NSMenu;
	    "-setTornOff:" = NSMenu;
	    "-shiftOnScreen" = NSMenu;
	    "-window" = NSMenu;
	};
	"NSMenuItem(GNUstepExtra)" = {
	    "-changesState" = NSMenuItem;
	    "-setChangesState:" = NSMenuItem;
	};
	NSMenuItemCell = {
	    "-calcSize" = NSMenuItemCell;
	    "-drawBorderAndBackgroundWithFrame:inView:" = NSMenuItemCell;
	    "-drawImageWithFrame:inView:" = NSMenuItemCell;
	    "-drawKeyEquivalentWithFrame:inView:" = NSMenuItemCell;
	    "-drawSeparatorItemWithFrame:inView:" = NSMenuItemCell;
	    "-drawStateImageWithFrame:inView:" = NSMenuItemCell;
	    "-drawTitleWithFrame:inView:" = NSMenuItemCell;
	    "-imageRectForBounds:" = NSMenuItemCell;
	    "-imageWidth" = NSMenuItemCell;
	    "-isHighlighted" = NSMenuItemCell;
	    "-keyEquivalentRectForBounds:" = NSMenuItemCell;
	    "-keyEquivalentWidth" = NSMenuItemCell;
	    "-menuItem" = NSMenuItemCell;
	    "-menuView" = NSMenuItemCell;
	    "-needsDisplay" = NSMenuItemCell;
	    "-needsSizing" = NSMenuItemCell;
	    "-setHighlighted:" = NSMenuItemCell;
	    "-setMenuItem:" = NSMenuItemCell;
	    "-setMenuView:" = NSMenuItemCell;
	    "-setNeedsDisplay:" = NSMenuItemCell;
	    "-setNeedsSizing:" = NSMenuItemCell;
	    "-stateImageRectForBounds:" = NSMenuItemCell;
	    "-stateImageWidth" = NSMenuItemCell;
	    "-titleRectForBounds:" = NSMenuItemCell;
	    "-titleWidth" = NSMenuItemCell;
	};
	NSMenuView = {
	    "+menuBarHeight" = NSMenuView;
	    "-attachSubmenuForItemAtIndex:" = NSMenuView;
	    "-attachedMenu" = NSMenuView;
	    "-attachedMenuView" = NSMenuView;
	    "-detachSubmenu" = NSMenuView;
	    "-font" = NSMenuView;
	    "-highlightedItemIndex" = NSMenuView;
	    "-horizontalEdgePadding" = NSMenuView;
	    "-imageAndTitleOffset" = NSMenuView;
	    "-imageAndTitleWidth" = NSMenuView;
	    "-indexOfItemAtPoint:" = NSMenuView;
	    "-initAsTearOff" = NSMenuView;
	    "-innerRect" = NSMenuView;
	    "-isAttached" = NSMenuView;
	    "-isHorizontal" = NSMenuView;
	    "-isTornOff" = NSMenuView;
	    "-itemAdded:" = NSMenuView;
	    "-itemChanged:" = NSMenuView;
	    "-itemRemoved:" = NSMenuView;
	    "-keyEquivalentOffset" = NSMenuView;
	    "-keyEquivalentWidth" = NSMenuView;
	    "-locationForSubmenu:" = NSMenuView;
	    "-menu" = NSMenuView;
	    "-menuItemCellForItemAtIndex:" = NSMenuView;
	    "-needsSizing" = NSMenuView;
	    "-performActionWithHighlightingForItemAtIndex:" = NSMenuView;
	    "-rectOfItemAtIndex:" = NSMenuView;
	    "-setFont:" = NSMenuView;
	    "-setHighlightedItemIndex:" = NSMenuView;
	    "-setHorizontal:" = NSMenuView;
	    "-setHorizontalEdgePadding:" = NSMenuView;
	    "-setMenu:" = NSMenuView;
	    "-setMenuItemCell:forItemAtIndex:" = NSMenuView;
	    "-setNeedsDisplayForItemAtIndex:" = NSMenuView;
	    "-setNeedsSizing:" = NSMenuView;
	    "-setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:" = NSMenuView;
	    "-sizeToFit" = NSMenuView;
	    "-stateImageOffset" = NSMenuView;
	    "-stateImageWidth" = NSMenuView;
	    "-trackWithEvent:" = NSMenuView;
	    "-update" = NSMenuView;
	};
	NSMovie = {
	    "+canInitWithPasteboard:" = NSMovie;
	    "+movieUnfilteredFileTypes" = NSMovie;
	    "+movieUnfilteredPasteboardTypes" = NSMovie;
	    "-QTMovie" = NSMovie;
	    "-URL" = NSMovie;
	    "-initWithMovie:" = NSMovie;
	    "-initWithPasteboard:" = NSMovie;
	    "-initWithURL:byReference:" = NSMovie;
	};
	NSMovieView = {
	    "-clear:" = NSMovieView;
	    "-copy:" = NSMovieView;
	    "-cut:" = NSMovieView;
	    "-gotoBeginning:" = NSMovieView;
	    "-gotoEnd:" = NSMovieView;
	    "-gotoPosterFrame:" = NSMovieView;
	    "-isControllerVisible" = NSMovieView;
	    "-isEditable" = NSMovieView;
	    "-isMuted" = NSMovieView;
	    "-isPlaying" = NSMovieView;
	    "-loopMode" = NSMovieView;
	    "-movie" = NSMovieView;
	    "-movieController" = NSMovieView;
	    "-movieRect" = NSMovieView;
	    "-paste:" = NSMovieView;
	    "-playsEveryFrame" = NSMovieView;
	    "-playsSelectionOnly" = NSMovieView;
	    "-rate" = NSMovieView;
	    "-resizeWithMagnification:" = NSMovieView;
	    "-selectAll:" = NSMovieView;
	    "-setEditable:" = NSMovieView;
	    "-setLoopMode:" = NSMovieView;
	    "-setMovie:" = NSMovieView;
	    "-setMuted:" = NSMovieView;
	    "-setPlaysEveryFrame:" = NSMovieView;
	    "-setPlaysSelectionOnly:" = NSMovieView;
	    "-setRate:" = NSMovieView;
	    "-setVolume:" = NSMovieView;
	    "-showController:adjustingSize:" = NSMovieView;
	    "-sizeForMagnification:" = NSMovieView;
	    "-start:" = NSMovieView;
	    "-stepBack:" = NSMovieView;
	    "-stepForward:" = NSMovieView;
	    "-stop:" = NSMovieView;
	    "-undo:" = NSMovieView;
	    "-volume" = NSMovieView;
	};
	"NSMutableAttributedString(AppKit)" = {
	    "-applyFontTraits:range:" = NSAttributedString;
	    "-fixAttachmentAttributeInRange:" = NSAttributedString;
	    "-fixAttributesInRange:" = NSAttributedString;
	    "-fixFontAttributeInRange:" = NSAttributedString;
	    "-fixParagraphStyleAttributeInRange:" = NSAttributedString;
	    "-readFromData:options:documentAttributes:" = NSAttributedString;
	    "-readFromData:options:documentAttributes:error:" = NSAttributedString;
	    "-readFromURL:options:documentAttributes:" = NSAttributedString;
	    "-readFromURL:options:documentAttributes:error:" = NSAttributedString;
	    "-setAlignment:range:" = NSAttributedString;
	    "-setBaseWritingDirection:range:" = NSAttributedString;
	    "-subscriptRange:" = NSAttributedString;
	    "-superscriptRange:" = NSAttributedString;
	    "-unscriptRange:" = NSAttributedString;
	    "-updateAttachmentsFromPath:" = NSAttributedString;
	};
	"NSMutableAttributedString(NSTextAttachment)" = {
	    "-updateAttachmentsFromPath:" = NSTextAttachment;
	};
	NSMutableParagraphStyle = {
	    "-addTabStop:" = NSParagraphStyle;
	    "-removeTabStop:" = NSParagraphStyle;
	    "-setAlignment:" = NSParagraphStyle;
	    "-setBaseWritingDirection:" = NSParagraphStyle;
	    "-setDefaultTabInterval:" = NSParagraphStyle;
	    "-setFirstLineHeadIndent:" = NSParagraphStyle;
	    "-setHeadIndent:" = NSParagraphStyle;
	    "-setHeaderLevel:" = NSParagraphStyle;
	    "-setHyphenationFactor:" = NSParagraphStyle;
	    "-setLineBreakMode:" = NSParagraphStyle;
	    "-setLineHeightMultiple:" = NSParagraphStyle;
	    "-setLineSpacing:" = NSParagraphStyle;
	    "-setMaximumLineHeight:" = NSParagraphStyle;
	    "-setMinimumLineHeight:" = NSParagraphStyle;
	    "-setParagraphSpacing:" = NSParagraphStyle;
	    "-setParagraphSpacingBefore:" = NSParagraphStyle;
	    "-setParagraphStyle:" = NSParagraphStyle;
	    "-setTabStops:" = NSParagraphStyle;
	    "-setTailIndent:" = NSParagraphStyle;
	    "-setTextBlocks:" = NSParagraphStyle;
	    "-setTextLists:" = NSParagraphStyle;
	    "-setTighteningFactorForTruncation:" = NSParagraphStyle;
	};
	NSNib = {
	    "-initWithContentsOfURL:" = NSNib;
	    "-initWithNibData:bundle:" = NSNib;
	    "-initWithNibNamed:bundle:" = NSNib;
	    "-instantiateNibWithExternalNameTable:" = NSNib;
	    "-instantiateNibWithExternalNameTable:withZone:" = NSNib;
	    "-instantiateNibWithOwner:topLevelObjects:" = NSNib;
	    "-instantiateWithOwner:topLevelObjects:" = NSNib;
	};
	"NSObject(NSAlertDelegate)" = {
	    "-alertShowHelp:" = NSAlert;
	};
	"NSObject(NSApplicationDelegate)" = {
	    "-application:delegateHandlesKey:" = NSApplication;
	    "-application:openFile:" = NSApplication;
	    "-application:openFileWithoutUI:" = NSApplication;
	    "-application:openFiles:" = NSApplication;
	    "-application:openTempFile:" = NSApplication;
	    "-application:printFile:" = NSApplication;
	    "-application:printFiles:" = NSApplication;
	    "-application:printFiles:withSettings:showPrintPanels:" = NSApplication;
	    "-application:willPresentError:" = NSApplication;
	    "-applicationDidBecomeActive:" = NSApplication;
	    "-applicationDidChangeScreenParameters:" = NSApplication;
	    "-applicationDidFinishLaunching:" = NSApplication;
	    "-applicationDidHide:" = NSApplication;
	    "-applicationDidResignActive:" = NSApplication;
	    "-applicationDidUnhide:" = NSApplication;
	    "-applicationDidUpdate:" = NSApplication;
	    "-applicationDockMenu:" = NSApplication;
	    "-applicationOpenUntitledFile:" = NSApplication;
	    "-applicationShouldHandleReopen:hasVisibleWindows:" = NSApplication;
	    "-applicationShouldOpenUntitledFile:" = NSApplication;
	    "-applicationShouldTerminate:" = NSApplication;
	    "-applicationShouldTerminateAfterLastWindowClosed:" = NSApplication;
	    "-applicationWillBecomeActive:" = NSApplication;
	    "-applicationWillFinishLaunching:" = NSApplication;
	    "-applicationWillHide:" = NSApplication;
	    "-applicationWillResignActive:" = NSApplication;
	    "-applicationWillTerminate:" = NSApplication;
	    "-applicationWillUnhide:" = NSApplication;
	    "-applicationWillUpdate:" = NSApplication;
	};
	"NSObject(NSBrowserDelegate)" = {
	    "-browser:canDragRowsWithIndexes:inColumn:withEvent:" = NSBrowser;
	    "-browser:child:ofItem:" = NSBrowser;
	    "-browser:createRowsForColumn:inMatrix:" = NSBrowser;
	    "-browser:didChangeLastColumn:toColumn:" = NSBrowser;
	    "-browser:headerViewControllerForItem:" = NSBrowser;
	    "-browser:isColumnValid:" = NSBrowser;
	    "-browser:isLeafItem:" = NSBrowser;
	    "-browser:numberOfChildrenOfItem:" = NSBrowser;
	    "-browser:numberOfRowsInColumn:" = NSBrowser;
	    "-browser:objectValueForItem:" = NSBrowser;
	    "-browser:previewViewControllerForLeafItem:" = NSBrowser;
	    "-browser:selectCellWithString:inColumn:" = NSBrowser;
	    "-browser:selectRow:inColumn:" = NSBrowser;
	    "-browser:setObjectValue:forItem:" = NSBrowser;
	    "-browser:shouldEditItem:" = NSBrowser;
	    "-browser:shouldSizeColumn:forUserResize:toWidth:" = NSBrowser;
	    "-browser:sizeToFitWidthOfColumn:" = NSBrowser;
	    "-browser:titleOfColumn:" = NSBrowser;
	    "-browser:willDisplayCell:atRow:column:" = NSBrowser;
	    "-browserColumnConfigurationDidChange:" = NSBrowser;
	    "-browserDidScroll:" = NSBrowser;
	    "-browserWillScroll:" = NSBrowser;
	    "-rootItemForBrowser:" = NSBrowser;
	};
	"NSObject(NSComboBoxCellDataSource)" = {
	    "-comboBoxCell:completedString:" = NSComboBoxCell;
	    "-comboBoxCell:indexOfItemWithStringValue:" = NSComboBoxCell;
	    "-comboBoxCell:objectValueForItemAtIndex:" = NSComboBoxCell;
	    "-numberOfItemsInComboBoxCell:" = NSComboBoxCell;
	};
	"NSObject(NSControlDelegate)" = {
	    "-controlTextDidBeginEditing:" = NSControl;
	    "-controlTextDidChange:" = NSControl;
	    "-controlTextDidEndEditing:" = NSControl;
	};
	"NSObject(NSControlTextEditingDelegate)" = {
	    "-control:didFailToFormatString:errorDescription:" = NSControl;
	    "-control:didFailToValidatePartialString:errorDescription:" = NSControl;
	    "-control:isValidObject:" = NSControl;
	    "-control:textShouldBeginEditing:" = NSControl;
	    "-control:textShouldEndEditing:" = NSControl;
	    "-control:textView:completions:forPartialWordRange:indexOfSelectedItem:" = NSControl;
	    "-control:textView:doCommandBySelector:" = NSControl;
	};
	"NSObject(NSDataLinkManagerDelegate)" = {
	    "-copyToPasteboard:at:cheapCopyAllowed:" = NSDataLinkManager;
	    "-dataLinkManager:didBreakLink:" = NSDataLinkManager;
	    "-dataLinkManager:isUpdateNeededForLink:" = NSDataLinkManager;
	    "-dataLinkManager:startTrackingLink:" = NSDataLinkManager;
	    "-dataLinkManager:stopTrackingLink:" = NSDataLinkManager;
	    "-dataLinkManagerCloseDocument:" = NSDataLinkManager;
	    "-dataLinkManagerDidEditLinks:" = NSDataLinkManager;
	    "-dataLinkManagerRedrawLinkOutlines:" = NSDataLinkManager;
	    "-dataLinkManagerTracksLinksIndividually:" = NSDataLinkManager;
	    "-importFile:at:" = NSDataLinkManager;
	    "-pasteFromPasteboard:at:" = NSDataLinkManager;
	    "-showSelection:" = NSDataLinkManager;
	    "-windowForSelection:" = NSDataLinkManager;
	};
	"NSObject(NSDataPickerCellDelegate)" = {
	    "-datePickerCell:validateProposedDateValue:timeInterval:" = NSDatePickerCell;
	};
	"NSObject(NSEditor)" = {
	    "-commitEditing" = NSKeyValueBinding;
	    "-commitEditingWithDelegate:didCommitSelector:contextInfo:" = NSKeyValueBinding;
	    "-discardEditing" = NSKeyValueBinding;
	};
	"NSObject(NSEditorRegistration)" = {
	    "-objectDidBeginEditing:" = NSKeyValueBinding;
	    "-objectDidEndEditing:" = NSKeyValueBinding;
	};
	"NSObject(NSFontManagerDelegate)" = {
	    "-fontManager:willIncludeFont:" = NSFontManager;
	};
	"NSObject(NSFontPanelValidation)" = {
	    "-validModesForFontPanel:" = NSFontPanel;
	};
	"NSObject(NSKeyValueBindingCreation)" = {
	    "+exposeBinding:" = NSKeyValueBinding;
	    "-bind:toObject:withKeyPath:options:" = NSKeyValueBinding;
	    "-exposedBindings" = NSKeyValueBinding;
	    "-infoForBinding:" = NSKeyValueBinding;
	    "-unbind:" = NSKeyValueBinding;
	    "-valueClassForBinding:" = NSKeyValueBinding;
	};
	"NSObject(NSMenuActionResponder)" = {
	    "-validateMenuItem:" = NSMenu;
	};
	"NSObject(NSMenuDelegate)" = {
	    "-menu:updateItem:atIndex:shouldCancel:" = NSMenu;
	    "-menuHasKeyEquivalent:forEvent:target:action:" = NSMenu;
	    "-menuNeedsUpdate:" = NSMenu;
	    "-numberOfItemsInMenu:" = NSMenu;
	};
	"NSObject(NSOpenSavePanelDelegate)" = {
	    "-panel:compareFilename:with:caseSensitive:" = NSSavePanel;
	    "-panel:didChangeToDirectoryURL:" = NSSavePanel;
	    "-panel:directoryDidChange:" = NSSavePanel;
	    "-panel:isValidFilename:" = NSSavePanel;
	    "-panel:shouldEnableURL:" = NSSavePanel;
	    "-panel:shouldShowFilename:" = NSSavePanel;
	    "-panel:userEnteredFilename:confirmed:" = NSSavePanel;
	    "-panel:validateURL:error:" = NSSavePanel;
	    "-panel:willExpand:" = NSSavePanel;
	    "-panelSelectionDidChange:" = NSSavePanel;
	};
	"NSObject(NSPasteboardItemDataProvider)" = {
	    "-pasteboardFinishedWithDataProvider:" = NSPasteboardItem;
	};
	"NSObject(NSPasteboardOwner)" = {
	    "-pasteboard:provideDataForType:" = NSPasteboard;
	    "-pasteboard:provideDataForType:andVersion:" = NSPasteboard;
	    "-pasteboardChangedOwner:" = NSPasteboard;
	};
	"NSObject(NSPasteboardReading)" = {
	    "+readingOptionsForType:pasteboard:" = NSPasteboard;
	    "-initWithPasteboardPropertyList:ofType:" = NSPasteboard;
	};
	"NSObject(NSPasteboardWriting)" = {
	    "-writingOptionsForType:pasteboard:" = NSPasteboard;
	};
	"NSObject(NSPlaceholder)" = {
	    "+defaultPlaceholderForMarker:withBinding:" = NSKeyValueBinding;
	    "+setDefaultPlaceholder:forMarker:withBinding:" = NSKeyValueBinding;
	};
	"NSObject(NSSavePanelDelegate)" = {
	    "-panel:compareFilename:with:caseSensitive:" = NSSavePanel;
	    "-panel:directoryDidChange:" = NSSavePanel;
	    "-panel:isValidFilename:" = NSSavePanel;
	    "-panel:shouldShowFilename:" = NSSavePanel;
	    "-panel:userEnteredFilename:confirmed:" = NSSavePanel;
	    "-panel:willExpand:" = NSSavePanel;
	    "-panelSelectionDidChange:" = NSSavePanel;
	};
	"NSObject(NSServicesRequests)" = {
	    "-iconWindow" = NSApplication;
	    "-readSelectionFromPasteboard:" = NSApplication;
	    "-writeSelectionToPasteboard:types:" = NSApplication;
	};
	"NSObject(NSSoundDelegate)" = {
	    "-sound:didFinishPlaying:" = NSSound;
	};
	"NSObject(NSSpeechSynthesizerDelegate)" = {
	    "-speechSynthesizer:didEncounterErrorAtIndex:ofString:message:" = NSSpeechSynthesizer;
	    "-speechSynthesizer:didEncounterSyncMessage:" = NSSpeechSynthesizer;
	    "-speechSynthesizer:didFinishSpeaking:" = NSSpeechSynthesizer;
	    "-speechSynthesizer:willSpeakPhoneme:" = NSSpeechSynthesizer;
	    "-speechSynthesizer:willSpeakWord:ofString:" = NSSpeechSynthesizer;
	};
	"NSObject(NSSplitViewDelegate)" = {
	    "-splitView:additionalEffectiveRectOfDividerAtIndex:" = NSSplitView;
	    "-splitView:canCollapseSubview:" = NSSplitView;
	    "-splitView:constrainMaxCoordinate:ofSubviewAt:" = NSSplitView;
	    "-splitView:constrainMinCoordinate:maxCoordinate:ofSubviewAt:" = NSSplitView;
	    "-splitView:constrainMinCoordinate:ofSubviewAt:" = NSSplitView;
	    "-splitView:constrainSplitPosition:ofSubviewAt:" = NSSplitView;
	    "-splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:" = NSSplitView;
	    "-splitView:resizeSubviewsWithOldSize:" = NSSplitView;
	    "-splitView:shouldAdjustSizeOfSubview:" = NSSplitView;
	    "-splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:" = NSSplitView;
	    "-splitView:shouldHideDividerAtIndex:" = NSSplitView;
	    "-splitViewDidResizeSubviews:" = NSSplitView;
	    "-splitViewWillResizeSubviews:" = NSSplitView;
	};
	"NSObject(NSTableDataSource)" = {
	    "-numberOfRowsInTableView:" = NSTableView;
	    "-tableView:acceptDrop:row:dropOperation:" = NSTableView;
	    "-tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:" = NSTableView;
	    "-tableView:objectValueForTableColumn:row:" = NSTableView;
	    "-tableView:setObjectValue:forTableColumn:row:" = NSTableView;
	    "-tableView:sortDescriptorsDidChange:" = NSTableView;
	    "-tableView:validateDrop:proposedRow:proposedDropOperation:" = NSTableView;
	    "-tableView:writeRows:toPasteboard:" = NSTableView;
	    "-tableView:writeRowsWithIndexes:toPasteboard:" = NSTableView;
	};
	"NSObject(NSTableViewDelegate)" = {
	    "-selectionShouldChangeInTableView:" = NSTableView;
	    "-tableView:dataCellForTableColumn:row:" = NSTableView;
	    "-tableView:didAddRowView:forRow:" = NSTableView;
	    "-tableView:didClickTableColumn:" = NSTableView;
	    "-tableView:didDragTableColumn:" = NSTableView;
	    "-tableView:didRemoveRowView:forRow:" = NSTableView;
	    "-tableView:heightOfRow:" = NSTableView;
	    "-tableView:mouseDownInHeaderOfTableColumn:" = NSTableView;
	    "-tableView:rowViewForRow:" = NSTableView;
	    "-tableView:shouldEditTableColumn:row:" = NSTableView;
	    "-tableView:shouldSelectRow:" = NSTableView;
	    "-tableView:shouldSelectTableColumn:" = NSTableView;
	    "-tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:" = NSTableView;
	    "-tableView:viewForTableColumn:row:" = NSTableView;
	    "-tableView:willDisplayCell:forTableColumn:row:" = NSTableView;
	    "-tableViewColumnDidMove:" = NSTableView;
	    "-tableViewColumnDidResize:" = NSTableView;
	    "-tableViewSelectionDidChange:" = NSTableView;
	    "-tableViewSelectionIsChanging:" = NSTableView;
	};
	"NSObject(NSTextDelegate)" = {
	    "-textDidBeginEditing:" = NSText;
	    "-textDidChange:" = NSText;
	    "-textDidEndEditing:" = NSText;
	    "-textShouldBeginEditing:" = NSText;
	    "-textShouldEndEditing:" = NSText;
	};
	"NSObject(NSTextStorageDelegate)" = {
	    "-textStorageDidProcessEditing:" = NSTextStorage;
	    "-textStorageWillProcessEditing:" = NSTextStorage;
	};
	"NSObject(NSTextViewDelegate)" = {
	    "-textView:clickedOnCell:inRect:" = NSTextView;
	    "-textView:clickedOnCell:inRect:atIndex:" = NSTextView;
	    "-textView:clickedOnLink:" = NSTextView;
	    "-textView:clickedOnLink:atIndex:" = NSTextView;
	    "-textView:completions:forPartialWordRange:indexOfSelectedItem:" = NSTextView;
	    "-textView:doCommandBySelector:" = NSTextView;
	    "-textView:doubleClickedOnCell:inRect:" = NSTextView;
	    "-textView:doubleClickedOnCell:inRect:atIndex:" = NSTextView;
	    "-textView:draggedCell:inRect:event:" = NSTextView;
	    "-textView:draggedCell:inRect:event:atIndex:" = NSTextView;
	    "-textView:shouldChangeTextInRange:replacementString:" = NSTextView;
	    "-textView:shouldChangeTextInRanges:replacementStrings:" = NSTextView;
	    "-textView:shouldChangeTypingAttributes:toAttributes:" = NSTextView;
	    "-textView:willChangeSelectionFromCharacterRange:toCharacterRange:" = NSTextView;
	    "-textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:" = NSTextView;
	    "-textView:willDisplayToolTip:forCharacterAtIndex:" = NSTextView;
	    "-textViewDidChangeSelection:" = NSTextView;
	    "-textViewDidChangeTypingAttributes:" = NSTextView;
	    "-undoManagerForTextView:" = NSTextView;
	};
	"NSObject(NSWindowDelegate)" = {
	    "-window:willPositionSheet:usingRect:" = NSWindow;
	    "-windowDidBecomeKey:" = NSWindow;
	    "-windowDidBecomeMain:" = NSWindow;
	    "-windowDidChangeScreen:" = NSWindow;
	    "-windowDidChangeScreenProfile:" = NSWindow;
	    "-windowDidDeminiaturize:" = NSWindow;
	    "-windowDidEndSheet:" = NSWindow;
	    "-windowDidExpose:" = NSWindow;
	    "-windowDidMiniaturize:" = NSWindow;
	    "-windowDidMove:" = NSWindow;
	    "-windowDidResignKey:" = NSWindow;
	    "-windowDidResignMain:" = NSWindow;
	    "-windowDidResize:" = NSWindow;
	    "-windowDidUpdate:" = NSWindow;
	    "-windowShouldClose:" = NSWindow;
	    "-windowShouldZoom:toFrame:" = NSWindow;
	    "-windowWillBeginSheet:" = NSWindow;
	    "-windowWillClose:" = NSWindow;
	    "-windowWillMiniaturize:" = NSWindow;
	    "-windowWillMove:" = NSWindow;
	    "-windowWillResize:toSize:" = NSWindow;
	    "-windowWillReturnFieldEditor:toObject:" = NSWindow;
	    "-windowWillReturnUndoManager:" = NSWindow;
	    "-windowWillUseStandardFrame:defaultFrame:" = NSWindow;
	};
	"NSObject(NSWindowDelegateAdditions)" = {
	    "-attachedSheet" = NSWindow;
	};
	NSObjectController = {
	    "-add:" = NSObjectController;
	    "-addObject:" = NSObjectController;
	    "-automaticallyPreparesContent" = NSObjectController;
	    "-canAdd" = NSObjectController;
	    "-canRemove" = NSObjectController;
	    "-content" = NSObjectController;
	    "-entityNameKey" = NSObjectController;
	    "-fetch:" = NSObjectController;
	    "-fetchPredicate" = NSObjectController;
	    "-fetchWithRequest:merge:error:" = NSObjectController;
	    "-initWithContent:" = NSObjectController;
	    "-isEditable" = NSObjectController;
	    "-managedObjectContext" = NSObjectController;
	    "-newObject" = NSObjectController;
	    "-objectClass" = NSObjectController;
	    "-prepareContent" = NSObjectController;
	    "-remove:" = NSObjectController;
	    "-removeObject:" = NSObjectController;
	    "-selectedObjects" = NSObjectController;
	    "-selection" = NSObjectController;
	    "-setAutomaticallyPreparesContent:" = NSObjectController;
	    "-setContent:" = NSObjectController;
	    "-setEditable:" = NSObjectController;
	    "-setEntityName:" = NSObjectController;
	    "-setFetchPredicate:" = NSObjectController;
	    "-setManagedObjectContext:" = NSObjectController;
	    "-setObjectClass:" = NSObjectController;
	    "-validateMenuItem:" = NSObjectController;
	};
	NSOpenGLContext = {
	    "+clearCurrentContext" = NSOpenGL;
	    "+currentContext" = NSOpenGL;
	    "-CGLContextObj" = NSOpenGL;
	    "-clearDrawable" = NSOpenGL;
	    "-copyAttributesFromContext:withMask:" = NSOpenGL;
	    "-createTexture:fromView:internalFormat:" = NSOpenGL;
	    "-currentVirtualScreen" = NSOpenGL;
	    "-flushBuffer" = NSOpenGL;
	    "-getValues:forParameter:" = NSOpenGL;
	    "-initWithCGLContextObj:" = NSOpenGL;
	    "-initWithFormat:shareContext:" = NSOpenGL;
	    "-makeCurrentContext" = NSOpenGL;
	    "-setCurrentVirtualScreen:" = NSOpenGL;
	    "-setFullScreen" = NSOpenGL;
	    "-setOffScreen:width:height:rowbytes:" = NSOpenGL;
	    "-setValues:forParameter:" = NSOpenGL;
	    "-setView:" = NSOpenGL;
	    "-update" = NSOpenGL;
	    "-view" = NSOpenGL;
	};
	NSOpenGLPixelFormat = {
	    "-getValues:forAttribute:forVirtualScreen:" = NSOpenGL;
	    "-initWithAttributes:" = NSOpenGL;
	    "-numberOfVirtualScreens" = NSOpenGL;
	};
	NSOpenGLView = {
	    "+defaultPixelFormat" = NSOpenGLView;
	    "-clearGLContext" = NSOpenGLView;
	    "-initWithFrame:pixelFormat:" = NSOpenGLView;
	    "-openGLContext" = NSOpenGLView;
	    "-pixelFormat" = NSOpenGLView;
	    "-prepareOpenGL" = NSOpenGLView;
	    "-reshape" = NSOpenGLView;
	    "-setOpenGLContext:" = NSOpenGLView;
	    "-setPixelFormat:" = NSOpenGLView;
	    "-update" = NSOpenGLView;
	};
	NSOpenPanel = {
	    "+openPanel" = NSOpenPanel;
	    "-URLs" = NSOpenPanel;
	    "-allowsMultipleSelection" = NSOpenPanel;
	    "-beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:" = NSOpenPanel;
	    "-beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:" = NSOpenPanel;
	    "-canChooseDirectories" = NSOpenPanel;
	    "-canChooseFiles" = NSOpenPanel;
	    "-filenames" = NSOpenPanel;
	    "-resolvesAliases" = NSOpenPanel;
	    "-runModalForDirectory:file:types:" = NSOpenPanel;
	    "-runModalForDirectory:file:types:relativeToWindow:" = NSOpenPanel;
	    "-runModalForTypes:" = NSOpenPanel;
	    "-setAllowsMultipleSelection:" = NSOpenPanel;
	    "-setCanChooseDirectories:" = NSOpenPanel;
	    "-setCanChooseFiles:" = NSOpenPanel;
	    "-setResolvesAliases:" = NSOpenPanel;
	};
	NSOutlineView = {
	    "-autoResizesOutlineColumn" = NSOutlineView;
	    "-autosaveExpandedItems" = NSOutlineView;
	    "-collapseItem:" = NSOutlineView;
	    "-collapseItem:collapseChildren:" = NSOutlineView;
	    "-expandItem:" = NSOutlineView;
	    "-expandItem:expandChildren:" = NSOutlineView;
	    "-frameOfOutlineCellAtRow:" = NSOutlineView;
	    "-indentationMarkerFollowsCell" = NSOutlineView;
	    "-indentationPerLevel" = NSOutlineView;
	    "-isExpandable:" = NSOutlineView;
	    "-isItemExpanded:" = NSOutlineView;
	    "-itemAtRow:" = NSOutlineView;
	    "-levelForItem:" = NSOutlineView;
	    "-levelForRow:" = NSOutlineView;
	    "-outlineTableColumn" = NSOutlineView;
	    "-parentForItem:" = NSOutlineView;
	    "-reloadItem:" = NSOutlineView;
	    "-reloadItem:reloadChildren:" = NSOutlineView;
	    "-rowForItem:" = NSOutlineView;
	    "-setAutoresizesOutlineColumn:" = NSOutlineView;
	    "-setAutosaveExpandedItems:" = NSOutlineView;
	    "-setDropItem:dropChildIndex:" = NSOutlineView;
	    "-setIndentationMarkerFollowsCell:" = NSOutlineView;
	    "-setIndentationPerLevel:" = NSOutlineView;
	    "-setOutlineTableColumn:" = NSOutlineView;
	    "-shouldCollapseAutoExpandedItemsForDeposited:" = NSOutlineView;
	};
	NSPageLayout = {
	    "+pageLayout" = NSPageLayout;
	    "-accessoryView" = NSPageLayout;
	    "-beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:" = NSPageLayout;
	    "-convertOldFactor:newFactor:" = NSPageLayout;
	    "-pickedButton:" = NSPageLayout;
	    "-pickedOrientation:" = NSPageLayout;
	    "-pickedPaperSize:" = NSPageLayout;
	    "-pickedUnits:" = NSPageLayout;
	    "-printInfo" = NSPageLayout;
	    "-readPrintInfo" = NSPageLayout;
	    "-runModal" = NSPageLayout;
	    "-runModalWithPrintInfo:" = NSPageLayout;
	    "-setAccessoryView:" = NSPageLayout;
	    "-writePrintInfo" = NSPageLayout;
	};
	NSPanel = {
	    "-becomesKeyOnlyIfNeeded" = NSPanel;
	    "-isFloatingPanel" = NSPanel;
	    "-setBecomesKeyOnlyIfNeeded:" = NSPanel;
	    "-setFloatingPanel:" = NSPanel;
	    "-setWorksWhenModal:" = NSPanel;
	    "-worksWhenModal" = NSPanel;
	};
	NSParagraphStyle = {
	    "+defaultParagraphStyle" = NSParagraphStyle;
	    "+defaultWritingDirectionForLanguage:" = NSParagraphStyle;
	    "-alignment" = NSParagraphStyle;
	    "-baseWritingDirection" = NSParagraphStyle;
	    "-defaultTabInterval" = NSParagraphStyle;
	    "-firstLineHeadIndent" = NSParagraphStyle;
	    "-headIndent" = NSParagraphStyle;
	    "-headerLevel" = NSParagraphStyle;
	    "-hyphenationFactor" = NSParagraphStyle;
	    "-lineBreakMode" = NSParagraphStyle;
	    "-lineHeightMultiple" = NSParagraphStyle;
	    "-lineSpacing" = NSParagraphStyle;
	    "-maximumLineHeight" = NSParagraphStyle;
	    "-minimumLineHeight" = NSParagraphStyle;
	    "-paragraphSpacing" = NSParagraphStyle;
	    "-paragraphSpacingBefore" = NSParagraphStyle;
	    "-tabStops" = NSParagraphStyle;
	    "-tailIndent" = NSParagraphStyle;
	    "-textBlocks" = NSParagraphStyle;
	    "-textLists" = NSParagraphStyle;
	    "-tighteningFactorForTruncation" = NSParagraphStyle;
	};
	NSPasteboard = {
	    "+generalPasteboard" = NSPasteboard;
	    "+pasteboardByFilteringData:ofType:" = NSPasteboard;
	    "+pasteboardByFilteringFile:" = NSPasteboard;
	    "+pasteboardByFilteringTypesInPasteboard:" = NSPasteboard;
	    "+pasteboardWithName:" = NSPasteboard;
	    "+pasteboardWithUniqueName" = NSPasteboard;
	    "+typesFilterableTo:" = NSPasteboard;
	    "-addTypes:owner:" = NSPasteboard;
	    "-availableTypeFromArray:" = NSPasteboard;
	    "-changeCount" = NSPasteboard;
	    "-dataForType:" = NSPasteboard;
	    "-declareTypes:owner:" = NSPasteboard;
	    "-name" = NSPasteboard;
	    "-propertyListForType:" = NSPasteboard;
	    "-readFileContentsType:toFile:" = NSPasteboard;
	    "-readFileWrapper" = NSPasteboard;
	    "-releaseGlobally" = NSPasteboard;
	    "-setData:forType:" = NSPasteboard;
	    "-setPropertyList:forType:" = NSPasteboard;
	    "-setString:forType:" = NSPasteboard;
	    "-stringForType:" = NSPasteboard;
	    "-types" = NSPasteboard;
	    "-writeFileContents:" = NSPasteboard;
	    "-writeFileWrapper:" = NSPasteboard;
	};
	"NSPasteboard(GNUstepExtensions)" = {
	    "+mimeTypeForPasteboardType:" = NSPasteboard;
	    "+pasteboardTypeForMimeType:" = NSPasteboard;
	    "-setChangeCount:" = NSPasteboard;
	    "-setHistory:" = NSPasteboard;
	};
	NSPasteboardItem = {
	    "-availableTypeFromArray:" = NSPasteboardItem;
	    "-dataForType:" = NSPasteboardItem;
	    "-propertyListForType:" = NSPasteboardItem;
	    "-setData:forType:" = NSPasteboardItem;
	    "-setDataProvider:forTypes:" = NSPasteboardItem;
	    "-setPropertyList:forType:" = NSPasteboardItem;
	    "-setString:forType:" = NSPasteboardItem;
	    "-stringForType:" = NSPasteboardItem;
	    "-types" = NSPasteboardItem;
	};
	NSPopUpButton = {
	    "-addItemWithTitle:" = NSPopUpButton;
	    "-addItemsWithTitles:" = NSPopUpButton;
	    "-autoenablesItems" = NSPopUpButton;
	    "-indexOfItem:" = NSPopUpButton;
	    "-indexOfItemWithRepresentedObject:" = NSPopUpButton;
	    "-indexOfItemWithTag:" = NSPopUpButton;
	    "-indexOfItemWithTarget:andAction:" = NSPopUpButton;
	    "-indexOfItemWithTitle:" = NSPopUpButton;
	    "-indexOfSelectedItem" = NSPopUpButton;
	    "-initWithFrame:pullsDown:" = NSPopUpButton;
	    "-insertItemWithTitle:atIndex:" = NSPopUpButton;
	    "-itemArray" = NSPopUpButton;
	    "-itemAtIndex:" = NSPopUpButton;
	    "-itemTitleAtIndex:" = NSPopUpButton;
	    "-itemTitles" = NSPopUpButton;
	    "-itemWithTitle:" = NSPopUpButton;
	    "-lastItem" = NSPopUpButton;
	    "-numberOfItems" = NSPopUpButton;
	    "-preferredEdge" = NSPopUpButton;
	    "-pullsDown" = NSPopUpButton;
	    "-removeAllItems" = NSPopUpButton;
	    "-removeItemAtIndex:" = NSPopUpButton;
	    "-removeItemWithTitle:" = NSPopUpButton;
	    "-selectItem:" = NSPopUpButton;
	    "-selectItemAtIndex:" = NSPopUpButton;
	    "-selectItemWithTag:" = NSPopUpButton;
	    "-selectItemWithTitle:" = NSPopUpButton;
	    "-selectedItem" = NSPopUpButton;
	    "-setAutoenablesItems:" = NSPopUpButton;
	    "-setPreferredEdge:" = NSPopUpButton;
	    "-setPullsDown:" = NSPopUpButton;
	    "-setTitle:" = NSPopUpButton;
	    "-synchronizeTitleAndSelectedItem" = NSPopUpButton;
	    "-titleOfSelectedItem" = NSPopUpButton;
	};
	NSPopUpButtonCell = {
	    "-addItemWithTitle:" = NSPopUpButtonCell;
	    "-addItemsWithTitles:" = NSPopUpButtonCell;
	    "-altersStateOfSelectedItem" = NSPopUpButtonCell;
	    "-arrowPosition" = NSPopUpButtonCell;
	    "-attachPopUpWithFrame:inView:" = NSPopUpButtonCell;
	    "-autoenablesItems" = NSPopUpButtonCell;
	    "-dismissPopUp" = NSPopUpButtonCell;
	    "-indexOfItem:" = NSPopUpButtonCell;
	    "-indexOfItemWithRepresentedObject:" = NSPopUpButtonCell;
	    "-indexOfItemWithTag:" = NSPopUpButtonCell;
	    "-indexOfItemWithTarget:andAction:" = NSPopUpButtonCell;
	    "-indexOfItemWithTitle:" = NSPopUpButtonCell;
	    "-indexOfSelectedItem" = NSPopUpButtonCell;
	    "-initTextCell:pullsDown:" = NSPopUpButtonCell;
	    "-insertItemWithTitle:atIndex:" = NSPopUpButtonCell;
	    "-itemArray" = NSPopUpButtonCell;
	    "-itemAtIndex:" = NSPopUpButtonCell;
	    "-itemTitleAtIndex:" = NSPopUpButtonCell;
	    "-itemTitles" = NSPopUpButtonCell;
	    "-itemWithTitle:" = NSPopUpButtonCell;
	    "-lastItem" = NSPopUpButtonCell;
	    "-menu" = NSPopUpButtonCell;
	    "-numberOfItems" = NSPopUpButtonCell;
	    "-performClickWithFrame:inView:" = NSPopUpButtonCell;
	    "-preferredEdge" = NSPopUpButtonCell;
	    "-pullsDown" = NSPopUpButtonCell;
	    "-removeAllItems" = NSPopUpButtonCell;
	    "-removeItemAtIndex:" = NSPopUpButtonCell;
	    "-removeItemWithTitle:" = NSPopUpButtonCell;
	    "-selectItem:" = NSPopUpButtonCell;
	    "-selectItemAtIndex:" = NSPopUpButtonCell;
	    "-selectItemWithTitle:" = NSPopUpButtonCell;
	    "-selectedItem" = NSPopUpButtonCell;
	    "-setAltersStateOfSelectedItem:" = NSPopUpButtonCell;
	    "-setArrowPosition:" = NSPopUpButtonCell;
	    "-setAutoenablesItems:" = NSPopUpButtonCell;
	    "-setMenu:" = NSPopUpButtonCell;
	    "-setPreferredEdge:" = NSPopUpButtonCell;
	    "-setPullsDown:" = NSPopUpButtonCell;
	    "-setTitle:" = NSPopUpButtonCell;
	    "-setUsesItemFromMenu:" = NSPopUpButtonCell;
	    "-synchronizeTitleAndSelectedItem" = NSPopUpButtonCell;
	    "-titleOfSelectedItem" = NSPopUpButtonCell;
	    "-usesItemFromMenu" = NSPopUpButtonCell;
	};
	NSPredicateEditor = {
	    "-rowTemplates" = NSPredicateEditor;
	    "-setRowTemplates:" = NSPredicateEditor;
	};
	NSPredicateEditorRowTemplate = {
	    "+templatesWithAttributeKeyPaths:inEntityDescription:" = NSPredicateEditorRowTemplate;
	    "-compoundTypes" = NSPredicateEditorRowTemplate;
	    "-displayableSubpredicatesOfPredicate:" = NSPredicateEditorRowTemplate;
	    "-initWithCompoundTypes:" = NSPredicateEditorRowTemplate;
	    "-initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:" = NSPredicateEditorRowTemplate;
	    "-initWithLeftExpressions:rightExpressions:modifier:operators:options:" = NSPredicateEditorRowTemplate;
	    "-leftExpressions" = NSPredicateEditorRowTemplate;
	    "-matchForPredicate:" = NSPredicateEditorRowTemplate;
	    "-modifier" = NSPredicateEditorRowTemplate;
	    "-operators" = NSPredicateEditorRowTemplate;
	    "-options" = NSPredicateEditorRowTemplate;
	    "-predicateWithSubpredicates:" = NSPredicateEditorRowTemplate;
	    "-rightExpressionAttributeType" = NSPredicateEditorRowTemplate;
	    "-rightExpressions" = NSPredicateEditorRowTemplate;
	    "-setPredicate:" = NSPredicateEditorRowTemplate;
	    "-templateViews" = NSPredicateEditorRowTemplate;
	};
	NSPrintInfo = {
	    "+defaultPrinter" = NSPrintInfo;
	    "+setDefaultPrinter:" = NSPrintInfo;
	    "+setSharedPrintInfo:" = NSPrintInfo;
	    "+sharedPrintInfo" = NSPrintInfo;
	    "+sizeForPaperName:" = NSPrintInfo;
	    "-bottomMargin" = NSPrintInfo;
	    "-dictionary" = NSPrintInfo;
	    "-horizontalPagination" = NSPrintInfo;
	    "-imageablePageBounds" = NSPrintInfo;
	    "-initWithDictionary:" = NSPrintInfo;
	    "-isHorizontallyCentered" = NSPrintInfo;
	    "-isVerticallyCentered" = NSPrintInfo;
	    "-jobDisposition" = NSPrintInfo;
	    "-leftMargin" = NSPrintInfo;
	    "-localizedPaperName" = NSPrintInfo;
	    "-orientation" = NSPrintInfo;
	    "-paperName" = NSPrintInfo;
	    "-paperSize" = NSPrintInfo;
	    "-printer" = NSPrintInfo;
	    "-rightMargin" = NSPrintInfo;
	    "-setBottomMargin:" = NSPrintInfo;
	    "-setHorizontalPagination:" = NSPrintInfo;
	    "-setHorizontallyCentered:" = NSPrintInfo;
	    "-setJobDisposition:" = NSPrintInfo;
	    "-setLeftMargin:" = NSPrintInfo;
	    "-setOrientation:" = NSPrintInfo;
	    "-setPaperName:" = NSPrintInfo;
	    "-setPaperSize:" = NSPrintInfo;
	    "-setPrinter:" = NSPrintInfo;
	    "-setRightMargin:" = NSPrintInfo;
	    "-setTopMargin:" = NSPrintInfo;
	    "-setUpPrintOperationDefaultValues" = NSPrintInfo;
	    "-setVerticalPagination:" = NSPrintInfo;
	    "-setVerticallyCentered:" = NSPrintInfo;
	    "-topMargin" = NSPrintInfo;
	    "-verticalPagination" = NSPrintInfo;
	};
	NSPrintOperation = {
	    "+EPSOperationWithView:insideRect:toData:" = NSPrintOperation;
	    "+EPSOperationWithView:insideRect:toData:printInfo:" = NSPrintOperation;
	    "+EPSOperationWithView:insideRect:toPath:printInfo:" = NSPrintOperation;
	    "+PDFOperationWithView:insideRect:toData:" = NSPrintOperation;
	    "+PDFOperationWithView:insideRect:toData:printInfo:" = NSPrintOperation;
	    "+PDFOperationWithView:insideRect:toPath:printInfo:" = NSPrintOperation;
	    "+currentOperation" = NSPrintOperation;
	    "+printOperationWithView:" = NSPrintOperation;
	    "+printOperationWithView:printInfo:" = NSPrintOperation;
	    "+setCurrentOperation:" = NSPrintOperation;
	    "-accessoryView" = NSPrintOperation;
	    "-canSpawnSeparateThread" = NSPrintOperation;
	    "-cleanUpOperation" = NSPrintOperation;
	    "-context" = NSPrintOperation;
	    "-createContext" = NSPrintOperation;
	    "-currentPage" = NSPrintOperation;
	    "-deliverResult" = NSPrintOperation;
	    "-destroyContext" = NSPrintOperation;
	    "-initEPSOperationWithView:insideRect:toData:printInfo:" = NSPrintOperation;
	    "-initWithView:printInfo:" = NSPrintOperation;
	    "-isCopyingOperation" = NSPrintOperation;
	    "-isEPSOperation" = NSPrintOperation;
	    "-jobStyleHint" = NSPrintOperation;
	    "-pageOrder" = NSPrintOperation;
	    "-printInfo" = NSPrintOperation;
	    "-printPanel" = NSPrintOperation;
	    "-runOperation" = NSPrintOperation;
	    "-runOperationModalForWindow:delegate:didRunSelector:contextInfo:" = NSPrintOperation;
	    "-setAccessoryView:" = NSPrintOperation;
	    "-setCanSpawnSeparateThread:" = NSPrintOperation;
	    "-setJobStyleHint:" = NSPrintOperation;
	    "-setPageOrder:" = NSPrintOperation;
	    "-setPrintInfo:" = NSPrintOperation;
	    "-setPrintPanel:" = NSPrintOperation;
	    "-setShowPanels:" = NSPrintOperation;
	    "-setShowsPrintPanel:" = NSPrintOperation;
	    "-setShowsProgressPanel:" = NSPrintOperation;
	    "-showPanels" = NSPrintOperation;
	    "-showsPrintPanel" = NSPrintOperation;
	    "-showsProgressPanel" = NSPrintOperation;
	    "-view" = NSPrintOperation;
	};
	"NSPrintOperation(Private)" = {
	    "-initWithView:insideRect:toData:printInfo:" = NSPrintOperation;
	};
	NSPrintPanel = {
	    "+printPanel" = NSPrintPanel;
	    "-accessoryControllers" = NSPrintPanel;
	    "-accessoryView" = NSPrintPanel;
	    "-addAccessoryController:" = NSPrintPanel;
	    "-beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:" = NSPrintPanel;
	    "-defaultButtonTitle" = NSPrintPanel;
	    "-finalWritePrintInfo" = NSPrintPanel;
	    "-helpAnchor" = NSPrintPanel;
	    "-jobStyleHint" = NSPrintPanel;
	    "-options" = NSPrintPanel;
	    "-pickedAllPages:" = NSPrintPanel;
	    "-pickedButton:" = NSPrintPanel;
	    "-pickedLayoutList:" = NSPrintPanel;
	    "-printInfo" = NSPrintPanel;
	    "-removeAccessoryController:" = NSPrintPanel;
	    "-runModal" = NSPrintPanel;
	    "-runModalWithPrintInfo:" = NSPrintPanel;
	    "-setAccessoryView:" = NSPrintPanel;
	    "-setDefaultButtonTitle:" = NSPrintPanel;
	    "-setHelpAnchor:" = NSPrintPanel;
	    "-setJobStyleHint:" = NSPrintPanel;
	    "-setOptions:" = NSPrintPanel;
	    "-updateFromPrintInfo" = NSPrintPanel;
	};
	"NSPrintPanel(Private)" = {
	    "-_getSavePath" = NSPrintPanel;
	    "-_setStatusStringValue:" = NSPrintPanel;
	};
	NSPrinter = {
	    "+printerNames" = NSPrinter;
	    "+printerTypes" = NSPrinter;
	    "+printerWithName:" = NSPrinter;
	    "+printerWithType:" = NSPrinter;
	    "-acceptsBinary" = NSPrinter;
	    "-booleanForKey:inTable:" = NSPrinter;
	    "-deviceDescription" = NSPrinter;
	    "-encodeWithCoder:" = NSPrinter;
	    "-floatForKey:inTable:" = NSPrinter;
	    "-host" = NSPrinter;
	    "-imageRectForPaper:" = NSPrinter;
	    "-initWithCoder:" = NSPrinter;
	    "-intForKey:inTable:" = NSPrinter;
	    "-isColor" = NSPrinter;
	    "-isFontAvailable:" = NSPrinter;
	    "-isKey:inTable:" = NSPrinter;
	    "-isOutputStackInReverseOrder" = NSPrinter;
	    "-languageLevel" = NSPrinter;
	    "-name" = NSPrinter;
	    "-note" = NSPrinter;
	    "-pageSizeForPaper:" = NSPrinter;
	    "-rectForKey:inTable:" = NSPrinter;
	    "-sizeForKey:inTable:" = NSPrinter;
	    "-statusForTable:" = NSPrinter;
	    "-stringForKey:inTable:" = NSPrinter;
	    "-stringListForKey:inTable:" = NSPrinter;
	    "-type" = NSPrinter;
	};
	"NSPrinter(PPDParsing)" = {
	    "-parsePPDAtPath:" = NSPrinter;
	};
	"NSPrinter(Private)" = {
	    "-initWithName:withType:withHost:withNote:" = NSPrinter;
	};
	NSProgressIndicator = {
	    "-animate:" = NSProgressIndicator;
	    "-animationDelay" = NSProgressIndicator;
	    "-controlSize" = NSProgressIndicator;
	    "-controlTint" = NSProgressIndicator;
	    "-doubleValue" = NSProgressIndicator;
	    "-incrementBy:" = NSProgressIndicator;
	    "-isBezeled" = NSProgressIndicator;
	    "-isDisplayedWhenStopped" = NSProgressIndicator;
	    "-isIndeterminate" = NSProgressIndicator;
	    "-maxValue" = NSProgressIndicator;
	    "-minValue" = NSProgressIndicator;
	    "-setAnimationDelay:" = NSProgressIndicator;
	    "-setBezeled:" = NSProgressIndicator;
	    "-setControlSize:" = NSProgressIndicator;
	    "-setControlTint:" = NSProgressIndicator;
	    "-setDisplayedWhenStopped:" = NSProgressIndicator;
	    "-setDoubleValue:" = NSProgressIndicator;
	    "-setIndeterminate:" = NSProgressIndicator;
	    "-setMaxValue:" = NSProgressIndicator;
	    "-setMinValue:" = NSProgressIndicator;
	    "-setStyle:" = NSProgressIndicator;
	    "-setUsesThreadedAnimation:" = NSProgressIndicator;
	    "-sizeToFit" = NSProgressIndicator;
	    "-startAnimation:" = NSProgressIndicator;
	    "-stopAnimation:" = NSProgressIndicator;
	    "-style" = NSProgressIndicator;
	    "-usesThreadedAnimation" = NSProgressIndicator;
	};
	"NSProgressIndicator(GNUstepExtensions)" = {
	    "-isVertical" = NSProgressIndicator;
	    "-setVertical:" = NSProgressIndicator;
	};
	NSResponder = {
	    "-acceptsFirstResponder" = NSResponder;
	    "-becomeFirstResponder" = NSResponder;
	    "-doCommandBySelector:" = NSResponder;
	    "-encodeWithCoder:" = NSResponder;
	    "-flagsChanged:" = NSResponder;
	    "-flushBufferedKeyEvents" = NSResponder;
	    "-helpRequested:" = NSResponder;
	    "-initWithCoder:" = NSResponder;
	    "-insertText:" = NSResponder;
	    "-interfaceStyle" = NSResponder;
	    "-interpretKeyEvents:" = NSResponder;
	    "-keyDown:" = NSResponder;
	    "-keyUp:" = NSResponder;
	    "-menu" = NSResponder;
	    "-mouseDown:" = NSResponder;
	    "-mouseDragged:" = NSResponder;
	    "-mouseEntered:" = NSResponder;
	    "-mouseExited:" = NSResponder;
	    "-mouseMoved:" = NSResponder;
	    "-mouseUp:" = NSResponder;
	    "-nextResponder" = NSResponder;
	    "-noResponderFor:" = NSResponder;
	    "-otherMouseDown:" = NSResponder;
	    "-otherMouseDragged:" = NSResponder;
	    "-otherMouseUp:" = NSResponder;
	    "-performKeyEquivalent:" = NSResponder;
	    "-performMnemonic:" = NSResponder;
	    "-presentError:" = NSResponder;
	    "-presentError:modalForWindow:delegate:didPresentSelector:contextInfo:" = NSResponder;
	    "-resignFirstResponder" = NSResponder;
	    "-rightMouseDown:" = NSResponder;
	    "-rightMouseDragged:" = NSResponder;
	    "-rightMouseUp:" = NSResponder;
	    "-scrollWheel:" = NSResponder;
	    "-setInterfaceStyle:" = NSResponder;
	    "-setMenu:" = NSResponder;
	    "-setNextResponder:" = NSResponder;
	    "-shouldBeTreatedAsInkEvent:" = NSResponder;
	    "-tryToPerform:with:" = NSResponder;
	    "-undoManager" = NSResponder;
	    "-validRequestorForSendType:returnType:" = NSResponder;
	    "-willPresentError:" = NSResponder;
	};
	"NSResponder(OptionalActionMethods)" = {
	    "-cancelOperation:" = NSResponder;
	    "-capitalizeWord:" = NSResponder;
	    "-centerSelectionInVisibleArea:" = NSResponder;
	    "-changeCaseOfLetter:" = NSResponder;
	    "-complete:" = NSResponder;
	    "-deleteBackward:" = NSResponder;
	    "-deleteBackwardByDecomposingPreviousCharacter:" = NSResponder;
	    "-deleteForward:" = NSResponder;
	    "-deleteToBeginningOfLine:" = NSResponder;
	    "-deleteToBeginningOfParagraph:" = NSResponder;
	    "-deleteToEndOfLine:" = NSResponder;
	    "-deleteToEndOfParagraph:" = NSResponder;
	    "-deleteToMark:" = NSResponder;
	    "-deleteWordBackward:" = NSResponder;
	    "-deleteWordForward:" = NSResponder;
	    "-indent:" = NSResponder;
	    "-insertBacktab:" = NSResponder;
	    "-insertContainerBreak:" = NSResponder;
	    "-insertLineBreak:" = NSResponder;
	    "-insertNewline:" = NSResponder;
	    "-insertNewlineIgnoringFieldEditor:" = NSResponder;
	    "-insertParagraphSeparator:" = NSResponder;
	    "-insertTab:" = NSResponder;
	    "-insertTabIgnoringFieldEditor:" = NSResponder;
	    "-lowercaseWord:" = NSResponder;
	    "-moveBackward:" = NSResponder;
	    "-moveBackwardAndModifySelection:" = NSResponder;
	    "-moveDown:" = NSResponder;
	    "-moveDownAndModifySelection:" = NSResponder;
	    "-moveForward:" = NSResponder;
	    "-moveForwardAndModifySelection:" = NSResponder;
	    "-moveLeft:" = NSResponder;
	    "-moveLeftAndModifySelection:" = NSResponder;
	    "-moveRight:" = NSResponder;
	    "-moveRightAndModifySelection:" = NSResponder;
	    "-moveToBeginningOfDocument:" = NSResponder;
	    "-moveToBeginningOfLine:" = NSResponder;
	    "-moveToBeginningOfParagraph:" = NSResponder;
	    "-moveToEndOfDocument:" = NSResponder;
	    "-moveToEndOfLine:" = NSResponder;
	    "-moveToEndOfParagraph:" = NSResponder;
	    "-moveUp:" = NSResponder;
	    "-moveUpAndModifySelection:" = NSResponder;
	    "-moveWordBackward:" = NSResponder;
	    "-moveWordBackwardAndModifySelection:" = NSResponder;
	    "-moveWordForward:" = NSResponder;
	    "-moveWordForwardAndModifySelection:" = NSResponder;
	    "-moveWordLeft:" = NSResponder;
	    "-moveWordLeftAndModifySelection:" = NSResponder;
	    "-moveWordRight:" = NSResponder;
	    "-moveWordRightAndModifySelection:" = NSResponder;
	    "-pageDown:" = NSResponder;
	    "-pageUp:" = NSResponder;
	    "-scrollLineDown:" = NSResponder;
	    "-scrollLineUp:" = NSResponder;
	    "-scrollPageDown:" = NSResponder;
	    "-scrollPageUp:" = NSResponder;
	    "-scrollToBeginningOfDocument:" = NSResponder;
	    "-scrollToEndOfDocument:" = NSResponder;
	    "-selectAll:" = NSResponder;
	    "-selectLine:" = NSResponder;
	    "-selectParagraph:" = NSResponder;
	    "-selectToMark:" = NSResponder;
	    "-selectWord:" = NSResponder;
	    "-setMark:" = NSResponder;
	    "-showContextHelp:" = NSResponder;
	    "-swapWithMark:" = NSResponder;
	    "-tabletPoint:" = NSResponder;
	    "-tabletProximity:" = NSResponder;
	    "-transpose:" = NSResponder;
	    "-transposeWords:" = NSResponder;
	    "-uppercaseWord:" = NSResponder;
	    "-yank:" = NSResponder;
	};
	NSRuleEditor = {
	    "-addRow:" = NSRuleEditor;
	    "-canRemoveAllRows" = NSRuleEditor;
	    "-criteriaForRow:" = NSRuleEditor;
	    "-criteriaKeyPath" = NSRuleEditor;
	    "-delegate" = NSRuleEditor;
	    "-displayValuesForRow:" = NSRuleEditor;
	    "-displayValuesKeyPath" = NSRuleEditor;
	    "-formattingDictionary" = NSRuleEditor;
	    "-formattingStringsFilename" = NSRuleEditor;
	    "-insertRowAtIndex:withType:asSubrowOfRow:animate:" = NSRuleEditor;
	    "-isEditable" = NSRuleEditor;
	    "-nestingMode" = NSRuleEditor;
	    "-numberOfRows" = NSRuleEditor;
	    "-parentRowForRow:" = NSRuleEditor;
	    "-predicate" = NSRuleEditor;
	    "-predicateForRow:" = NSRuleEditor;
	    "-reloadCriteria" = NSRuleEditor;
	    "-reloadPredicate" = NSRuleEditor;
	    "-removeRowAtIndex:" = NSRuleEditor;
	    "-removeRowsAtIndexes:includeSubrows:" = NSRuleEditor;
	    "-rowClass" = NSRuleEditor;
	    "-rowForDisplayValue:" = NSRuleEditor;
	    "-rowHeight" = NSRuleEditor;
	    "-rowTypeForRow:" = NSRuleEditor;
	    "-rowTypeKeyPath" = NSRuleEditor;
	    "-selectRowIndexes:byExtendingSelection:" = NSRuleEditor;
	    "-selectedRowIndexes" = NSRuleEditor;
	    "-setCanRemoveAllRows:" = NSRuleEditor;
	    "-setCriteria:andDisplayValues:forRowAtIndex:" = NSRuleEditor;
	    "-setCriteriaKeyPath:" = NSRuleEditor;
	    "-setDelegate:" = NSRuleEditor;
	    "-setDisplayValuesKeyPath:" = NSRuleEditor;
	    "-setEditable:" = NSRuleEditor;
	    "-setFormattingDictionary:" = NSRuleEditor;
	    "-setFormattingStringsFilename:" = NSRuleEditor;
	    "-setNestingMode:" = NSRuleEditor;
	    "-setRowClass:" = NSRuleEditor;
	    "-setRowHeight:" = NSRuleEditor;
	    "-setRowTypeKeyPath:" = NSRuleEditor;
	    "-setSubrowsKeyPath:" = NSRuleEditor;
	    "-subrowIndexesForRow:" = NSRuleEditor;
	    "-subrowsKeyPath" = NSRuleEditor;
	};
	NSRulerMarker = {
	    "-drawRect:" = NSRulerMarker;
	    "-image" = NSRulerMarker;
	    "-imageOrigin" = NSRulerMarker;
	    "-imageRectInRuler" = NSRulerMarker;
	    "-initWithRulerView:markerLocation:image:imageOrigin:" = NSRulerMarker;
	    "-isDragging" = NSRulerMarker;
	    "-isMovable" = NSRulerMarker;
	    "-isRemovable" = NSRulerMarker;
	    "-markerLocation" = NSRulerMarker;
	    "-representedObject" = NSRulerMarker;
	    "-ruler" = NSRulerMarker;
	    "-setImage:" = NSRulerMarker;
	    "-setImageOrigin:" = NSRulerMarker;
	    "-setMarkerLocation:" = NSRulerMarker;
	    "-setMovable:" = NSRulerMarker;
	    "-setRemovable:" = NSRulerMarker;
	    "-setRepresentedObject:" = NSRulerMarker;
	    "-thicknessRequiredInRuler" = NSRulerMarker;
	    "-trackMouse:adding:" = NSRulerMarker;
	};
	NSSavePanel = {
	    "+savePanel" = NSSavePanel;
	    "-URL" = NSSavePanel;
	    "-accessoryView" = NSSavePanel;
	    "-allowedFileTypes" = NSSavePanel;
	    "-allowsOtherFileTypes" = NSSavePanel;
	    "-beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:" = NSSavePanel;
	    "-beginSheetModalForWindow:completionHandler:" = NSSavePanel;
	    "-beginWithCompletionHandler:" = NSSavePanel;
	    "-canCreateDirectories" = NSSavePanel;
	    "-canSelectHiddenExtension" = NSSavePanel;
	    "-cancel:" = NSSavePanel;
	    "-directory" = NSSavePanel;
	    "-directoryURL" = NSSavePanel;
	    "-filename" = NSSavePanel;
	    "-isExpanded" = NSSavePanel;
	    "-isExtensionHidden" = NSSavePanel;
	    "-message" = NSSavePanel;
	    "-nameFieldLabel" = NSSavePanel;
	    "-nameFieldStringValue" = NSSavePanel;
	    "-ok:" = NSSavePanel;
	    "-prompt" = NSSavePanel;
	    "-requiredFileType" = NSSavePanel;
	    "-runModal" = NSSavePanel;
	    "-runModalForDirectory:file:" = NSSavePanel;
	    "-runModalForDirectory:file:relativeToWindow:" = NSSavePanel;
	    "-selectText:" = NSSavePanel;
	    "-setAccessoryView:" = NSSavePanel;
	    "-setAllowedFileTypes:" = NSSavePanel;
	    "-setAllowsOtherFileTypes:" = NSSavePanel;
	    "-setCanCreateDirectories:" = NSSavePanel;
	    "-setCanSelectHiddenExtension:" = NSSavePanel;
	    "-setDirectory:" = NSSavePanel;
	    "-setDirectoryURL:" = NSSavePanel;
	    "-setExtensionHidden:" = NSSavePanel;
	    "-setMessage:" = NSSavePanel;
	    "-setNameFieldLabel:" = NSSavePanel;
	    "-setNameFieldStringValue:" = NSSavePanel;
	    "-setPrompt:" = NSSavePanel;
	    "-setRequiredFileType:" = NSSavePanel;
	    "-setShowsHiddenFiles:" = NSSavePanel;
	    "-setTitle:" = NSSavePanel;
	    "-setTreatsFilePackagesAsDirectories:" = NSSavePanel;
	    "-showsHiddenFiles" = NSSavePanel;
	    "-title" = NSSavePanel;
	    "-treatsFilePackagesAsDirectories" = NSSavePanel;
	    "-validateVisibleColumns" = NSSavePanel;
	};
	NSScreen = {
	    "+deepestScreen" = NSScreen;
	    "+mainScreen" = NSScreen;
	    "+resetScreens" = NSScreen;
	    "+screens" = NSScreen;
	    "-backingScaleFactor" = NSScreen;
	    "-depth" = NSScreen;
	    "-deviceDescription" = NSScreen;
	    "-frame" = NSScreen;
	    "-screenNumber" = NSScreen;
	    "-supportedWindowDepths" = NSScreen;
	    "-userSpaceScaleFactor" = NSScreen;
	    "-visibleFrame" = NSScreen;
	};
	NSScrollView = {
	    "+contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:" = NSScrollView;
	    "+frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:" = NSScrollView;
	    "+rulerViewClass" = NSScrollView;
	    "+setRulerViewClass:" = NSScrollView;
	    "-allowsMagnification" = NSScrollView;
	    "-autohidesScrollers" = NSScrollView;
	    "-automaticallyAdjustsContentInsets" = NSScrollView;
	    "-backgroundColor" = NSScrollView;
	    "-borderType" = NSScrollView;
	    "-contentInsets" = NSScrollView;
	    "-contentSize" = NSScrollView;
	    "-contentView" = NSScrollView;
	    "-documentCursor" = NSScrollView;
	    "-documentView" = NSScrollView;
	    "-documentVisibleRect" = NSScrollView;
	    "-drawsBackground" = NSScrollView;
	    "-flashScrollers" = NSScrollView;
	    "-hasHorizontalRuler" = NSScrollView;
	    "-hasHorizontalScroller" = NSScrollView;
	    "-hasVerticalRuler" = NSScrollView;
	    "-hasVerticalScroller" = NSScrollView;
	    "-horizontalLineScroll" = NSScrollView;
	    "-horizontalPageScroll" = NSScrollView;
	    "-horizontalRulerView" = NSScrollView;
	    "-horizontalScrollElasticity" = NSScrollView;
	    "-horizontalScroller" = NSScrollView;
	    "-lineScroll" = NSScrollView;
	    "-pageScroll" = NSScrollView;
	    "-reflectScrolledClipView:" = NSScrollView;
	    "-rulersVisible" = NSScrollView;
	    "-scrollerInsets" = NSScrollView;
	    "-scrollerKnobStyle" = NSScrollView;
	    "-scrollerStyle" = NSScrollView;
	    "-scrollsDynamically" = NSScrollView;
	    "-setAllowsMagnification:" = NSScrollView;
	    "-setAutohidesScrollers:" = NSScrollView;
	    "-setAutomaticallyAdjustsContentInsets:" = NSScrollView;
	    "-setBackgroundColor:" = NSScrollView;
	    "-setBorderType:" = NSScrollView;
	    "-setContentInsets:" = NSScrollView;
	    "-setContentView:" = NSScrollView;
	    "-setDocumentCursor:" = NSScrollView;
	    "-setDocumentView:" = NSScrollView;
	    "-setDrawsBackground:" = NSScrollView;
	    "-setHasHorizontalRuler:" = NSScrollView;
	    "-setHasHorizontalScroller:" = NSScrollView;
	    "-setHasVerticalRuler:" = NSScrollView;
	    "-setHasVerticalScroller:" = NSScrollView;
	    "-setHorizontalLineScroll:" = NSScrollView;
	    "-setHorizontalPageScroll:" = NSScrollView;
	    "-setHorizontalRulerView:" = NSScrollView;
	    "-setHorizontalScrollElasticity:" = NSScrollView;
	    "-setHorizontalScroller:" = NSScrollView;
	    "-setLineScroll:" = NSScrollView;
	    "-setPageScroll:" = NSScrollView;
	    "-setRulersVisible:" = NSScrollView;
	    "-setScrollerInsets:" = NSScrollView;
	    "-setScrollerKnobStyle:" = NSScrollView;
	    "-setScrollerStyle:" = NSScrollView;
	    "-setScrollsDynamically:" = NSScrollView;
	    "-setVerticalLineScroll:" = NSScrollView;
	    "-setVerticalPageScroll:" = NSScrollView;
	    "-setVerticalRulerView:" = NSScrollView;
	    "-setVerticalScrollElasticity:" = NSScrollView;
	    "-setVerticalScroller:" = NSScrollView;
	    "-tile" = NSScrollView;
	    "-verticalLineScroll" = NSScrollView;
	    "-verticalPageScroll" = NSScrollView;
	    "-verticalRulerView" = NSScrollView;
	    "-verticalScrollElasticity" = NSScrollView;
	    "-verticalScroller" = NSScrollView;
	};
	NSScroller = {
	    "+preferredScrollerStyle" = NSScroller;
	    "+scrollerWidth" = NSScroller;
	    "+scrollerWidthForControlSize:" = NSScroller;
	    "-arrowsPosition" = NSScroller;
	    "-checkSpaceForParts" = NSScroller;
	    "-controlSize" = NSScroller;
	    "-controlTint" = NSScroller;
	    "-drawArrow:highlight:" = NSScroller;
	    "-drawKnob" = NSScroller;
	    "-drawKnobSlot" = NSScroller;
	    "-drawKnobSlotInRect:highlight:" = NSScroller;
	    "-drawParts" = NSScroller;
	    "-flashScroller" = NSScroller;
	    "-highlight:" = NSScroller;
	    "-hitPart" = NSScroller;
	    "-knobProportion" = NSScroller;
	    "-knobStyle" = NSScroller;
	    "-rectForPart:" = NSScroller;
	    "-scrollerStyle" = NSScroller;
	    "-setArrowsPosition:" = NSScroller;
	    "-setControlSize:" = NSScroller;
	    "-setControlTint:" = NSScroller;
	    "-setFloatValue:knobProportion:" = NSScroller;
	    "-setKnobProportion:" = NSScroller;
	    "-setKnobStyle:" = NSScroller;
	    "-setScrollerStyle:" = NSScroller;
	    "-testPart:" = NSScroller;
	    "-trackKnob:" = NSScroller;
	    "-trackScrollButtons:" = NSScroller;
	    "-usableParts" = NSScroller;
	};
	NSSecureTextField = {
	    "-echosBullets" = NSSecureTextField;
	    "-setEchosBullets:" = NSSecureTextField;
	};
	NSSecureTextFieldCell = {
	    "-echosBullets" = NSSecureTextField;
	    "-setEchosBullets:" = NSSecureTextField;
	};
	NSSelection = {
	    "+allSelection" = NSSelection;
	    "+currentSelection" = NSSelection;
	    "+emptySelection" = NSSelection;
	    "+selectionWithDescriptionData:" = NSSelection;
	    "-descriptionData" = NSSelection;
	    "-initWithDescriptionData:" = NSSelection;
	    "-initWithPasteboard:" = NSSelection;
	    "-isWellKnownSelection" = NSSelection;
	    "-writeToPasteboard:" = NSSelection;
	};
	NSSlider = {
	    "-acceptsFirstMouse:" = NSSlider;
	    "-allowsTickMarkValuesOnly" = NSSlider;
	    "-altIncrementValue" = NSSlider;
	    "-closestTickMarkValueToValue:" = NSSlider;
	    "-image" = NSSlider;
	    "-indexOfTickMarkAtPoint:" = NSSlider;
	    "-isVertical" = NSSlider;
	    "-knobThickness" = NSSlider;
	    "-maxValue" = NSSlider;
	    "-minValue" = NSSlider;
	    "-numberOfTickMarks" = NSSlider;
	    "-rectOfTickMarkAtIndex:" = NSSlider;
	    "-setAllowsTickMarkValuesOnly:" = NSSlider;
	    "-setAltIncrementValue:" = NSSlider;
	    "-setImage:" = NSSlider;
	    "-setKnobThickness:" = NSSlider;
	    "-setMaxValue:" = NSSlider;
	    "-setMinValue:" = NSSlider;
	    "-setNumberOfTickMarks:" = NSSlider;
	    "-setTickMarkPosition:" = NSSlider;
	    "-setTitle:" = NSSlider;
	    "-setTitleCell:" = NSSlider;
	    "-setTitleColor:" = NSSlider;
	    "-setTitleFont:" = NSSlider;
	    "-tickMarkPosition" = NSSlider;
	    "-tickMarkValueAtIndex:" = NSSlider;
	    "-title" = NSSlider;
	    "-titleCell" = NSSlider;
	    "-titleColor" = NSSlider;
	    "-titleFont" = NSSlider;
	};
	NSSliderCell = {
	    "+prefersTrackingUntilMouseUp" = NSSliderCell;
	    "-allowsTickMarkValuesOnly" = NSSliderCell;
	    "-altIncrementValue" = NSSliderCell;
	    "-closestTickMarkValueToValue:" = NSSliderCell;
	    "-drawBarInside:flipped:" = NSSliderCell;
	    "-drawKnob" = NSSliderCell;
	    "-drawKnob:" = NSSliderCell;
	    "-indexOfTickMarkAtPoint:" = NSSliderCell;
	    "-isVertical" = NSSliderCell;
	    "-knobRectFlipped:" = NSSliderCell;
	    "-knobThickness" = NSSliderCell;
	    "-maxValue" = NSSliderCell;
	    "-minValue" = NSSliderCell;
	    "-numberOfTickMarks" = NSSliderCell;
	    "-rectOfTickMarkAtIndex:" = NSSliderCell;
	    "-setAllowsTickMarkValuesOnly:" = NSSliderCell;
	    "-setAltIncrementValue:" = NSSliderCell;
	    "-setKnobThickness:" = NSSliderCell;
	    "-setMaxValue:" = NSSliderCell;
	    "-setMinValue:" = NSSliderCell;
	    "-setNumberOfTickMarks:" = NSSliderCell;
	    "-setSliderType:" = NSSliderCell;
	    "-setTickMarkPosition:" = NSSliderCell;
	    "-setTitle:" = NSSliderCell;
	    "-setTitleCell:" = NSSliderCell;
	    "-setTitleColor:" = NSSliderCell;
	    "-setTitleFont:" = NSSliderCell;
	    "-sliderType" = NSSliderCell;
	    "-tickMarkPosition" = NSSliderCell;
	    "-tickMarkValueAtIndex:" = NSSliderCell;
	    "-title" = NSSliderCell;
	    "-titleCell" = NSSliderCell;
	    "-titleColor" = NSSliderCell;
	    "-titleFont" = NSSliderCell;
	    "-trackRect" = NSSliderCell;
	};
	NSSound = {
	    "+canInitWithPasteboard:" = NSSound;
	    "+soundNamed:" = NSSound;
	    "+soundUnfilteredFileTypes" = NSSound;
	    "+soundUnfilteredPasteboardTypes" = NSSound;
	    "+soundUnfilteredTypes" = NSSound;
	    "-channelMapping" = NSSound;
	    "-currentTime" = NSSound;
	    "-delegate" = NSSound;
	    "-duration" = NSSound;
	    "-initWithContentsOfFile:byReference:" = NSSound;
	    "-initWithContentsOfURL:byReference:" = NSSound;
	    "-initWithData:" = NSSound;
	    "-initWithPasteboard:" = NSSound;
	    "-isPlaying" = NSSound;
	    "-loops" = NSSound;
	    "-name" = NSSound;
	    "-pause" = NSSound;
	    "-play" = NSSound;
	    "-playbackDeviceIdentifier" = NSSound;
	    "-resume" = NSSound;
	    "-setChannelMapping:" = NSSound;
	    "-setCurrentTime:" = NSSound;
	    "-setDelegate:" = NSSound;
	    "-setLoops:" = NSSound;
	    "-setName:" = NSSound;
	    "-setPlaybackDeviceIdentifier:" = NSSound;
	    "-setVolume:" = NSSound;
	    "-stop" = NSSound;
	    "-volume" = NSSound;
	    "-writeToPasteboard:" = NSSound;
	};
	NSSpeechSynthesizer = {
	    "+attributesForVoice:" = NSSpeechSynthesizer;
	    "+availableVoices" = NSSpeechSynthesizer;
	    "+defaultVoice" = NSSpeechSynthesizer;
	    "+isAnyApplicationSpeaking" = NSSpeechSynthesizer;
	    "-addSpeechDictionary:" = NSSpeechSynthesizer;
	    "-continueSpeaking" = NSSpeechSynthesizer;
	    "-delegate" = NSSpeechSynthesizer;
	    "-initWithVoice:" = NSSpeechSynthesizer;
	    "-isSpeaking" = NSSpeechSynthesizer;
	    "-objectForProperty:error:" = NSSpeechSynthesizer;
	    "-pauseSpeakingAtBoundary:" = NSSpeechSynthesizer;
	    "-phonemesFromText:" = NSSpeechSynthesizer;
	    "-rate" = NSSpeechSynthesizer;
	    "-setDelegate:" = NSSpeechSynthesizer;
	    "-setObject:forProperty:error:" = NSSpeechSynthesizer;
	    "-setRate:" = NSSpeechSynthesizer;
	    "-setUsesFeebackWindow:" = NSSpeechSynthesizer;
	    "-setVoice:" = NSSpeechSynthesizer;
	    "-setVolume:" = NSSpeechSynthesizer;
	    "-startSpeakingString:" = NSSpeechSynthesizer;
	    "-startSpeakingString:toURL:" = NSSpeechSynthesizer;
	    "-stopSpeaking" = NSSpeechSynthesizer;
	    "-stopSpeakingAtBoundary:" = NSSpeechSynthesizer;
	    "-usesFeebackWindow" = NSSpeechSynthesizer;
	    "-voice" = NSSpeechSynthesizer;
	    "-volume" = NSSpeechSynthesizer;
	};
	NSSpellChecker = {
	    "+isAutomaticDashSubstitutionEnabled" = NSSpellChecker;
	    "+isAutomaticQuoteSubstitutionEnabled" = NSSpellChecker;
	    "+isAutomaticTextReplacementEnabled" = NSSpellChecker;
	    "+sharedSpellChecker" = NSSpellChecker;
	    "+sharedSpellCheckerExists" = NSSpellChecker;
	    "+uniqueSpellDocumentTag" = NSSpellChecker;
	    "-accessoryView" = NSSpellChecker;
	    "-checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:" = NSSpellChecker;
	    "-checkSpellingOfString:startingAt:" = NSSpellChecker;
	    "-checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:" = NSSpellChecker;
	    "-closeSpellDocumentWithTag:" = NSSpellChecker;
	    "-countWordsInString:language:" = NSSpellChecker;
	    "-guessesForWord:" = NSSpellChecker;
	    "-ignoreWord:inSpellDocumentWithTag:" = NSSpellChecker;
	    "-ignoredWordsInSpellDocumentWithTag:" = NSSpellChecker;
	    "-language" = NSSpellChecker;
	    "-setAccessoryView:" = NSSpellChecker;
	    "-setIgnoredWords:inSpellDocumentWithTag:" = NSSpellChecker;
	    "-setLanguage:" = NSSpellChecker;
	    "-setWordFieldStringValue:" = NSSpellChecker;
	    "-spellingPanel" = NSSpellChecker;
	    "-updateSpellingPanelWithMisspelledWord:" = NSSpellChecker;
	};
	NSSplitView = {
	    "-adjustSubviews" = NSSplitView;
	    "-autosaveName" = NSSplitView;
	    "-delegate" = NSSplitView;
	    "-dividerColor" = NSSplitView;
	    "-dividerStyle" = NSSplitView;
	    "-dividerThickness" = NSSplitView;
	    "-drawDividerInRect:" = NSSplitView;
	    "-isPaneSplitter" = NSSplitView;
	    "-isSubviewCollapsed:" = NSSplitView;
	    "-isVertical" = NSSplitView;
	    "-maxPossiblePositionOfDividerAtIndex:" = NSSplitView;
	    "-minPossiblePositionOfDividerAtIndex:" = NSSplitView;
	    "-setAutosaveName:" = NSSplitView;
	    "-setDelegate:" = NSSplitView;
	    "-setDividerStyle:" = NSSplitView;
	    "-setIsPaneSplitter:" = NSSplitView;
	    "-setPosition:ofDividerAtIndex:" = NSSplitView;
	    "-setVertical:" = NSSplitView;
	};
	"NSSplitView(GNUstepExtra)" = {
	    "-backgroundColor" = NSSplitView;
	    "-dimpleImage" = NSSplitView;
	    "-draggedBarWidth" = NSSplitView;
	    "-setBackgroundColor:" = NSSplitView;
	    "-setDimpleImage:resetDividerThickness:" = NSSplitView;
	    "-setDividerColor:" = NSSplitView;
	    "-setDraggedBarWidth:" = NSSplitView;
	};
	NSStepper = {
	    "-autorepeat" = NSStepper;
	    "-increment" = NSStepper;
	    "-maxValue" = NSStepper;
	    "-minValue" = NSStepper;
	    "-setAutorepeat:" = NSStepper;
	    "-setIncrement:" = NSStepper;
	    "-setMaxValue:" = NSStepper;
	    "-setMinValue:" = NSStepper;
	    "-setValueWraps:" = NSStepper;
	    "-valueWraps" = NSStepper;
	};
	NSStepperCell = {
	    "-autorepeat" = NSStepperCell;
	    "-increment" = NSStepperCell;
	    "-maxValue" = NSStepperCell;
	    "-minValue" = NSStepperCell;
	    "-setAutorepeat:" = NSStepperCell;
	    "-setIncrement:" = NSStepperCell;
	    "-setMaxValue:" = NSStepperCell;
	    "-setMinValue:" = NSStepperCell;
	    "-setValueWraps:" = NSStepperCell;
	    "-valueWraps" = NSStepperCell;
	};
	"NSString(NSStringDrawing)" = {
	    "-boundingRectWithSize:options:attributes:" = NSStringDrawing;
	    "-drawAtPoint:withAttributes:" = NSStringDrawing;
	    "-drawInRect:withAttributes:" = NSStringDrawing;
	    "-drawWithRect:options:attributes:" = NSStringDrawing;
	    "-sizeWithAttributes:" = NSStringDrawing;
	};
	NSTabView = {
	    "-addTabViewItem:" = NSTabView;
	    "-allowsTruncatedLabels" = NSTabView;
	    "-contentRect" = NSTabView;
	    "-controlSize" = NSTabView;
	    "-controlTint" = NSTabView;
	    "-delegate" = NSTabView;
	    "-drawsBackground" = NSTabView;
	    "-font" = NSTabView;
	    "-indexOfTabViewItem:" = NSTabView;
	    "-indexOfTabViewItemWithIdentifier:" = NSTabView;
	    "-insertTabViewItem:atIndex:" = NSTabView;
	    "-minimumSize" = NSTabView;
	    "-numberOfTabViewItems" = NSTabView;
	    "-removeTabViewItem:" = NSTabView;
	    "-selectFirstTabViewItem:" = NSTabView;
	    "-selectLastTabViewItem:" = NSTabView;
	    "-selectNextTabViewItem:" = NSTabView;
	    "-selectPreviousTabViewItem:" = NSTabView;
	    "-selectTabViewItem:" = NSTabView;
	    "-selectTabViewItemAtIndex:" = NSTabView;
	    "-selectTabViewItemWithIdentifier:" = NSTabView;
	    "-selectedTabViewItem" = NSTabView;
	    "-setAllowsTruncatedLabels:" = NSTabView;
	    "-setControlSize:" = NSTabView;
	    "-setControlTint:" = NSTabView;
	    "-setDelegate:" = NSTabView;
	    "-setDrawsBackground:" = NSTabView;
	    "-setFont:" = NSTabView;
	    "-setTabViewType:" = NSTabView;
	    "-tabViewItemAtIndex:" = NSTabView;
	    "-tabViewItemAtPoint:" = NSTabView;
	    "-tabViewItems" = NSTabView;
	    "-tabViewType" = NSTabView;
	    "-takeSelectedTabViewItemFromSender:" = NSTabView;
	};
	NSTabViewItem = {
	    "+tabViewItemWithViewController:" = NSTabViewItem;
	    "-color" = NSTabViewItem;
	    "-drawLabel:inRect:" = NSTabViewItem;
	    "-identifier" = NSTabViewItem;
	    "-initWithIdentifier:" = NSTabViewItem;
	    "-initialFirstResponder" = NSTabViewItem;
	    "-label" = NSTabViewItem;
	    "-setColor:" = NSTabViewItem;
	    "-setIdentifier:" = NSTabViewItem;
	    "-setInitialFirstResponder:" = NSTabViewItem;
	    "-setLabel:" = NSTabViewItem;
	    "-setToolTip:" = NSTabViewItem;
	    "-setView:" = NSTabViewItem;
	    "-setViewController:" = NSTabViewItem;
	    "-sizeOfLabel:" = NSTabViewItem;
	    "-tabState" = NSTabViewItem;
	    "-tabView" = NSTabViewItem;
	    "-toolTip" = NSTabViewItem;
	    "-view" = NSTabViewItem;
	    "-viewController" = NSTabViewItem;
	};
	"NSTabViewItem(GNUstep)" = {
	    "-_setTabState:" = NSTabViewItem;
	    "-_setTabView:" = NSTabViewItem;
	    "-_tabRect" = NSTabViewItem;
	    "-_truncatedLabel" = NSTabViewItem;
	};
	NSTableColumn = {
	    "-dataCell" = NSTableColumn;
	    "-dataCellForRow:" = NSTableColumn;
	    "-headerCell" = NSTableColumn;
	    "-headerToolTip" = NSTableColumn;
	    "-identifier" = NSTableColumn;
	    "-initWithIdentifier:" = NSTableColumn;
	    "-isEditable" = NSTableColumn;
	    "-isHidden" = NSTableColumn;
	    "-isResizable" = NSTableColumn;
	    "-maxWidth" = NSTableColumn;
	    "-minWidth" = NSTableColumn;
	    "-resizingMask" = NSTableColumn;
	    "-setDataCell:" = NSTableColumn;
	    "-setEditable:" = NSTableColumn;
	    "-setHeaderCell:" = NSTableColumn;
	    "-setHeaderToolTip:" = NSTableColumn;
	    "-setHidden:" = NSTableColumn;
	    "-setIdentifier:" = NSTableColumn;
	    "-setMaxWidth:" = NSTableColumn;
	    "-setMinWidth:" = NSTableColumn;
	    "-setResizable:" = NSTableColumn;
	    "-setResizingMask:" = NSTableColumn;
	    "-setSortDescriptorPrototype:" = NSTableColumn;
	    "-setTableView:" = NSTableColumn;
	    "-setTitle:" = NSTableColumn;
	    "-setWidth:" = NSTableColumn;
	    "-sizeToFit" = NSTableColumn;
	    "-sortDescriptorPrototype" = NSTableColumn;
	    "-tableView" = NSTableColumn;
	    "-title" = NSTableColumn;
	    "-width" = NSTableColumn;
	};
	NSTableHeaderCell = {
	    "-drawSortIndicatorWithFrame:inView:ascending:priority:" = NSTableHeaderCell;
	    "-sortIndicatorRectForBounds:" = NSTableHeaderCell;
	};
	NSTableHeaderView = {
	    "-columnAtPoint:" = NSTableHeaderView;
	    "-draggedColumn" = NSTableHeaderView;
	    "-draggedDistance" = NSTableHeaderView;
	    "-headerRectOfColumn:" = NSTableHeaderView;
	    "-resizedColumn" = NSTableHeaderView;
	    "-setTableView:" = NSTableHeaderView;
	    "-tableView" = NSTableHeaderView;
	};
	NSTableView = {
	    "-addTableColumn:" = NSTableView;
	    "-allowsColumnReordering" = NSTableView;
	    "-allowsColumnResizing" = NSTableView;
	    "-allowsColumnSelection" = NSTableView;
	    "-allowsEmptySelection" = NSTableView;
	    "-allowsMultipleSelection" = NSTableView;
	    "-autoresizesAllColumnsToFit" = NSTableView;
	    "-autosaveName" = NSTableView;
	    "-autosaveTableColumns" = NSTableView;
	    "-backgroundColor" = NSTableView;
	    "-beginUpdates" = NSTableView;
	    "-canDragRowsWithIndexes:atPoint:" = NSTableView;
	    "-clickedColumn" = NSTableView;
	    "-clickedRow" = NSTableView;
	    "-columnAtPoint:" = NSTableView;
	    "-columnAutoresizingStyle" = NSTableView;
	    "-columnForView:" = NSTableView;
	    "-columnIndexesInRect:" = NSTableView;
	    "-columnWithIdentifier:" = NSTableView;
	    "-columnsInRect:" = NSTableView;
	    "-cornerView" = NSTableView;
	    "-dataSource" = NSTableView;
	    "-delegate" = NSTableView;
	    "-deselectAll:" = NSTableView;
	    "-deselectColumn:" = NSTableView;
	    "-deselectRow:" = NSTableView;
	    "-doubleAction" = NSTableView;
	    "-dragImageForRows:event:dragImageOffset:" = NSTableView;
	    "-dragImageForRowsWithIndexes:tableColumns:event:offset:" = NSTableView;
	    "-drawBackgroundInClipRect:" = NSTableView;
	    "-drawGridInClipRect:" = NSTableView;
	    "-drawRow:clipRect:" = NSTableView;
	    "-drawsGrid" = NSTableView;
	    "-editColumn:row:withEvent:select:" = NSTableView;
	    "-editedColumn" = NSTableView;
	    "-editedRow" = NSTableView;
	    "-endUpdates" = NSTableView;
	    "-frameOfCellAtColumn:row:" = NSTableView;
	    "-gridColor" = NSTableView;
	    "-gridStyleMask" = NSTableView;
	    "-headerView" = NSTableView;
	    "-highlightSelectionInClipRect:" = NSTableView;
	    "-highlightedTableColumn" = NSTableView;
	    "-indicatorImageInTableColumn:" = NSTableView;
	    "-insertRowsAtIndexes:withAnimation:" = NSTableView;
	    "-intercellSpacing" = NSTableView;
	    "-isColumnSelected:" = NSTableView;
	    "-isRowSelected:" = NSTableView;
	    "-makeViewWithIdentifier:owner:" = NSTableView;
	    "-moveColumn:toColumn:" = NSTableView;
	    "-noteHeightOfRowsWithIndexesChanged:" = NSTableView;
	    "-noteNumberOfRowsChanged" = NSTableView;
	    "-numberOfColumns" = NSTableView;
	    "-numberOfRows" = NSTableView;
	    "-numberOfSelectedColumns" = NSTableView;
	    "-numberOfSelectedRows" = NSTableView;
	    "-preparedCellAtColumn:row:" = NSTableView;
	    "-rectOfColumn:" = NSTableView;
	    "-rectOfRow:" = NSTableView;
	    "-registerNib:forIdentifier:" = NSTableView;
	    "-registeredNibsByIdentifier" = NSTableView;
	    "-reloadData" = NSTableView;
	    "-reloadDataForRowIndexes:columnIndexes:" = NSTableView;
	    "-removeRowsAtIndexes:withAnimation:" = NSTableView;
	    "-removeTableColumn:" = NSTableView;
	    "-rowAtPoint:" = NSTableView;
	    "-rowForView:" = NSTableView;
	    "-rowHeight" = NSTableView;
	    "-rowViewAtRow:makeIfNecessary:" = NSTableView;
	    "-rowsInRect:" = NSTableView;
	    "-scrollColumnToVisible:" = NSTableView;
	    "-scrollRowToVisible:" = NSTableView;
	    "-selectAll:" = NSTableView;
	    "-selectColumn:byExtendingSelection:" = NSTableView;
	    "-selectColumnIndexes:byExtendingSelection:" = NSTableView;
	    "-selectRow:byExtendingSelection:" = NSTableView;
	    "-selectRowIndexes:byExtendingSelection:" = NSTableView;
	    "-selectedColumn" = NSTableView;
	    "-selectedColumnEnumerator" = NSTableView;
	    "-selectedColumnIndexes" = NSTableView;
	    "-selectedRow" = NSTableView;
	    "-selectedRowEnumerator" = NSTableView;
	    "-selectedRowIndexes" = NSTableView;
	    "-selectionHighlightStyle" = NSTableView;
	    "-setAllowsColumnReordering:" = NSTableView;
	    "-setAllowsColumnResizing:" = NSTableView;
	    "-setAllowsColumnSelection:" = NSTableView;
	    "-setAllowsEmptySelection:" = NSTableView;
	    "-setAllowsMultipleSelection:" = NSTableView;
	    "-setAutoresizesAllColumnsToFit:" = NSTableView;
	    "-setAutosaveName:" = NSTableView;
	    "-setAutosaveTableColumns:" = NSTableView;
	    "-setBackgroundColor:" = NSTableView;
	    "-setColumnAutoresizingStyle:" = NSTableView;
	    "-setCornerView:" = NSTableView;
	    "-setDataSource:" = NSTableView;
	    "-setDelegate:" = NSTableView;
	    "-setDoubleAction:" = NSTableView;
	    "-setDraggingSourceOperationMask:forLocal:" = NSTableView;
	    "-setDrawsGrid:" = NSTableView;
	    "-setDropRow:dropOperation:" = NSTableView;
	    "-setGridColor:" = NSTableView;
	    "-setGridStyleMask:" = NSTableView;
	    "-setHeaderView:" = NSTableView;
	    "-setHighlightedTableColumn:" = NSTableView;
	    "-setIndicatorImage:inTableColumn:" = NSTableView;
	    "-setIntercellSpacing:" = NSTableView;
	    "-setRowHeight:" = NSTableView;
	    "-setSelectionHighlightStyle:" = NSTableView;
	    "-setSortDescriptors:" = NSTableView;
	    "-setUsesAlternatingRowBackgroundColors:" = NSTableView;
	    "-setVerticalMotionCanBeginDrag:" = NSTableView;
	    "-sizeLastColumnToFit" = NSTableView;
	    "-sortDescriptors" = NSTableView;
	    "-tableColumnWithIdentifier:" = NSTableView;
	    "-tableColumns" = NSTableView;
	    "-textDidBeginEditing:" = NSTableView;
	    "-textDidChange:" = NSTableView;
	    "-textDidEndEditing:" = NSTableView;
	    "-textShouldBeginEditing:" = NSTableView;
	    "-textShouldEndEditing:" = NSTableView;
	    "-tile" = NSTableView;
	    "-usesAlternatingRowBackgroundColors" = NSTableView;
	    "-verticalMotionCanBeginDrag" = NSTableView;
	    "-viewAtColumn:row:makeIfNecessary:" = NSTableView;
	};
	"NSTableView(GNUPrivate)" = {
	    "-_selectColumn:modifiers:" = NSTableView;
	    "-_sendDoubleActionForColumn:" = NSTableView;
	};
	NSText = {
	    "-RTFDFromRange:" = NSText;
	    "-RTFFromRange:" = NSText;
	    "-alignCenter:" = NSText;
	    "-alignLeft:" = NSText;
	    "-alignRight:" = NSText;
	    "-alignment" = NSText;
	    "-backgroundColor" = NSText;
	    "-changeFont:" = NSText;
	    "-changeSpelling:" = NSText;
	    "-checkSpelling:" = NSText;
	    "-copy:" = NSText;
	    "-copyFont:" = NSText;
	    "-copyRuler:" = NSText;
	    "-cut:" = NSText;
	    "-delegate" = NSText;
	    "-delete:" = NSText;
	    "-drawsBackground" = NSText;
	    "-font" = NSText;
	    "-ignoreSpelling:" = NSText;
	    "-importsGraphics" = NSText;
	    "-isEditable" = NSText;
	    "-isFieldEditor" = NSText;
	    "-isHorizontallyResizable" = NSText;
	    "-isRichText" = NSText;
	    "-isRulerVisible" = NSText;
	    "-isSelectable" = NSText;
	    "-isVerticallyResizable" = NSText;
	    "-maxSize" = NSText;
	    "-minSize" = NSText;
	    "-paste:" = NSText;
	    "-pasteFont:" = NSText;
	    "-pasteRuler:" = NSText;
	    "-readRTFDFromFile:" = NSText;
	    "-replaceCharactersInRange:withAttributedString:" = NSText;
	    "-replaceCharactersInRange:withRTF:" = NSText;
	    "-replaceCharactersInRange:withRTFD:" = NSText;
	    "-replaceCharactersInRange:withString:" = NSText;
	    "-replaceRange:withRTF:" = NSText;
	    "-replaceRange:withRTFD:" = NSText;
	    "-replaceRange:withString:" = NSText;
	    "-scrollRangeToVisible:" = NSText;
	    "-selectAll:" = NSText;
	    "-selectedRange" = NSText;
	    "-setAlignment:" = NSText;
	    "-setBackgroundColor:" = NSText;
	    "-setColor:ofRange:" = NSText;
	    "-setDelegate:" = NSText;
	    "-setDrawsBackground:" = NSText;
	    "-setEditable:" = NSText;
	    "-setFieldEditor:" = NSText;
	    "-setFont:" = NSText;
	    "-setFont:ofRange:" = NSText;
	    "-setFont:range:" = NSText;
	    "-setHorizontallyResizable:" = NSText;
	    "-setImportsGraphics:" = NSText;
	    "-setMaxSize:" = NSText;
	    "-setMinSize:" = NSText;
	    "-setRichText:" = NSText;
	    "-setSelectable:" = NSText;
	    "-setSelectedRange:" = NSText;
	    "-setString:" = NSText;
	    "-setText:" = NSText;
	    "-setText:range:" = NSText;
	    "-setTextColor:" = NSText;
	    "-setTextColor:range:" = NSText;
	    "-setUsesFontPanel:" = NSText;
	    "-setVerticallyResizable:" = NSText;
	    "-showGuessPanel:" = NSText;
	    "-sizeToFit" = NSText;
	    "-string" = NSText;
	    "-subscript:" = NSText;
	    "-superscript:" = NSText;
	    "-text" = NSText;
	    "-textColor" = NSText;
	    "-toggleRuler:" = NSText;
	    "-underline:" = NSText;
	    "-unscript:" = NSText;
	    "-usesFontPanel" = NSText;
	    "-writeRTFDToFile:atomically:" = NSText;
	};
	"NSText(GNUstepExtensions)" = {
	    "-textLength" = NSText;
	};
	NSTextAttachment = {
	    "-attachmentCell" = NSTextAttachment;
	    "-fileWrapper" = NSTextAttachment;
	    "-initWithFileWrapper:" = NSTextAttachment;
	    "-setAttachmentCell:" = NSTextAttachment;
	    "-setFileWrapper:" = NSTextAttachment;
	};
	NSTextContainer = {
	    "-containerSize" = NSTextContainer;
	    "-containsPoint:" = NSTextContainer;
	    "-heightTracksTextView" = NSTextContainer;
	    "-initWithContainerSize:" = NSTextContainer;
	    "-isSimpleRectangularTextContainer" = NSTextContainer;
	    "-layoutManager" = NSTextContainer;
	    "-lineFragmentPadding" = NSTextContainer;
	    "-lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:" = NSTextContainer;
	    "-replaceLayoutManager:" = NSTextContainer;
	    "-setContainerSize:" = NSTextContainer;
	    "-setHeightTracksTextView:" = NSTextContainer;
	    "-setLayoutManager:" = NSTextContainer;
	    "-setLineFragmentPadding:" = NSTextContainer;
	    "-setTextView:" = NSTextContainer;
	    "-setWidthTracksTextView:" = NSTextContainer;
	    "-textView" = NSTextContainer;
	    "-widthTracksTextView" = NSTextContainer;
	};
	NSTextField = {
	    "-acceptsFirstResponder" = NSTextField;
	    "-allowsEditingTextAttributes" = NSTextField;
	    "-backgroundColor" = NSTextField;
	    "-bezelStyle" = NSTextField;
	    "-delegate" = NSTextField;
	    "-drawsBackground" = NSTextField;
	    "-errorAction" = NSTextField;
	    "-importsGraphics" = NSTextField;
	    "-isBezeled" = NSTextField;
	    "-isBordered" = NSTextField;
	    "-isEditable" = NSTextField;
	    "-isSelectable" = NSTextField;
	    "-nextText" = NSTextField;
	    "-placeholderAttributedString" = NSTextField;
	    "-placeholderString" = NSTextField;
	    "-previousText" = NSTextField;
	    "-selectText:" = NSTextField;
	    "-setAllowsEditingTextAttributes:" = NSTextField;
	    "-setBackgroundColor:" = NSTextField;
	    "-setBezelStyle:" = NSTextField;
	    "-setBezeled:" = NSTextField;
	    "-setBordered:" = NSTextField;
	    "-setDelegate:" = NSTextField;
	    "-setDrawsBackground:" = NSTextField;
	    "-setEditable:" = NSTextField;
	    "-setErrorAction:" = NSTextField;
	    "-setImportsGraphics:" = NSTextField;
	    "-setNextText:" = NSTextField;
	    "-setPlaceholderAttributedString:" = NSTextField;
	    "-setPlaceholderString:" = NSTextField;
	    "-setPreviousText:" = NSTextField;
	    "-setSelectable:" = NSTextField;
	    "-setTextColor:" = NSTextField;
	    "-setTitleWithMnemonic:" = NSTextField;
	    "-textColor" = NSTextField;
	    "-textDidBeginEditing:" = NSTextField;
	    "-textDidChange:" = NSTextField;
	    "-textDidEndEditing:" = NSTextField;
	    "-textShouldBeginEditing:" = NSTextField;
	    "-textShouldEndEditing:" = NSTextField;
	};
	NSTextFieldCell = {
	    "-backgroundColor" = NSTextFieldCell;
	    "-bezelStyle" = NSTextFieldCell;
	    "-drawsBackground" = NSTextFieldCell;
	    "-placeholderAttributedString" = NSTextFieldCell;
	    "-placeholderString" = NSTextFieldCell;
	    "-setBackgroundColor:" = NSTextFieldCell;
	    "-setBezelStyle:" = NSTextFieldCell;
	    "-setDrawsBackground:" = NSTextFieldCell;
	    "-setPlaceholderAttributedString:" = NSTextFieldCell;
	    "-setPlaceholderString:" = NSTextFieldCell;
	    "-setTextColor:" = NSTextFieldCell;
	    "-textColor" = NSTextFieldCell;
	};
	"NSTextFieldCell(PrivateMethods)" = {
	    "-_drawBackgroundWithFrame:inView:" = NSTextFieldCell;
	};
	NSTextStorage = {
	    "-addLayoutManager:" = NSTextStorage;
	    "-beginEditing" = NSTextStorage;
	    "-changeInLength" = NSTextStorage;
	    "-delegate" = NSTextStorage;
	    "-edited:range:changeInLength:" = NSTextStorage;
	    "-editedMask" = NSTextStorage;
	    "-editedRange" = NSTextStorage;
	    "-endEditing" = NSTextStorage;
	    "-ensureAttributesAreFixedInRange:" = NSTextStorage;
	    "-fixesAttributesLazily" = NSTextStorage;
	    "-invalidateAttributesInRange:" = NSTextStorage;
	    "-layoutManagers" = NSTextStorage;
	    "-processEditing" = NSTextStorage;
	    "-removeLayoutManager:" = NSTextStorage;
	    "-setDelegate:" = NSTextStorage;
	    "-string" = NSTextStorage;
	};
	"NSTextStorage(Scripting)" = {
	    "-attributeRuns" = NSTextStorage;
	    "-characters" = NSTextStorage;
	    "-font" = NSTextStorage;
	    "-foregroundColor" = NSTextStorage;
	    "-paragraphs" = NSTextStorage;
	    "-setFont:" = NSTextStorage;
	    "-words" = NSTextStorage;
	};
	NSTextTab = {
	    "-alignment" = NSParagraphStyle;
	    "-initWithTextAlignment:location:options:" = NSParagraphStyle;
	    "-initWithType:location:" = NSParagraphStyle;
	    "-location" = NSParagraphStyle;
	    "-options" = NSParagraphStyle;
	    "-tabStopType" = NSParagraphStyle;
	};
	NSTextView = {
	    "+defaultTypingAttributes" = NSTextView;
	    "+registerForServices" = NSTextView;
	    "-_updateInputMethodState" = NSTextView;
	    "-_updateInputMethodWithInsertionPoint:" = NSTextView;
	    "-allowsUndo" = NSTextView;
	    "-defaultParagraphStyle" = NSTextView;
	    "-didChangeText" = NSTextView;
	    "-initWithFrame:" = NSTextView;
	    "-initWithFrame:textContainer:" = NSTextView;
	    "-insertionPointColor" = NSTextView;
	    "-invalidateTextContainerOrigin" = NSTextView;
	    "-isContinuousSpellCheckingEnabled" = NSTextView;
	    "-layoutManager" = NSTextView;
	    "-linkTextAttributes" = NSTextView;
	    "-markedTextAttributes" = NSTextView;
	    "-pasteAsPlainText:" = NSTextView;
	    "-pasteAsRichText:" = NSTextView;
	    "-rangeForUserCharacterAttributeChange" = NSTextView;
	    "-rangeForUserCompletion" = NSTextView;
	    "-rangeForUserParagraphAttributeChange" = NSTextView;
	    "-rangeForUserTextChange" = NSTextView;
	    "-rangesForUserCharacterAttributeChange" = NSTextView;
	    "-rangesForUserParagraphAttributeChange" = NSTextView;
	    "-rangesForUserTextChange" = NSTextView;
	    "-replaceCharactersInRange:withAttributedString:" = NSTextView;
	    "-replaceCharactersInRange:withString:" = NSTextView;
	    "-replaceTextContainer:" = NSTextView;
	    "-selectedTextAttributes" = NSTextView;
	    "-setAlignment:range:" = NSTextView;
	    "-setAllowsUndo:" = NSTextView;
	    "-setConstrainedFrameSize:" = NSTextView;
	    "-setContinuousSpellCheckingEnabled:" = NSTextView;
	    "-setDefaultParagraphStyle:" = NSTextView;
	    "-setInsertionPointColor:" = NSTextView;
	    "-setLinkTextAttributes:" = NSTextView;
	    "-setMarkedTextAttributes:" = NSTextView;
	    "-setRulerVisible:" = NSTextView;
	    "-setSelectedTextAttributes:" = NSTextView;
	    "-setSmartInsertDeleteEnabled:" = NSTextView;
	    "-setTextContainer:" = NSTextView;
	    "-setTextContainerInset:" = NSTextView;
	    "-setUsesFindPanel:" = NSTextView;
	    "-setUsesRuler:" = NSTextView;
	    "-shouldChangeTextInRange:replacementString:" = NSTextView;
	    "-shouldChangeTextInRanges:replacementStrings:" = NSTextView;
	    "-smartInsertDeleteEnabled" = NSTextView;
	    "-textContainer" = NSTextView;
	    "-textContainerInset" = NSTextView;
	    "-textContainerOrigin" = NSTextView;
	    "-textStorage" = NSTextView;
	    "-usesFindPanel" = NSTextView;
	    "-usesRuler" = NSTextView;
	};
	"NSTextView(GSTextViewSync)" = {
	    "-_layoutManagerDidInvalidateLayout" = NSTextView;
	    "-_recacheDelegateResponses" = NSTextView;
	    "-_syncTextViewsByCalling:withFlag:" = NSTextView;
	    "-_updateMultipleTextViews" = NSTextView;
	};
	"NSTextView(UserActions)" = {
	    "-alignJustified:" = NSTextView;
	    "-loosenKerning:" = NSTextView;
	    "-lowerBaseline:" = NSTextView;
	    "-outline:" = NSTextView;
	    "-raiseBaseline:" = NSTextView;
	    "-setBaseWritingDirection:range:" = NSTextView;
	    "-tightenKerning:" = NSTextView;
	    "-toggleBaseWritingDirection:" = NSTextView;
	    "-toggleContinuousSpellChecking:" = NSTextView;
	    "-toggleTraditionalCharacterShape:" = NSTextView;
	    "-transpose:" = NSTextView;
	    "-turnOffKerning:" = NSTextView;
	    "-turnOffLigatures:" = NSTextView;
	    "-useAllLigatures:" = NSTextView;
	    "-useStandardKerning:" = NSTextView;
	    "-useStandardLigatures:" = NSTextView;
	};
	"NSTextView(leftovers)" = {
	    "-acceptableDragTypes" = NSTextView;
	    "-acceptsGlyphInfo" = NSTextView;
	    "-allowsDocumentBackgroundColorChange" = NSTextView;
	    "-breakUndoCoalescing" = NSTextView;
	    "-changeAttributes:" = NSTextView;
	    "-changeDocumentBackgroundColor:" = NSTextView;
	    "-cleanUpAfterDragOperation" = NSTextView;
	    "-clickedOnLink:atIndex:" = NSTextView;
	    "-complete:" = NSTextView;
	    "-completionsForPartialWordRange:indexOfSelectedItem:" = NSTextView;
	    "-dragImageForSelectionWithEvent:origin:" = NSTextView;
	    "-dragOperationForDraggingInfo:type:" = NSTextView;
	    "-dragSelectionWithEvent:offset:slideBack:" = NSTextView;
	    "-drawInsertionPointInRect:color:turnedOn:" = NSTextView;
	    "-drawViewBackgroundInRect:" = NSTextView;
	    "-insertCompletion:forPartialWordRange:movement:isFinal:" = NSTextView;
	    "-orderFrontLinkPanel:" = NSTextView;
	    "-orderFrontListPanel:" = NSTextView;
	    "-orderFrontTablePanel:" = NSTextView;
	    "-performFindPanelAction:" = NSTextView;
	    "-preferredPasteboardTypeFromArray:restrictedToTypesFromArray:" = NSTextView;
	    "-readSelectionFromPasteboard:" = NSTextView;
	    "-readSelectionFromPasteboard:type:" = NSTextView;
	    "-readablePasteboardTypes" = NSTextView;
	    "-selectedRanges" = NSTextView;
	    "-selectionAffinity" = NSTextView;
	    "-selectionGranularity" = NSTextView;
	    "-selectionRangeForProposedRange:granularity:" = NSTextView;
	    "-setAcceptsGlyphInfo:" = NSTextView;
	    "-setAllowsDocumentBackgroundColorChange:" = NSTextView;
	    "-setNeedsDisplayInRect:avoidAdditionalLayout:" = NSTextView;
	    "-setSelectedRange:" = NSTextView;
	    "-setSelectedRange:affinity:stillSelecting:" = NSTextView;
	    "-setSelectedRanges:" = NSTextView;
	    "-setSelectedRanges:affinity:stillSelecting:" = NSTextView;
	    "-setSelectionGranularity:" = NSTextView;
	    "-setTypingAttributes:" = NSTextView;
	    "-shouldDrawInsertionPoint" = NSTextView;
	    "-smartDeleteRangeForProposedRange:" = NSTextView;
	    "-smartInsertAfterStringForString:replacingRange:" = NSTextView;
	    "-smartInsertBeforeStringForString:replacingRange:" = NSTextView;
	    "-smartInsertForString:replacingRange:beforeString:afterString:" = NSTextView;
	    "-spellCheckerDocumentTag" = NSTextView;
	    "-startSpeaking:" = NSTextView;
	    "-stopSpeaking:" = NSTextView;
	    "-toggleSmartInsertDelete:" = NSTextView;
	    "-typingAttributes" = NSTextView;
	    "-updateDragTypeRegistration" = NSTextView;
	    "-updateFontPanel" = NSTextView;
	    "-updateInsertionPointStateAndRestartTimer:" = NSTextView;
	    "-updateRuler" = NSTextView;
	    "-validRequestorForSendType:returnType:" = NSTextView;
	    "-writablePasteboardTypes" = NSTextView;
	    "-writeSelectionToPasteboard:type:" = NSTextView;
	    "-writeSelectionToPasteboard:types:" = NSTextView;
	};
	NSTokenField = {
	    "+defaultCompletionDelay" = NSTokenField;
	    "+defaultTokenizingCharacterSet" = NSTokenField;
	    "-completionDelay" = NSTokenField;
	    "-setCompletionDelay:" = NSTokenField;
	    "-setTokenStyle:" = NSTokenField;
	    "-setTokenizingCharacterSet:" = NSTokenField;
	    "-tokenStyle" = NSTokenField;
	    "-tokenizingCharacterSet" = NSTokenField;
	};
	NSTokenFieldCell = {
	    "+defaultCompletionDelay" = NSTokenFieldCell;
	    "+defaultTokenizingCharacterSet" = NSTokenFieldCell;
	    "-completionDelay" = NSTokenFieldCell;
	    "-setCompletionDelay:" = NSTokenFieldCell;
	    "-setTokenStyle:" = NSTokenFieldCell;
	    "-setTokenizingCharacterSet:" = NSTokenFieldCell;
	    "-tokenStyle" = NSTokenFieldCell;
	    "-tokenizingCharacterSet" = NSTokenFieldCell;
	};
	"NSURL(NSPasteboard)" = {
	    "+URLFromPasteboard:" = NSPasteboard;
	    "-writeToPasteboard:" = NSPasteboard;
	};
	NSUserDefaultsController = {
	    "+sharedUserDefaultsController" = NSUserDefaultsController;
	    "-appliesImmediately" = NSUserDefaultsController;
	    "-defaults" = NSUserDefaultsController;
	    "-hasUnappliedChanges" = NSUserDefaultsController;
	    "-initWithDefaults:initialValues:" = NSUserDefaultsController;
	    "-initialValues" = NSUserDefaultsController;
	    "-revert:" = NSUserDefaultsController;
	    "-revertToInitialValues:" = NSUserDefaultsController;
	    "-save:" = NSUserDefaultsController;
	    "-setAppliesImmediately:" = NSUserDefaultsController;
	    "-setInitialValues:" = NSUserDefaultsController;
	    "-values" = NSUserDefaultsController;
	};
	NSView = {
	    "+defaultFocusRingType" = NSView;
	    "+defaultMenu" = NSView;
	    "+focusView" = NSView;
	    "-acceptsFirstMouse:" = NSView;
	    "-addCursorRect:cursor:" = NSView;
	    "-addSubview:" = NSView;
	    "-addSubview:positioned:relativeTo:" = NSView;
	    "-addToPageSetup" = NSView;
	    "-addToolTipRect:owner:userData:" = NSView;
	    "-addTrackingRect:owner:userData:assumeInside:" = NSView;
	    "-adjustPageHeightNew:top:bottom:limit:" = NSView;
	    "-adjustPageWidthNew:left:right:limit:" = NSView;
	    "-adjustScroll:" = NSView;
	    "-allocateGState" = NSView;
	    "-alphaValue" = NSView;
	    "-ancestorSharedWithView:" = NSView;
	    "-autoresizesSubviews" = NSView;
	    "-autoresizingMask" = NSView;
	    "-autoscroll:" = NSView;
	    "-baselineOffsetFromBottom" = NSView;
	    "-beginDocument" = NSView;
	    "-beginPage:label:bBox:fonts:" = NSView;
	    "-beginPageInRect:atPlacement:" = NSView;
	    "-beginPageSetupRect:placement:" = NSView;
	    "-beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:" = NSView;
	    "-beginSetup" = NSView;
	    "-beginTrailer" = NSView;
	    "-bitmapImageRepForCachingDisplayInRect:" = NSView;
	    "-bounds" = NSView;
	    "-boundsRotation" = NSView;
	    "-cacheDisplayInRect:toBitmapImageRep:" = NSView;
	    "-canBecomeKeyView" = NSView;
	    "-canDraw" = NSView;
	    "-centerScanRect:" = NSView;
	    "-contentCompressionResistancePriority" = NSView;
	    "-convertPoint:fromView:" = NSView;
	    "-convertPoint:toView:" = NSView;
	    "-convertPointFromBase:" = NSView;
	    "-convertPointToBase:" = NSView;
	    "-convertRect:fromView:" = NSView;
	    "-convertRect:toView:" = NSView;
	    "-convertRectFromBase:" = NSView;
	    "-convertRectToBase:" = NSView;
	    "-convertSize:fromView:" = NSView;
	    "-convertSize:toView:" = NSView;
	    "-convertSizeFromBase:" = NSView;
	    "-convertSizeToBase:" = NSView;
	    "-dataWithEPSInsideRect:" = NSView;
	    "-dataWithPDFInsideRect:" = NSView;
	    "-didAddSubview:" = NSView;
	    "-discardCursorRects" = NSView;
	    "-display" = NSView;
	    "-displayIfNeeded" = NSView;
	    "-displayIfNeededIgnoringOpacity" = NSView;
	    "-displayIfNeededInRect:" = NSView;
	    "-displayIfNeededInRectIgnoringOpacity:" = NSView;
	    "-displayRect:" = NSView;
	    "-displayRectIgnoringOpacity:" = NSView;
	    "-displayRectIgnoringOpacity:inContext:" = NSView;
	    "-dragFile:fromRect:slideBack:event:" = NSView;
	    "-dragImage:at:offset:event:pasteboard:source:slideBack:" = NSView;
	    "-dragPromisedFilesOfTypes:fromRect:source:slideBack:event:" = NSView;
	    "-drawPageBorderWithSize:" = NSView;
	    "-drawRect:" = NSView;
	    "-drawSheetBorderWithSize:" = NSView;
	    "-enclosingScrollView" = NSView;
	    "-endDocument" = NSView;
	    "-endHeaderComments" = NSView;
	    "-endPage" = NSView;
	    "-endPageSetup" = NSView;
	    "-endPrologue" = NSView;
	    "-endSetup" = NSView;
	    "-endTrailer" = NSView;
	    "-fax:" = NSView;
	    "-firstBaselineOffsetFromTop" = NSView;
	    "-focusRingType" = NSView;
	    "-frame" = NSView;
	    "-frameCenterRotation" = NSView;
	    "-frameRotation" = NSView;
	    "-gState" = NSView;
	    "-getRectsBeingDrawn:count:" = NSView;
	    "-getRectsExposedDuringLiveResize:count:" = NSView;
	    "-heightAdjustLimit" = NSView;
	    "-hitTest:" = NSView;
	    "-inLiveResize" = NSView;
	    "-initWithFrame:" = NSView;
	    "-intrinsicContentSize" = NSView;
	    "-isDescendantOf:" = NSView;
	    "-isFlipped" = NSView;
	    "-isHidden" = NSView;
	    "-isHiddenOrHasHiddenAncestor" = NSView;
	    "-isOpaque" = NSView;
	    "-isRotatedFromBase" = NSView;
	    "-isRotatedOrScaledFromBase" = NSView;
	    "-knowsPageRange:" = NSView;
	    "-knowsPagesFirst:last:" = NSView;
	    "-layerContentsPlacement" = NSView;
	    "-layerContentsRedrawPolicy" = NSView;
	    "-layout" = NSView;
	    "-layoutSubtreeIfNeeded" = NSView;
	    "-locationOfPrintRect:" = NSView;
	    "-lockFocus" = NSView;
	    "-lockFocusIfCanDraw" = NSView;
	    "-lockFocusIfCanDrawInContext:" = NSView;
	    "-lockFocusInRect:" = NSView;
	    "-menuForEvent:" = NSView;
	    "-mouse:inRect:" = NSView;
	    "-mouseDownCanMoveWindow" = NSView;
	    "-needsDisplay" = NSView;
	    "-needsLayout" = NSView;
	    "-needsPanelToBecomeKey" = NSView;
	    "-needsToDrawRect:" = NSView;
	    "-needsUpdateConstraints" = NSView;
	    "-nextKeyView" = NSView;
	    "-nextValidKeyView" = NSView;
	    "-opaqueAncestor" = NSView;
	    "-pageFooter" = NSView;
	    "-pageHeader" = NSView;
	    "-performKeyEquivalent:" = NSView;
	    "-performMnemonic:" = NSView;
	    "-postsBoundsChangedNotifications" = NSView;
	    "-postsFrameChangedNotifications" = NSView;
	    "-preservesContentDuringLiveResize" = NSView;
	    "-previousKeyView" = NSView;
	    "-previousValidKeyView" = NSView;
	    "-print:" = NSView;
	    "-printJobTitle" = NSView;
	    "-rectForPage:" = NSView;
	    "-rectPreservedDuringLiveResize" = NSView;
	    "-reflectScrolledClipView:" = NSView;
	    "-registerForDraggedTypes:" = NSView;
	    "-registeredDraggedTypes" = NSView;
	    "-releaseGState" = NSView;
	    "-removeAllToolTips" = NSView;
	    "-removeCursorRect:cursor:" = NSView;
	    "-removeFromSuperview" = NSView;
	    "-removeFromSuperviewWithoutNeedingDisplay" = NSView;
	    "-removeSubview:" = NSView;
	    "-removeToolTip:" = NSView;
	    "-removeTrackingRect:" = NSView;
	    "-renewGState" = NSView;
	    "-replaceSubview:with:" = NSView;
	    "-resetCursorRects" = NSView;
	    "-resizeSubviewsWithOldSize:" = NSView;
	    "-resizeWithOldSuperviewSize:" = NSView;
	    "-rotateByAngle:" = NSView;
	    "-scaleUnitSquareToSize:" = NSView;
	    "-scrollClipView:toPoint:" = NSView;
	    "-scrollPoint:" = NSView;
	    "-scrollRect:by:" = NSView;
	    "-scrollRectToVisible:" = NSView;
	    "-setAlphaValue:" = NSView;
	    "-setAutoresizesSubviews:" = NSView;
	    "-setAutoresizingMask:" = NSView;
	    "-setBounds:" = NSView;
	    "-setBoundsOrigin:" = NSView;
	    "-setBoundsRotation:" = NSView;
	    "-setBoundsSize:" = NSView;
	    "-setContentCompressionResistancePriority:" = NSView;
	    "-setFocusRingType:" = NSView;
	    "-setFrame:" = NSView;
	    "-setFrameCenterRotation:" = NSView;
	    "-setFrameOrigin:" = NSView;
	    "-setFrameRotation:" = NSView;
	    "-setFrameSize:" = NSView;
	    "-setHidden:" = NSView;
	    "-setKeyboardFocusRingNeedsDisplayInRect:" = NSView;
	    "-setLayerContentsPlacement:" = NSView;
	    "-setLayerContentsRedrawPolicy:" = NSView;
	    "-setNeedsDisplay:" = NSView;
	    "-setNeedsDisplayInRect:" = NSView;
	    "-setNeedsLayout:" = NSView;
	    "-setNeedsUpdateConstraints:" = NSView;
	    "-setNextKeyView:" = NSView;
	    "-setPostsBoundsChangedNotifications:" = NSView;
	    "-setPostsFrameChangedNotifications:" = NSView;
	    "-setPreviousKeyView:" = NSView;
	    "-setSubviews:" = NSView;
	    "-setToolTip:" = NSView;
	    "-setTranslatesAutoresizingMaskIntoConstraints:" = NSView;
	    "-setUpGState" = NSView;
	    "-setUserInterfaceLayoutDirection:" = NSView;
	    "-shouldDelayWindowOrderingForEvent:" = NSView;
	    "-shouldDrawColor" = NSView;
	    "-sortSubviewsUsingFunction:context:" = NSView;
	    "-subviews" = NSView;
	    "-superview" = NSView;
	    "-tag" = NSView;
	    "-toolTip" = NSView;
	    "-translateOriginToPoint:" = NSView;
	    "-translatesAutoresizingMaskIntoConstraints" = NSView;
	    "-unlockFocus" = NSView;
	    "-unregisterDraggedTypes" = NSView;
	    "-userInterfaceLayoutDirection" = NSView;
	    "-viewDidEndLiveResize" = NSView;
	    "-viewDidMoveToSuperview" = NSView;
	    "-viewDidMoveToWindow" = NSView;
	    "-viewWillMoveToSuperview:" = NSView;
	    "-viewWillMoveToWindow:" = NSView;
	    "-viewWillStartLiveResize" = NSView;
	    "-viewWithTag:" = NSView;
	    "-visibleRect" = NSView;
	    "-wantsDefaultClipping" = NSView;
	    "-widthAdjustLimit" = NSView;
	    "-willRemoveSubview:" = NSView;
	    "-window" = NSView;
	    "-writeEPSInsideRect:toPasteboard:" = NSView;
	    "-writePDFInsideRect:toPasteboard:" = NSView;
	};
	"NSView(CoreAnimationSupport)" = {
	    "-setShadow:" = NSView;
	    "-shadow" = NSView;
	};
	"NSView(NSConstraintBasedLayoutCoreMethods)" = {
	    "-contentCompressionResistancePriorityForOrientation:" = NSView;
	    "-contentHuggingPriorityForOrientation:" = NSView;
	    "-setContentCompressionResistancePriority:forOrientation:" = NSView;
	    "-setContentHuggingPriority:forOrientation:" = NSView;
	    "-updateConstraints" = NSView;
	    "-updateConstraintsForSubtreeIfNeeded" = NSView;
	};
	"NSView(NSConstraintBasedLayoutInstallingConstraints)" = {
	    "-addConstraint:" = NSView;
	    "-addConstraints:" = NSView;
	};
	"NSView(PrivateMethods)" = {
	    "-_ignoresBacking" = NSView;
	    "-_invalidateCoordinates" = NSView;
	    "-_matrixFromWindow" = NSView;
	    "-_matrixToWindow" = NSView;
	    "-_rebuildCoordinates" = NSView;
	    "-_setIgnoresBacking:" = NSView;
	};
	NSWindow = {
	    "+contentRectForFrameRect:styleMask:" = NSWindow;
	    "+defaultDepthLimit" = NSWindow;
	    "+frameRectForContentRect:styleMask:" = NSWindow;
	    "+menuChanged:" = NSWindow;
	    "+minFrameWidthWithTitle:styleMask:" = NSWindow;
	    "+removeFrameUsingName:" = NSWindow;
	    "+standardWindowButton:forStyleMask:" = NSWindow;
	    "+windowNumberAtPoint:belowWindowWithWindowNumber:" = NSWindow;
	    "+windowWithContentViewController:" = NSWindow;
	    "-acceptsMouseMovedEvents" = NSWindow;
	    "-addChildWindow:ordered:" = NSWindow;
	    "-allowsToolTipsWhenApplicationIsInactive" = NSWindow;
	    "-alphaValue" = NSWindow;
	    "-animationResizeTime:" = NSWindow;
	    "-areCursorRectsEnabled" = NSWindow;
	    "-aspectRatio" = NSWindow;
	    "-autorecalculatesKeyViewLoop" = NSWindow;
	    "-backgroundColor" = NSWindow;
	    "-backingScaleFactor" = NSWindow;
	    "-backingType" = NSWindow;
	    "-becomeKeyWindow" = NSWindow;
	    "-becomeMainWindow" = NSWindow;
	    "-beginSheet:completionHandler:" = NSWindow;
	    "-cacheImageInRect:" = NSWindow;
	    "-canBecomeKeyWindow" = NSWindow;
	    "-canBecomeMainWindow" = NSWindow;
	    "-canHide" = NSWindow;
	    "-canStoreColor" = NSWindow;
	    "-cascadeTopLeftFromPoint:" = NSWindow;
	    "-center" = NSWindow;
	    "-childWindows" = NSWindow;
	    "-close" = NSWindow;
	    "-collectionBehavior" = NSWindow;
	    "-constrainFrameRect:toScreen:" = NSWindow;
	    "-contentAspectRatio" = NSWindow;
	    "-contentMaxSize" = NSWindow;
	    "-contentMinSize" = NSWindow;
	    "-contentRectForFrameRect:" = NSWindow;
	    "-contentResizeIncrements" = NSWindow;
	    "-contentView" = NSWindow;
	    "-convertBaseToScreen:" = NSWindow;
	    "-convertRectFromScreen:" = NSWindow;
	    "-convertRectToScreen:" = NSWindow;
	    "-convertScreenToBase:" = NSWindow;
	    "-counterpart" = NSWindow;
	    "-currentEvent" = NSWindow;
	    "-dataWithEPSInsideRect:" = NSWindow;
	    "-dataWithPDFInsideRect:" = NSWindow;
	    "-deepestScreen" = NSWindow;
	    "-defaultButtonCell" = NSWindow;
	    "-delegate" = NSWindow;
	    "-deminiaturize:" = NSWindow;
	    "-depthLimit" = NSWindow;
	    "-deviceDescription" = NSWindow;
	    "-disableCursorRects" = NSWindow;
	    "-disableFlushWindow" = NSWindow;
	    "-disableKeyEquivalentForDefaultButtonCell" = NSWindow;
	    "-discardCachedImage" = NSWindow;
	    "-discardCursorRects" = NSWindow;
	    "-discardEventsMatchingMask:beforeEvent:" = NSWindow;
	    "-display" = NSWindow;
	    "-displayIfNeeded" = NSWindow;
	    "-displaysWhenScreenProfileChanges" = NSWindow;
	    "-dragImage:at:offset:event:pasteboard:source:slideBack:" = NSWindow;
	    "-drawers" = NSWindow;
	    "-enableCursorRects" = NSWindow;
	    "-enableFlushWindow" = NSWindow;
	    "-enableKeyEquivalentForDefaultButtonCell" = NSWindow;
	    "-endEditingFor:" = NSWindow;
	    "-fax:" = NSWindow;
	    "-fieldEditor:forObject:" = NSWindow;
	    "-firstResponder" = NSWindow;
	    "-flushWindow" = NSWindow;
	    "-flushWindowIfNeeded" = NSWindow;
	    "-frame" = NSWindow;
	    "-frameAutosaveName" = NSWindow;
	    "-frameRectForContentRect:" = NSWindow;
	    "-gState" = NSWindow;
	    "-graphicsContext" = NSWindow;
	    "-hasDynamicDepthLimit" = NSWindow;
	    "-hasShadow" = NSWindow;
	    "-hidesOnDeactivate" = NSWindow;
	    "-ignoresMouseEvents" = NSWindow;
	    "-initWithContentRect:styleMask:backing:defer:" = NSWindow;
	    "-initWithContentRect:styleMask:backing:defer:screen:" = NSWindow;
	    "-initWithWindowRef:" = NSWindow;
	    "-initialFirstResponder" = NSWindow;
	    "-invalidateCursorRectsForView:" = NSWindow;
	    "-invalidateShadow" = NSWindow;
	    "-isAutodisplay" = NSWindow;
	    "-isDocumentEdited" = NSWindow;
	    "-isExcludedFromWindowsMenu" = NSWindow;
	    "-isFlushWindowDisabled" = NSWindow;
	    "-isKeyWindow" = NSWindow;
	    "-isMainWindow" = NSWindow;
	    "-isMiniaturized" = NSWindow;
	    "-isMovableByWindowBackground" = NSWindow;
	    "-isOneShot" = NSWindow;
	    "-isOpaque" = NSWindow;
	    "-isReleasedWhenClosed" = NSWindow;
	    "-isVisible" = NSWindow;
	    "-isZoomed" = NSWindow;
	    "-keyDown:" = NSWindow;
	    "-keyViewSelectionDirection" = NSWindow;
	    "-level" = NSWindow;
	    "-makeFirstResponder:" = NSWindow;
	    "-makeKeyAndOrderFront:" = NSWindow;
	    "-makeKeyWindow" = NSWindow;
	    "-makeMainWindow" = NSWindow;
	    "-maxSize" = NSWindow;
	    "-minSize" = NSWindow;
	    "-miniaturize:" = NSWindow;
	    "-miniwindowImage" = NSWindow;
	    "-miniwindowTitle" = NSWindow;
	    "-mouseLocationOutsideOfEventStream" = NSWindow;
	    "-nextEventMatchingMask:" = NSWindow;
	    "-nextEventMatchingMask:untilDate:inMode:dequeue:" = NSWindow;
	    "-orderBack:" = NSWindow;
	    "-orderFront:" = NSWindow;
	    "-orderFrontRegardless" = NSWindow;
	    "-orderOut:" = NSWindow;
	    "-orderWindow:relativeTo:" = NSWindow;
	    "-parentWindow" = NSWindow;
	    "-performClose:" = NSWindow;
	    "-performMiniaturize:" = NSWindow;
	    "-performZoom:" = NSWindow;
	    "-postEvent:atStart:" = NSWindow;
	    "-preservesContentDuringLiveResize" = NSWindow;
	    "-print:" = NSWindow;
	    "-recalculateKeyViewLoop" = NSWindow;
	    "-registerForDraggedTypes:" = NSWindow;
	    "-removeChildWindow:" = NSWindow;
	    "-representedFilename" = NSWindow;
	    "-resetCursorRects" = NSWindow;
	    "-resignKeyWindow" = NSWindow;
	    "-resignMainWindow" = NSWindow;
	    "-resizeFlags" = NSWindow;
	    "-resizeIncrements" = NSWindow;
	    "-restoreCachedImage" = NSWindow;
	    "-saveFrameUsingName:" = NSWindow;
	    "-screen" = NSWindow;
	    "-selectKeyViewFollowingView:" = NSWindow;
	    "-selectKeyViewPrecedingView:" = NSWindow;
	    "-selectNextKeyView:" = NSWindow;
	    "-selectPreviousKeyView:" = NSWindow;
	    "-sendEvent:" = NSWindow;
	    "-setAcceptsMouseMovedEvents:" = NSWindow;
	    "-setAllowsToolTipsWhenApplicationIsInactive:" = NSWindow;
	    "-setAlphaValue:" = NSWindow;
	    "-setAspectRatio:" = NSWindow;
	    "-setAutodisplay:" = NSWindow;
	    "-setAutorecalculatesKeyViewLoop:" = NSWindow;
	    "-setBackgroundColor:" = NSWindow;
	    "-setBackingType:" = NSWindow;
	    "-setCanHide:" = NSWindow;
	    "-setCollectionBehavior:" = NSWindow;
	    "-setContentAspectRatio:" = NSWindow;
	    "-setContentMaxSize:" = NSWindow;
	    "-setContentMinSize:" = NSWindow;
	    "-setContentResizeIncrements:" = NSWindow;
	    "-setContentSize:" = NSWindow;
	    "-setContentView:" = NSWindow;
	    "-setDefaultButtonCell:" = NSWindow;
	    "-setDelegate:" = NSWindow;
	    "-setDepthLimit:" = NSWindow;
	    "-setDisplaysWhenScreenProfileChanges:" = NSWindow;
	    "-setDocumentEdited:" = NSWindow;
	    "-setDynamicDepthLimit:" = NSWindow;
	    "-setExcludedFromWindowsMenu:" = NSWindow;
	    "-setFrame:display:" = NSWindow;
	    "-setFrame:display:animate:" = NSWindow;
	    "-setFrameAutosaveName:" = NSWindow;
	    "-setFrameFromString:" = NSWindow;
	    "-setFrameOrigin:" = NSWindow;
	    "-setFrameTopLeftPoint:" = NSWindow;
	    "-setFrameUsingName:" = NSWindow;
	    "-setFrameUsingName:force:" = NSWindow;
	    "-setHasShadow:" = NSWindow;
	    "-setHidesOnDeactivate:" = NSWindow;
	    "-setIgnoresMouseEvents:" = NSWindow;
	    "-setInitialFirstResponder:" = NSWindow;
	    "-setIsVisible:" = NSWindow;
	    "-setLevel:" = NSWindow;
	    "-setMaxSize:" = NSWindow;
	    "-setMinSize:" = NSWindow;
	    "-setMiniwindowImage:" = NSWindow;
	    "-setMiniwindowTitle:" = NSWindow;
	    "-setMovableByWindowBackground:" = NSWindow;
	    "-setOneShot:" = NSWindow;
	    "-setOpaque:" = NSWindow;
	    "-setParentWindow:" = NSWindow;
	    "-setPreservesContentDuringLiveResize:" = NSWindow;
	    "-setReleasedWhenClosed:" = NSWindow;
	    "-setRepresentedFilename:" = NSWindow;
	    "-setResizeIncrements:" = NSWindow;
	    "-setShowsResizeIndicator:" = NSWindow;
	    "-setShowsToolbarButton:" = NSWindow;
	    "-setTitle:" = NSWindow;
	    "-setTitleWithRepresentedFilename:" = NSWindow;
	    "-setViewsNeedDisplay:" = NSWindow;
	    "-setWindowController:" = NSWindow;
	    "-sheetParent" = NSWindow;
	    "-showsResizeIndicator" = NSWindow;
	    "-showsToolbarButton" = NSWindow;
	    "-standardWindowButton:" = NSWindow;
	    "-stringWithSavedFrame" = NSWindow;
	    "-styleMask" = NSWindow;
	    "-title" = NSWindow;
	    "-tryToPerform:with:" = NSWindow;
	    "-unregisterDraggedTypes" = NSWindow;
	    "-update" = NSWindow;
	    "-useOptimizedDrawing:" = NSWindow;
	    "-userSpaceScaleFactor" = NSWindow;
	    "-validRequestorForSendType:returnType:" = NSWindow;
	    "-viewsNeedDisplay" = NSWindow;
	    "-windowController" = NSWindow;
	    "-windowHandle" = NSWindow;
	    "-windowNumber" = NSWindow;
	    "-windowRef" = NSWindow;
	    "-worksWhenModal" = NSWindow;
	    "-zoom:" = NSWindow;
	};
	"NSWindow(GNUstepBackend)" = {
	    "-_captureMouse:" = NSWindow;
	    "-_initDefaults" = NSWindow;
	    "-_releaseMouse:" = NSWindow;
	    "-_setVisible:" = NSWindow;
	};
	"NSWindow(GNUstepTextView)" = {
	    "-_futureFirstResponder" = NSWindow;
	};
	"NSWindow(Toolbar)" = {
	    "-runToolbarCustomizationPalette:" = NSWindow;
	    "-setToolbar:" = NSWindow;
	    "-toggleToolbarShown:" = NSWindow;
	    "-toolbar" = NSWindow;
	};
	NSWindowController = {
	    "-close" = NSWindowController;
	    "-document" = NSWindowController;
	    "-initWithWindow:" = NSWindowController;
	    "-initWithWindowNibName:" = NSWindowController;
	    "-initWithWindowNibName:owner:" = NSWindowController;
	    "-initWithWindowNibPath:owner:" = NSWindowController;
	    "-isWindowLoaded" = NSWindowController;
	    "-loadWindow" = NSWindowController;
	    "-owner" = NSWindowController;
	    "-setDocument:" = NSWindowController;
	    "-setDocumentEdited:" = NSWindowController;
	    "-setShouldCascadeWindows:" = NSWindowController;
	    "-setShouldCloseDocument:" = NSWindowController;
	    "-setWindow:" = NSWindowController;
	    "-setWindowFrameAutosaveName:" = NSWindowController;
	    "-shouldCascadeWindows" = NSWindowController;
	    "-shouldCloseDocument" = NSWindowController;
	    "-showWindow:" = NSWindowController;
	    "-synchronizeWindowTitleWithDocumentName" = NSWindowController;
	    "-window" = NSWindowController;
	    "-windowDidLoad" = NSWindowController;
	    "-windowFrameAutosaveName" = NSWindowController;
	    "-windowNibName" = NSWindowController;
	    "-windowNibPath" = NSWindowController;
	    "-windowTitleForDocumentDisplayName:" = NSWindowController;
	    "-windowWillLoad" = NSWindowController;
	};
	NSWorkspace = {
	    "+sharedWorkspace" = NSWorkspace;
	    "-absolutePathForAppBundleWithIdentifier:" = NSWorkspace;
	    "-activeApplication" = NSWorkspace;
	    "-checkForRemovableMedia" = NSWorkspace;
	    "-extendPowerOffBy:" = NSWorkspace;
	    "-fileSystemChanged" = NSWorkspace;
	    "-filenameExtension:isValidForType:" = NSWorkspace;
	    "-findApplications" = NSWorkspace;
	    "-fullPathForApplication:" = NSWorkspace;
	    "-getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:" = NSWorkspace;
	    "-getInfoForFile:application:type:" = NSWorkspace;
	    "-hideOtherApplications" = NSWorkspace;
	    "-iconForFile:" = NSWorkspace;
	    "-iconForFileType:" = NSWorkspace;
	    "-iconForFiles:" = NSWorkspace;
	    "-isFilePackageAtPath:" = NSWorkspace;
	    "-launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:" = NSWorkspace;
	    "-launchApplication:" = NSWorkspace;
	    "-launchApplication:showIcon:autolaunch:" = NSWorkspace;
	    "-launchedApplications" = NSWorkspace;
	    "-localizedDescriptionForType:" = NSWorkspace;
	    "-mountNewRemovableMedia" = NSWorkspace;
	    "-mountedLocalVolumePaths" = NSWorkspace;
	    "-mountedRemovableMedia" = NSWorkspace;
	    "-noteFileSystemChanged" = NSWorkspace;
	    "-noteFileSystemChanged:" = NSWorkspace;
	    "-noteUserDefaultsChanged" = NSWorkspace;
	    "-notificationCenter" = NSWorkspace;
	    "-openFile:" = NSWorkspace;
	    "-openFile:fromImage:at:inView:" = NSWorkspace;
	    "-openFile:withApplication:" = NSWorkspace;
	    "-openFile:withApplication:andDeactivate:" = NSWorkspace;
	    "-openTempFile:" = NSWorkspace;
	    "-openURL:" = NSWorkspace;
	    "-openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:" = NSWorkspace;
	    "-performFileOperation:source:destination:files:tag:" = NSWorkspace;
	    "-preferredFilenameExtensionForType:" = NSWorkspace;
	    "-selectFile:inFileViewerRootedAtPath:" = NSWorkspace;
	    "-setIcon:forFile:options:" = NSWorkspace;
	    "-slideImage:from:to:" = NSWorkspace;
	    "-type:conformsToType:" = NSWorkspace;
	    "-typeOfFile:error:" = NSWorkspace;
	    "-unmountAndEjectDeviceAtPath:" = NSWorkspace;
	    "-userDefaultsChanged" = NSWorkspace;
	};
	"NSWorkspace(GNUstep)" = {
	    "-appIconForApp:" = NSWorkspace;
	    "-bundleForApp:" = NSWorkspace;
	    "-getBestAppInRole:forExtension:" = NSWorkspace;
	    "-getBestAppInRole:forScheme:" = NSWorkspace;
	    "-getBestIconForExtension:" = NSWorkspace;
	    "-infoForExtension:" = NSWorkspace;
	    "-infoForScheme:" = NSWorkspace;
	    "-locateApplicationBinary:" = NSWorkspace;
	    "-setBestApp:inRole:forExtension:" = NSWorkspace;
	    "-setBestApp:inRole:forScheme:" = NSWorkspace;
	    "-setBestIcon:forExtension:" = NSWorkspace;
	};
    };
}